nohup: ignoring input
================================================================================
Summary of training process:
Dataset                : Cifar10
Batch size             : 64
Learing rate           : 0.001
Number of total clients: 100
Split method           : quantity
Split parameter        : 5.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 0
Feature percentage     : 0.25
Local training loss    : CE_CE_KL
Loss of beta           : 1.0
Algorithm              : FedFea
Modelname              : MOBNET
Mode                   : training
Seed                   : 0
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,0.158,0.219,0.00,0.00,0.00,0.215,0.00,0.00,0.198,0.210,520
Client   1,0.00,0.224,0.194,0.00,0.00,0.00,0.177,0.191,0.00,0.214,509
Client   2,0.00,0.00,0.191,0.00,0.193,0.217,0.00,0.188,0.00,0.211,517
Client   3,0.167,0.232,0.00,0.222,0.00,0.00,0.183,0.197,0.00,0.00,492
Client   4,0.00,0.224,0.00,0.00,0.196,0.00,0.176,0.190,0.00,0.214,510
Client   5,0.158,0.219,0.00,0.210,0.00,0.215,0.00,0.00,0.198,0.00,520
Client   6,0.00,0.00,0.00,0.215,0.00,0.00,0.178,0.191,0.201,0.215,507
Client   7,0.00,0.218,0.00,0.00,0.00,0.215,0.172,0.186,0.00,0.209,522
Client   8,0.162,0.225,0.00,0.215,0.197,0.00,0.00,0.00,0.201,0.00,507
Client   9,0.165,0.00,0.197,0.219,0.201,0.00,0.00,0.00,0.00,0.219,498
Client  10,0.168,0.00,0.201,0.00,0.00,0.00,0.00,0.199,0.209,0.223,488
Client  11,0.00,0.220,0.00,0.210,0.00,0.00,0.173,0.187,0.00,0.210,519
Client  12,0.00,0.00,0.190,0.00,0.194,0.217,0.00,0.186,0.00,0.212,515
Client  13,0.170,0.00,0.204,0.227,0.00,0.00,0.187,0.00,0.212,0.00,481
Client  14,0.165,0.00,0.00,0.220,0.202,0.00,0.00,0.194,0.00,0.220,496
Client  15,0.00,0.214,0.00,0.205,0.00,0.209,0.00,0.180,0.192,0.00,532
Client  16,0.169,0.00,0.00,0.00,0.206,0.229,0.186,0.00,0.210,0.00,485
Client  17,0.00,0.00,0.197,0.00,0.00,0.223,0.181,0.193,0.205,0.00,497
Client  18,0.168,0.00,0.00,0.00,0.204,0.00,0.00,0.196,0.209,0.223,489
Client  19,0.164,0.228,0.196,0.00,0.00,0.00,0.00,0.192,0.00,0.218,499
Client  20,0.168,0.00,0.00,0.00,0.204,0.00,0.00,0.196,0.209,0.223,489
Client  21,0.162,0.226,0.194,0.00,0.00,0.00,0.00,0.00,0.202,0.216,505
Client  22,0.00,0.225,0.193,0.215,0.00,0.00,0.178,0.189,0.00,0.00,507
Client  23,0.168,0.00,0.201,0.223,0.00,0.00,0.184,0.00,0.00,0.223,488
Client  24,0.176,0.00,0.210,0.00,0.215,0.00,0.193,0.206,0.00,0.00,466
Client  25,0.165,0.229,0.00,0.00,0.201,0.223,0.181,0.00,0.00,0.00,497
Client  26,0.00,0.222,0.191,0.00,0.195,0.216,0.175,0.00,0.00,0.00,513
Client  27,0.164,0.00,0.00,0.00,0.00,0.222,0.00,0.192,0.204,0.218,500
Client  28,0.165,0.00,0.00,0.219,0.00,0.00,0.00,0.193,0.205,0.219,498
Client  29,0.00,0.221,0.00,0.00,0.194,0.00,0.175,0.00,0.198,0.212,515
Client  30,0.168,0.00,0.201,0.00,0.00,0.00,0.00,0.197,0.209,0.224,487
Client  31,0.00,0.218,0.00,0.00,0.191,0.212,0.00,0.184,0.195,0.00,523
Client  32,0.164,0.00,0.196,0.218,0.200,0.222,0.00,0.00,0.00,0.00,500
Client  33,0.163,0.227,0.195,0.217,0.199,0.00,0.00,0.00,0.00,0.00,503
Client  34,0.176,0.00,0.210,0.00,0.215,0.00,0.193,0.206,0.00,0.00,466
Client  35,0.163,0.00,0.00,0.216,0.198,0.220,0.00,0.00,0.202,0.00,504
Client  36,0.168,0.00,0.201,0.224,0.00,0.00,0.183,0.00,0.00,0.224,487
Client  37,0.00,0.219,0.00,0.209,0.192,0.00,0.00,0.184,0.196,0.00,521
Client  38,0.00,0.00,0.00,0.215,0.00,0.219,0.176,0.189,0.201,0.00,507
Client  39,0.165,0.00,0.197,0.219,0.201,0.00,0.00,0.00,0.00,0.219,498
Client  40,0.166,0.00,0.00,0.221,0.00,0.225,0.181,0.00,0.207,0.00,493
Client  41,0.164,0.228,0.196,0.00,0.00,0.222,0.00,0.192,0.00,0.00,501
Client  42,0.165,0.230,0.198,0.00,0.202,0.00,0.00,0.00,0.206,0.00,496
Client  43,0.00,0.224,0.00,0.215,0.197,0.00,0.175,0.189,0.00,0.00,508
Client  44,0.172,0.00,0.205,0.00,0.209,0.00,0.186,0.00,0.00,0.228,478
Client  45,0.168,0.00,0.00,0.00,0.00,0.228,0.183,0.197,0.00,0.224,487
Client  46,0.168,0.00,0.00,0.223,0.204,0.00,0.182,0.00,0.00,0.223,489
Client  47,0.164,0.00,0.00,0.218,0.00,0.222,0.00,0.192,0.204,0.00,500
Client  48,0.00,0.00,0.00,0.00,0.00,0.219,0.176,0.189,0.201,0.215,507
Client  49,0.00,0.00,0.193,0.00,0.197,0.219,0.176,0.00,0.00,0.215,507
Client  50,0.176,0.00,0.210,0.00,0.00,0.00,0.191,0.206,0.218,0.00,467
Client  51,0.166,0.231,0.198,0.00,0.00,0.225,0.180,0.00,0.00,0.00,494
Client  52,0.00,0.213,0.184,0.00,0.00,0.208,0.00,0.00,0.191,0.204,534
Client  53,0.00,0.215,0.185,0.206,0.189,0.00,0.00,0.00,0.00,0.206,530
Client  54,0.176,0.00,0.211,0.00,0.215,0.00,0.191,0.206,0.00,0.00,465
Client  55,0.00,0.00,0.00,0.216,0.198,0.220,0.176,0.190,0.00,0.00,505
Client  56,0.172,0.00,0.00,0.229,0.210,0.00,0.187,0.202,0.00,0.00,476
Client  57,0.00,0.00,0.195,0.00,0.00,0.221,0.177,0.191,0.00,0.217,503
Client  58,0.00,0.00,0.197,0.00,0.201,0.00,0.179,0.00,0.205,0.219,498
Client  59,0.160,0.222,0.00,0.212,0.195,0.00,0.00,0.00,0.00,0.212,514
Client  60,0.166,0.00,0.199,0.00,0.203,0.225,0.00,0.00,0.207,0.00,493
Client  61,0.00,0.216,0.185,0.206,0.189,0.00,0.00,0.00,0.00,0.204,529
Client  62,0.00,0.227,0.195,0.00,0.199,0.00,0.177,0.00,0.203,0.00,503
Client  63,0.165,0.00,0.00,0.219,0.00,0.00,0.00,0.193,0.205,0.217,497
Client  64,0.166,0.00,0.199,0.00,0.203,0.225,0.00,0.00,0.207,0.00,493
Client  65,0.167,0.00,0.00,0.00,0.00,0.226,0.181,0.00,0.207,0.220,492
Client  66,0.172,0.00,0.00,0.229,0.210,0.00,0.187,0.202,0.00,0.00,476
Client  67,0.170,0.237,0.00,0.00,0.208,0.00,0.185,0.200,0.00,0.00,481
Client  68,0.00,0.00,0.196,0.00,0.200,0.222,0.178,0.00,0.204,0.00,500
Client  69,0.166,0.00,0.198,0.00,0.00,0.224,0.00,0.194,0.00,0.218,495
Client  70,0.167,0.230,0.200,0.00,0.00,0.00,0.00,0.196,0.208,0.00,491
Client  71,0.00,0.217,0.00,0.00,0.192,0.213,0.171,0.00,0.00,0.207,521
Client  72,0.00,0.00,0.190,0.00,0.00,0.216,0.00,0.186,0.198,0.210,515
Client  73,0.159,0.219,0.00,0.211,0.00,0.215,0.00,0.00,0.197,0.00,517
Client  74,0.164,0.00,0.00,0.218,0.200,0.00,0.00,0.00,0.204,0.216,501
Client  75,0.00,0.00,0.194,0.213,0.198,0.219,0.176,0.00,0.00,0.00,506
Client  76,0.171,0.00,0.204,0.00,0.208,0.231,0.185,0.00,0.00,0.00,480
Client  77,0.164,0.00,0.00,0.216,0.00,0.222,0.00,0.192,0.204,0.00,499
Client  78,0.00,0.218,0.00,0.208,0.193,0.00,0.00,0.185,0.197,0.00,519
Client  79,0.169,0.00,0.202,0.223,0.00,0.00,0.184,0.00,0.00,0.223,485
Client  80,0.165,0.227,0.00,0.00,0.00,0.223,0.179,0.00,0.205,0.00,497
Client  81,0.00,0.213,0.00,0.00,0.00,0.209,0.00,0.181,0.192,0.204,530
Client  82,0.00,0.219,0.190,0.209,0.00,0.00,0.172,0.00,0.00,0.209,516
Client  83,0.160,0.221,0.191,0.211,0.00,0.217,0.00,0.00,0.00,0.00,512
Client  84,0.176,0.00,0.211,0.00,0.215,0.00,0.191,0.206,0.00,0.00,465
Client  85,0.00,0.00,0.00,0.00,0.201,0.223,0.179,0.193,0.205,0.00,498
Client  86,0.00,0.222,0.00,0.213,0.00,0.00,0.175,0.189,0.201,0.00,508
Client  87,0.169,0.00,0.00,0.222,0.00,0.228,0.183,0.198,0.00,0.00,486
Client  88,0.00,0.00,0.197,0.00,0.201,0.00,0.179,0.00,0.205,0.217,497
Client  89,0.00,0.214,0.186,0.205,0.190,0.00,0.00,0.00,0.00,0.205,527
Client  90,0.170,0.00,0.00,0.224,0.00,0.00,0.184,0.199,0.00,0.224,483
Client  91,0.166,0.229,0.00,0.219,0.00,0.00,0.180,0.00,0.206,0.00,494
Client  92,0.00,0.218,0.189,0.208,0.00,0.214,0.171,0.00,0.00,0.00,519
Client  93,0.00,0.00,0.199,0.219,0.00,0.00,0.181,0.195,0.207,0.00,493
Client  94,0.169,0.233,0.00,0.00,0.206,0.00,0.183,0.00,0.210,0.00,486
Client  95,0.164,0.226,0.196,0.00,0.00,0.222,0.00,0.192,0.00,0.00,500
Client  96,0.171,0.235,0.00,0.00,0.208,0.00,0.185,0.200,0.00,0.00,480
Client  97,0.169,0.00,0.00,0.00,0.00,0.232,0.186,0.200,0.213,0.00,479
Client  98,0.00,0.00,0.189,0.208,0.193,0.214,0.00,0.00,0.197,0.00,519
Client  99,0.166,0.231,0.200,0.00,0.00,0.00,0.182,0.00,0.00,0.221,489
0 [0 1 5 8 9] [0 1 5 8 9] [2 3 4 6 7]
0 training: Counter({1: 114, 5: 112, 9: 109, 8: 103, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000, 9: 1000, 5: 1000})
1 [1 2 6 7 9] [1 2 6 7 9] [0 3 4 5 8]
1 training: Counter({1: 114, 9: 109, 2: 99, 7: 97, 6: 90}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000, 7: 1000, 2: 1000})
2 [2 4 5 7 9] [2 4 5 7 9] [0 1 3 6 8]
2 training: Counter({5: 112, 9: 109, 4: 100, 2: 99, 7: 97}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000, 4: 1000, 2: 1000})
3 [0 1 3 6 7] [0 1 3 6 7] [2 4 5 8 9]
3 training: Counter({1: 114, 3: 109, 7: 97, 6: 90, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 1: 1000, 7: 1000})
4 [1 4 6 7 9] [1 4 6 7 9] [0 2 3 5 8]
4 training: Counter({1: 114, 9: 109, 4: 100, 7: 97, 6: 90}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000, 7: 1000, 4: 1000})
5 [0 1 3 5 8] [0 1 3 5 8] [2 4 6 7 9]
5 training: Counter({1: 114, 5: 112, 3: 109, 8: 103, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 1: 1000, 5: 1000})
6 [3 6 7 8 9] [3 6 7 8 9] [0 1 2 4 5]
6 training: Counter({3: 109, 9: 109, 8: 102, 7: 97, 6: 90}) testing iid: Counter({3: 1000, 8: 1000, 6: 1000, 9: 1000, 7: 1000})
7 [1 5 6 7 9] [1 5 6 7 9] [0 2 3 4 8]
7 training: Counter({1: 114, 5: 112, 9: 109, 7: 97, 6: 90}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000, 5: 1000, 7: 1000})
8 [0 1 3 4 8] [0 1 3 4 8] [2 5 6 7 9]
8 training: Counter({1: 114, 3: 109, 8: 102, 4: 100, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 1: 1000, 4: 1000})
9 [0 2 3 4 9] [0 2 3 4 9] [1 5 6 7 8]
9 training: Counter({3: 109, 9: 109, 4: 100, 2: 98, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000, 4: 1000, 2: 1000})
10 [0 2 7 8 9] [0 2 7 8 9] [1 3 4 5 6]
10 training: Counter({9: 109, 8: 102, 2: 98, 7: 97, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 9: 1000, 7: 1000, 2: 1000})
11 [1 3 6 7 9] [1 3 6 7 9] [0 2 4 5 8]
11 training: Counter({1: 114, 3: 109, 9: 109, 7: 97, 6: 90}) testing iid: Counter({3: 1000, 6: 1000, 1: 1000, 9: 1000, 7: 1000})
12 [2 4 5 7 9] [2 4 5 7 9] [0 1 3 6 8]
12 training: Counter({5: 112, 9: 109, 4: 100, 2: 98, 7: 96}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000, 4: 1000, 2: 1000})
13 [0 2 3 6 8] [0 2 3 6 8] [1 4 5 7 9]
13 training: Counter({3: 109, 8: 102, 2: 98, 6: 90, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 6: 1000, 2: 1000})
14 [0 3 4 7 9] [0 3 4 7 9] [1 2 5 6 8]
14 training: Counter({3: 109, 9: 109, 4: 100, 7: 96, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000, 7: 1000, 4: 1000})
15 [1 3 5 7 8] [1 3 5 7 8] [0 2 4 6 9]
15 training: Counter({1: 114, 5: 111, 3: 109, 8: 102, 7: 96}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000, 5: 1000, 7: 1000})
16 [0 4 5 6 8] [0 4 5 6 8] [1 2 3 7 9]
16 training: Counter({5: 111, 8: 102, 4: 100, 6: 90, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 5: 1000, 4: 1000})
17 [2 5 6 7 8] [2 5 6 7 8] [0 1 3 4 9]
17 training: Counter({5: 111, 8: 102, 2: 98, 7: 96, 6: 90}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000, 7: 1000, 2: 1000})
18 [0 4 7 8 9] [0 4 7 8 9] [1 2 3 5 6]
18 training: Counter({9: 109, 8: 102, 4: 100, 7: 96, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 9: 1000, 7: 1000, 4: 1000})
19 [0 1 2 7 9] [0 1 2 7 9] [3 4 5 6 8]
19 training: Counter({1: 114, 9: 109, 2: 98, 7: 96, 0: 82}) testing iid: Counter({0: 1000, 1: 1000, 9: 1000, 7: 1000, 2: 1000})
20 [0 4 7 8 9] [0 4 7 8 9] [1 2 3 5 6]
20 training: Counter({9: 109, 8: 102, 4: 100, 7: 96, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 9: 1000, 7: 1000, 4: 1000})
21 [0 1 2 8 9] [0 1 2 8 9] [3 4 5 6 7]
21 training: Counter({1: 114, 9: 109, 8: 102, 2: 98, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000, 9: 1000, 2: 1000})
22 [1 2 3 6 7] [1 2 3 6 7] [0 4 5 8 9]
22 training: Counter({1: 114, 3: 109, 2: 98, 7: 96, 6: 90}) testing iid: Counter({3: 1000, 6: 1000, 1: 1000, 7: 1000, 2: 1000})
23 [0 2 3 6 9] [0 2 3 6 9] [1 4 5 7 8]
23 training: Counter({3: 109, 9: 109, 2: 98, 6: 90, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 9: 1000, 2: 1000})
24 [0 2 4 6 7] [0 2 4 6 7] [1 3 5 8 9]
24 training: Counter({4: 100, 2: 98, 7: 96, 6: 90, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 7: 1000, 4: 1000, 2: 1000})
25 [0 1 4 5 6] [0 1 4 5 6] [2 3 7 8 9]
25 training: Counter({1: 114, 5: 111, 4: 100, 6: 90, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000, 5: 1000, 4: 1000})
26 [1 2 4 5 6] [1 2 4 5 6] [0 3 7 8 9]
26 training: Counter({1: 114, 5: 111, 4: 100, 2: 98, 6: 90}) testing iid: Counter({6: 1000, 1: 1000, 5: 1000, 4: 1000, 2: 1000})
27 [0 5 7 8 9] [0 5 7 8 9] [1 2 3 4 6]
27 training: Counter({5: 111, 9: 109, 8: 102, 7: 96, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 9: 1000, 5: 1000, 7: 1000})
28 [0 3 7 8 9] [0 3 7 8 9] [1 2 4 5 6]
28 training: Counter({3: 109, 9: 109, 8: 102, 7: 96, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 9: 1000, 7: 1000})
29 [1 4 6 8 9] [1 4 6 8 9] [0 2 3 5 7]
29 training: Counter({1: 114, 9: 109, 8: 102, 4: 100, 6: 90}) testing iid: Counter({8: 1000, 6: 1000, 1: 1000, 9: 1000, 4: 1000})
30 [0 2 7 8 9] [0 2 7 8 9] [1 3 4 5 6]
30 training: Counter({9: 109, 8: 102, 2: 98, 7: 96, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 9: 1000, 7: 1000, 2: 1000})
31 [1 4 5 7 8] [1 4 5 7 8] [0 2 3 6 9]
31 training: Counter({1: 114, 5: 111, 8: 102, 4: 100, 7: 96}) testing iid: Counter({8: 1000, 1: 1000, 5: 1000, 7: 1000, 4: 1000})
32 [0 2 3 4 5] [0 2 3 4 5] [1 6 7 8 9]
32 training: Counter({5: 111, 3: 109, 4: 100, 2: 98, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 5: 1000, 4: 1000, 2: 1000})
33 [0 1 2 3 4] [0 1 2 3 4] [5 6 7 8 9]
33 training: Counter({1: 114, 3: 109, 4: 100, 2: 98, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000, 4: 1000, 2: 1000})
34 [0 2 4 6 7] [0 2 4 6 7] [1 3 5 8 9]
34 training: Counter({4: 100, 2: 98, 7: 96, 6: 90, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 7: 1000, 4: 1000, 2: 1000})
35 [0 3 4 5 8] [0 3 4 5 8] [1 2 6 7 9]
35 training: Counter({5: 111, 3: 109, 8: 102, 4: 100, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 5: 1000, 4: 1000})
36 [0 2 3 6 9] [0 2 3 6 9] [1 4 5 7 8]
36 training: Counter({3: 109, 9: 109, 2: 98, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 9: 1000, 2: 1000})
37 [1 3 4 7 8] [1 3 4 7 8] [0 2 5 6 9]
37 training: Counter({1: 114, 3: 109, 8: 102, 4: 100, 7: 96}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000, 7: 1000, 4: 1000})
38 [3 5 6 7 8] [3 5 6 7 8] [0 1 2 4 9]
38 training: Counter({5: 111, 3: 109, 8: 102, 7: 96, 6: 89}) testing iid: Counter({3: 1000, 8: 1000, 6: 1000, 5: 1000, 7: 1000})
39 [0 2 3 4 9] [0 2 3 4 9] [1 5 6 7 8]
39 training: Counter({3: 109, 9: 109, 4: 100, 2: 98, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000, 4: 1000, 2: 1000})
40 [0 3 5 6 8] [0 3 5 6 8] [1 2 4 7 9]
40 training: Counter({5: 111, 3: 109, 8: 102, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 6: 1000, 5: 1000})
41 [0 1 2 5 7] [0 1 2 5 7] [3 4 6 8 9]
41 training: Counter({1: 114, 5: 111, 2: 98, 7: 96, 0: 82}) testing iid: Counter({0: 1000, 1: 1000, 5: 1000, 7: 1000, 2: 1000})
42 [0 1 2 4 8] [0 1 2 4 8] [3 5 6 7 9]
42 training: Counter({1: 114, 8: 102, 4: 100, 2: 98, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000, 4: 1000, 2: 1000})
43 [1 3 4 6 7] [1 3 4 6 7] [0 2 5 8 9]
43 training: Counter({1: 114, 3: 109, 4: 100, 7: 96, 6: 89}) testing iid: Counter({3: 1000, 6: 1000, 1: 1000, 7: 1000, 4: 1000})
44 [0 2 4 6 9] [0 2 4 6 9] [1 3 5 7 8]
44 training: Counter({9: 109, 4: 100, 2: 98, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000, 4: 1000, 2: 1000})
45 [0 5 6 7 9] [0 5 6 7 9] [1 2 3 4 8]
45 training: Counter({5: 111, 9: 109, 7: 96, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000, 5: 1000, 7: 1000})
46 [0 3 4 6 9] [0 3 4 6 9] [1 2 5 7 8]
46 training: Counter({3: 109, 9: 109, 4: 100, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 9: 1000, 4: 1000})
47 [0 3 5 7 8] [0 3 5 7 8] [1 2 4 6 9]
47 training: Counter({5: 111, 3: 109, 8: 102, 7: 96, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 5: 1000, 7: 1000})
48 [5 6 7 8 9] [5 6 7 8 9] [0 1 2 3 4]
48 training: Counter({5: 111, 9: 109, 8: 102, 7: 96, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000, 5: 1000, 7: 1000})
49 [2 4 5 6 9] [2 4 5 6 9] [0 1 3 7 8]
49 training: Counter({5: 111, 9: 109, 4: 100, 2: 98, 6: 89}) testing iid: Counter({6: 1000, 9: 1000, 5: 1000, 4: 1000, 2: 1000})
50 [0 2 6 7 8] [0 2 6 7 8] [1 3 4 5 9]
50 training: Counter({8: 102, 2: 98, 7: 96, 6: 89, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 7: 1000, 2: 1000})
51 [0 1 2 5 6] [0 1 2 5 6] [3 4 7 8 9]
51 training: Counter({1: 114, 5: 111, 2: 98, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000, 5: 1000, 2: 1000})
52 [1 2 5 8 9] [1 2 5 8 9] [0 3 4 6 7]
52 training: Counter({1: 114, 5: 111, 9: 109, 8: 102, 2: 98}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000, 5: 1000, 2: 1000})
53 [1 2 3 4 9] [1 2 3 4 9] [0 5 6 7 8]
53 training: Counter({1: 114, 3: 109, 9: 109, 4: 100, 2: 98}) testing iid: Counter({3: 1000, 1: 1000, 9: 1000, 4: 1000, 2: 1000})
54 [0 2 4 6 7] [0 2 4 6 7] [1 3 5 8 9]
54 training: Counter({4: 100, 2: 98, 7: 96, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 7: 1000, 4: 1000, 2: 1000})
55 [3 4 5 6 7] [3 4 5 6 7] [0 1 2 8 9]
55 training: Counter({5: 111, 3: 109, 4: 100, 7: 96, 6: 89}) testing iid: Counter({3: 1000, 6: 1000, 5: 1000, 7: 1000, 4: 1000})
56 [0 3 4 6 7] [0 3 4 6 7] [1 2 5 8 9]
56 training: Counter({3: 109, 4: 100, 7: 96, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 7: 1000, 4: 1000})
57 [2 5 6 7 9] [2 5 6 7 9] [0 1 3 4 8]
57 training: Counter({5: 111, 9: 109, 2: 98, 7: 96, 6: 89}) testing iid: Counter({6: 1000, 9: 1000, 5: 1000, 7: 1000, 2: 1000})
58 [2 4 6 8 9] [2 4 6 8 9] [0 1 3 5 7]
58 training: Counter({9: 109, 8: 102, 4: 100, 2: 98, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000, 4: 1000, 2: 1000})
59 [0 1 3 4 9] [0 1 3 4 9] [2 5 6 7 8]
59 training: Counter({1: 114, 3: 109, 9: 109, 4: 100, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000, 9: 1000, 4: 1000})
60 [0 2 4 5 8] [0 2 4 5 8] [1 3 6 7 9]
60 training: Counter({5: 111, 8: 102, 4: 100, 2: 98, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000, 4: 1000, 2: 1000})
61 [1 2 3 4 9] [1 2 3 4 9] [0 5 6 7 8]
61 training: Counter({1: 114, 3: 109, 9: 108, 4: 100, 2: 98}) testing iid: Counter({3: 1000, 1: 1000, 9: 1000, 4: 1000, 2: 1000})
62 [1 2 4 6 8] [1 2 4 6 8] [0 3 5 7 9]
62 training: Counter({1: 114, 8: 102, 4: 100, 2: 98, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 1: 1000, 4: 1000, 2: 1000})
63 [0 3 7 8 9] [0 3 7 8 9] [1 2 4 5 6]
63 training: Counter({3: 109, 9: 108, 8: 102, 7: 96, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 9: 1000, 7: 1000})
64 [0 2 4 5 8] [0 2 4 5 8] [1 3 6 7 9]
64 training: Counter({5: 111, 8: 102, 4: 100, 2: 98, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000, 4: 1000, 2: 1000})
65 [0 5 6 8 9] [0 5 6 8 9] [1 2 3 4 7]
65 training: Counter({5: 111, 9: 108, 8: 102, 6: 89, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 9: 1000, 5: 1000})
66 [0 3 4 6 7] [0 3 4 6 7] [1 2 5 8 9]
66 training: Counter({3: 109, 4: 100, 7: 96, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 7: 1000, 4: 1000})
67 [0 1 4 6 7] [0 1 4 6 7] [2 3 5 8 9]
67 training: Counter({1: 114, 4: 100, 7: 96, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000, 7: 1000, 4: 1000})
68 [2 4 5 6 8] [2 4 5 6 8] [0 1 3 7 9]
68 training: Counter({5: 111, 8: 102, 4: 100, 2: 98, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000, 4: 1000, 2: 1000})
69 [0 2 5 7 9] [0 2 5 7 9] [1 3 4 6 8]
69 training: Counter({5: 111, 9: 108, 2: 98, 7: 96, 0: 82}) testing iid: Counter({0: 1000, 9: 1000, 5: 1000, 7: 1000, 2: 1000})
70 [0 1 2 7 8] [0 1 2 7 8] [3 4 5 6 9]
70 training: Counter({1: 113, 8: 102, 2: 98, 7: 96, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000, 7: 1000, 2: 1000})
71 [1 4 5 6 9] [1 4 5 6 9] [0 2 3 7 8]
71 training: Counter({1: 113, 5: 111, 9: 108, 4: 100, 6: 89}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000, 5: 1000, 4: 1000})
72 [2 5 7 8 9] [2 5 7 8 9] [0 1 3 4 6]
72 training: Counter({5: 111, 9: 108, 8: 102, 2: 98, 7: 96}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000, 7: 1000, 2: 1000})
73 [0 1 3 5 8] [0 1 3 5 8] [2 4 6 7 9]
73 training: Counter({1: 113, 5: 111, 3: 109, 8: 102, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 1: 1000, 5: 1000})
74 [0 3 4 8 9] [0 3 4 8 9] [1 2 5 6 7]
74 training: Counter({3: 109, 9: 108, 8: 102, 4: 100, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 9: 1000, 4: 1000})
75 [2 3 4 5 6] [2 3 4 5 6] [0 1 7 8 9]
75 training: Counter({5: 111, 3: 108, 4: 100, 2: 98, 6: 89}) testing iid: Counter({3: 1000, 6: 1000, 5: 1000, 4: 1000, 2: 1000})
76 [0 2 4 5 6] [0 2 4 5 6] [1 3 7 8 9]
76 training: Counter({5: 111, 4: 100, 2: 98, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 5: 1000, 4: 1000, 2: 1000})
77 [0 3 5 7 8] [0 3 5 7 8] [1 2 4 6 9]
77 training: Counter({5: 111, 3: 108, 8: 102, 7: 96, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 5: 1000, 7: 1000})
78 [1 3 4 7 8] [1 3 4 7 8] [0 2 5 6 9]
78 training: Counter({1: 113, 3: 108, 8: 102, 4: 100, 7: 96}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000, 7: 1000, 4: 1000})
79 [0 2 3 6 9] [0 2 3 6 9] [1 4 5 7 8]
79 training: Counter({3: 108, 9: 108, 2: 98, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 9: 1000, 2: 1000})
80 [0 1 5 6 8] [0 1 5 6 8] [2 3 4 7 9]
80 training: Counter({1: 113, 5: 111, 8: 102, 6: 89, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 1: 1000, 5: 1000})
81 [1 5 7 8 9] [1 5 7 8 9] [0 2 3 4 6]
81 training: Counter({1: 113, 5: 111, 9: 108, 8: 102, 7: 96}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000, 5: 1000, 7: 1000})
82 [1 2 3 6 9] [1 2 3 6 9] [0 4 5 7 8]
82 training: Counter({1: 113, 3: 108, 9: 108, 2: 98, 6: 89}) testing iid: Counter({3: 1000, 6: 1000, 1: 1000, 9: 1000, 2: 1000})
83 [0 1 2 3 5] [0 1 2 3 5] [4 6 7 8 9]
83 training: Counter({1: 113, 5: 111, 3: 108, 2: 98, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000, 5: 1000, 2: 1000})
84 [0 2 4 6 7] [0 2 4 6 7] [1 3 5 8 9]
84 training: Counter({4: 100, 2: 98, 7: 96, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 7: 1000, 4: 1000, 2: 1000})
85 [4 5 6 7 8] [4 5 6 7 8] [0 1 2 3 9]
85 training: Counter({5: 111, 8: 102, 4: 100, 7: 96, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000, 7: 1000, 4: 1000})
86 [1 3 6 7 8] [1 3 6 7 8] [0 2 4 5 9]
86 training: Counter({1: 113, 3: 108, 8: 102, 7: 96, 6: 89}) testing iid: Counter({3: 1000, 8: 1000, 6: 1000, 1: 1000, 7: 1000})
87 [0 3 5 6 7] [0 3 5 6 7] [1 2 4 8 9]
87 training: Counter({5: 111, 3: 108, 7: 96, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 5: 1000, 7: 1000})
88 [2 4 6 8 9] [2 4 6 8 9] [0 1 3 5 7]
88 training: Counter({9: 108, 8: 102, 4: 100, 2: 98, 6: 89}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000, 4: 1000, 2: 1000})
89 [1 2 3 4 9] [1 2 3 4 9] [0 5 6 7 8]
89 training: Counter({1: 113, 3: 108, 9: 108, 4: 100, 2: 98}) testing iid: Counter({3: 1000, 1: 1000, 9: 1000, 4: 1000, 2: 1000})
90 [0 3 6 7 9] [0 3 6 7 9] [1 2 4 5 8]
90 training: Counter({3: 108, 9: 108, 7: 96, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 0: 1000, 6: 1000, 9: 1000, 7: 1000})
91 [0 1 3 6 8] [0 1 3 6 8] [2 4 5 7 9]
91 training: Counter({1: 113, 3: 108, 8: 102, 6: 89, 0: 82}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000, 6: 1000, 1: 1000})
92 [1 2 3 5 6] [1 2 3 5 6] [0 4 7 8 9]
92 training: Counter({1: 113, 5: 111, 3: 108, 2: 98, 6: 89}) testing iid: Counter({3: 1000, 6: 1000, 1: 1000, 5: 1000, 2: 1000})
93 [2 3 6 7 8] [2 3 6 7 8] [0 1 4 5 9]
93 training: Counter({3: 108, 8: 102, 2: 98, 7: 96, 6: 89}) testing iid: Counter({3: 1000, 8: 1000, 6: 1000, 7: 1000, 2: 1000})
94 [0 1 4 6 8] [0 1 4 6 8] [2 3 5 7 9]
94 training: Counter({1: 113, 8: 102, 4: 100, 6: 89, 0: 82}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 1: 1000, 4: 1000})
95 [0 1 2 5 7] [0 1 2 5 7] [3 4 6 8 9]
95 training: Counter({1: 113, 5: 111, 2: 98, 7: 96, 0: 82}) testing iid: Counter({0: 1000, 1: 1000, 5: 1000, 7: 1000, 2: 1000})
96 [0 1 4 6 7] [0 1 4 6 7] [2 3 5 8 9]
96 training: Counter({1: 113, 4: 100, 7: 96, 6: 89, 0: 82}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000, 7: 1000, 4: 1000})
97 [0 5 6 7 8] [0 5 6 7 8] [1 2 3 4 9]
97 training: Counter({5: 111, 8: 102, 7: 96, 6: 89, 0: 81}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000, 5: 1000, 7: 1000})
98 [2 3 4 5 8] [2 3 4 5 8] [0 1 6 7 9]
98 training: Counter({5: 111, 3: 108, 8: 102, 4: 100, 2: 98}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000, 4: 1000, 2: 1000})
99 [0 1 2 6 9] [0 1 2 6 9] [3 4 5 7 8]
99 training: Counter({1: 113, 9: 108, 2: 98, 6: 89, 0: 81}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000, 9: 1000, 2: 1000})
Num_samples of Training set per client: [520, 509, 517, 492, 510, 520, 507, 522, 507, 498, 488, 519, 515, 481, 496, 532, 485, 497, 489, 499, 489, 505, 507, 488, 466, 497, 513, 500, 498, 515, 487, 523, 500, 503, 466, 504, 487, 521, 507, 498, 493, 501, 496, 508, 478, 487, 489, 500, 507, 507, 467, 494, 534, 530, 465, 505, 476, 503, 498, 514, 493, 529, 503, 497, 493, 492, 476, 481, 500, 495, 491, 521, 515, 517, 501, 506, 480, 499, 519, 485, 497, 530, 516, 512, 465, 498, 508, 486, 497, 527, 483, 494, 519, 493, 486, 500, 480, 479, 519, 489]
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:00<01:30,  1.10it/s]  2%|▏         | 2/100 [00:01<01:24,  1.17it/s]  3%|▎         | 3/100 [00:02<01:18,  1.23it/s]  4%|▍         | 4/100 [00:03<01:15,  1.28it/s]  5%|▌         | 5/100 [00:03<01:12,  1.32it/s]  6%|▌         | 6/100 [00:04<01:09,  1.35it/s]  7%|▋         | 7/100 [00:05<01:07,  1.38it/s]  8%|▊         | 8/100 [00:05<01:06,  1.38it/s]  9%|▉         | 9/100 [00:06<01:05,  1.39it/s] 10%|█         | 10/100 [00:07<01:03,  1.41it/s] 11%|█         | 11/100 [00:07<01:02,  1.43it/s] 12%|█▏        | 12/100 [00:08<01:01,  1.42it/s] 13%|█▎        | 13/100 [00:09<01:00,  1.43it/s] 14%|█▍        | 14/100 [00:10<00:59,  1.44it/s] 15%|█▌        | 15/100 [00:10<00:58,  1.44it/s] 16%|█▌        | 16/100 [00:11<00:58,  1.44it/s] 17%|█▋        | 17/100 [00:12<00:57,  1.45it/s] 18%|█▊        | 18/100 [00:12<00:56,  1.45it/s] 19%|█▉        | 19/100 [00:13<00:55,  1.47it/s] 20%|██        | 20/100 [00:14<00:54,  1.46it/s] 21%|██        | 21/100 [00:14<00:54,  1.46it/s] 22%|██▏       | 22/100 [00:15<00:54,  1.44it/s] 23%|██▎       | 23/100 [00:16<00:53,  1.44it/s] 24%|██▍       | 24/100 [00:16<00:53,  1.43it/s] 25%|██▌       | 25/100 [00:17<00:52,  1.43it/s] 26%|██▌       | 26/100 [00:18<00:52,  1.41it/s] 27%|██▋       | 27/100 [00:19<00:52,  1.40it/s] 28%|██▊       | 28/100 [00:19<00:51,  1.39it/s] 29%|██▉       | 29/100 [00:20<00:50,  1.40it/s] 30%|███       | 30/100 [00:21<00:50,  1.40it/s] 31%|███       | 31/100 [00:25<02:01,  1.77s/it] 32%|███▏      | 32/100 [00:26<01:38,  1.45s/it] 33%|███▎      | 33/100 [00:26<01:22,  1.22s/it] 34%|███▍      | 34/100 [00:27<01:10,  1.07s/it] 35%|███▌      | 35/100 [00:28<01:01,  1.05it/s] 36%|███▌      | 36/100 [00:28<00:56,  1.14it/s] 37%|███▋      | 37/100 [00:29<00:52,  1.21it/s] 38%|███▊      | 38/100 [00:30<00:48,  1.27it/s] 39%|███▉      | 39/100 [00:31<00:46,  1.32it/s] 40%|████      | 40/100 [00:31<00:44,  1.35it/s] 41%|████      | 41/100 [00:32<00:43,  1.36it/s] 42%|████▏     | 42/100 [00:33<00:42,  1.37it/s] 43%|████▎     | 43/100 [00:33<00:41,  1.38it/s] 44%|████▍     | 44/100 [00:34<00:39,  1.41it/s] 45%|████▌     | 45/100 [00:35<00:38,  1.42it/s] 46%|████▌     | 46/100 [00:35<00:38,  1.42it/s] 47%|████▋     | 47/100 [00:36<00:37,  1.42it/s] 48%|████▊     | 48/100 [00:37<00:36,  1.42it/s] 49%|████▉     | 49/100 [00:38<00:36,  1.40it/s] 50%|█████     | 50/100 [00:38<00:35,  1.42it/s] 51%|█████     | 51/100 [00:39<00:34,  1.42it/s] 52%|█████▏    | 52/100 [00:40<00:33,  1.44it/s] 53%|█████▎    | 53/100 [00:40<00:32,  1.43it/s] 54%|█████▍    | 54/100 [00:41<00:32,  1.42it/s] 55%|█████▌    | 55/100 [00:42<00:31,  1.41it/s] 56%|█████▌    | 56/100 [00:43<00:30,  1.42it/s] 57%|█████▋    | 57/100 [00:43<00:30,  1.42it/s] 58%|█████▊    | 58/100 [00:44<00:29,  1.41it/s] 59%|█████▉    | 59/100 [00:45<00:29,  1.40it/s] 60%|██████    | 60/100 [00:45<00:28,  1.39it/s] 61%|██████    | 61/100 [00:46<00:27,  1.39it/s] 62%|██████▏   | 62/100 [00:47<00:27,  1.39it/s] 63%|██████▎   | 63/100 [00:51<01:03,  1.71s/it] 64%|██████▍   | 64/100 [00:52<00:50,  1.41s/it] 65%|██████▌   | 65/100 [00:52<00:41,  1.20s/it] 66%|██████▌   | 66/100 [00:53<00:35,  1.05s/it] 67%|██████▋   | 67/100 [00:54<00:31,  1.05it/s] 68%|██████▊   | 68/100 [00:54<00:27,  1.15it/s] 69%|██████▉   | 69/100 [00:55<00:25,  1.22it/s] 70%|███████   | 70/100 [00:56<00:23,  1.29it/s] 71%|███████   | 71/100 [00:56<00:21,  1.33it/s] 72%|███████▏  | 72/100 [00:57<00:20,  1.37it/s] 73%|███████▎  | 73/100 [00:58<00:19,  1.39it/s] 74%|███████▍  | 74/100 [00:59<00:18,  1.41it/s] 75%|███████▌  | 75/100 [00:59<00:17,  1.41it/s] 76%|███████▌  | 76/100 [01:00<00:16,  1.43it/s] 77%|███████▋  | 77/100 [01:01<00:15,  1.44it/s] 78%|███████▊  | 78/100 [01:01<00:15,  1.44it/s] 79%|███████▉  | 79/100 [01:02<00:14,  1.44it/s] 80%|████████  | 80/100 [01:03<00:13,  1.45it/s] 81%|████████  | 81/100 [01:03<00:13,  1.45it/s] 82%|████████▏ | 82/100 [01:04<00:12,  1.48it/s] 83%|████████▎ | 83/100 [01:05<00:11,  1.47it/s] 84%|████████▍ | 84/100 [01:05<00:10,  1.48it/s] 85%|████████▌ | 85/100 [01:06<00:10,  1.47it/s] 86%|████████▌ | 86/100 [01:07<00:09,  1.46it/s] 87%|████████▋ | 87/100 [01:07<00:08,  1.45it/s] 88%|████████▊ | 88/100 [01:08<00:08,  1.46it/s] 89%|████████▉ | 89/100 [01:09<00:07,  1.46it/s] 90%|█████████ | 90/100 [01:09<00:06,  1.46it/s] 91%|█████████ | 91/100 [01:10<00:06,  1.45it/s] 92%|█████████▏| 92/100 [01:11<00:05,  1.45it/s] 93%|█████████▎| 93/100 [01:12<00:04,  1.46it/s] 94%|█████████▍| 94/100 [01:12<00:04,  1.46it/s] 95%|█████████▌| 95/100 [01:13<00:03,  1.45it/s] 96%|█████████▌| 96/100 [01:14<00:02,  1.45it/s] 97%|█████████▋| 97/100 [01:18<00:04,  1.65s/it] 98%|█████████▊| 98/100 [01:18<00:02,  1.36s/it] 99%|█████████▉| 99/100 [01:19<00:01,  1.16s/it]100%|██████████| 100/100 [01:20<00:00,  1.00s/it]100%|██████████| 100/100 [01:20<00:00,  1.25it/s]
Number of users per round / total users: 10  /  100
Finished creating FL server.
=== Training starts: algorithm FedFea ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2501
Local adapation with distilling: 0.001
training loss: tensor(3.3490) feature loss: tensor(0.3638)
Local adapation with distilling: 0.001
training loss: tensor(3.2397) feature loss: tensor(0.3265)
Local adapation with distilling: 0.001
training loss: tensor(3.3633) feature loss: tensor(0.3332)
Local adapation with distilling: 0.001
training loss: tensor(3.2557) feature loss: tensor(0.3493)
Local adapation with distilling: 0.001
training loss: tensor(3.3253) feature loss: tensor(0.3558)
Local adapation with distilling: 0.001
training loss: tensor(3.2188) feature loss: tensor(0.3168)
Local adapation with distilling: 0.001
training loss: tensor(3.2126) feature loss: tensor(0.3084)
Local adapation with distilling: 0.001
training loss: tensor(3.2680) feature loss: tensor(0.3231)
Local adapation with distilling: 0.001
training loss: tensor(3.3472) feature loss: tensor(0.3293)
Local adapation with distilling: 0.001
training loss: tensor(3.1641) feature loss: tensor(0.3169)
Global Model Acc on global data: 0.1108 length of data: 10000
save a model
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2484
Local adapation with distilling: 0.000982
training loss: tensor(2.7003) feature loss: tensor(0.5715)
Local adapation with distilling: 0.000982
training loss: tensor(2.8126) feature loss: tensor(0.4809)
Local adapation with distilling: 0.000982
training loss: tensor(2.7649) feature loss: tensor(0.4760)
Local adapation with distilling: 0.000982
training loss: tensor(2.6944) feature loss: tensor(0.5506)
Local adapation with distilling: 0.000982
training loss: tensor(2.5868) feature loss: tensor(0.5306)
Local adapation with distilling: 0.000982
training loss: tensor(2.6457) feature loss: tensor(0.5263)
Local adapation with distilling: 0.000982
training loss: tensor(2.7052) feature loss: tensor(0.5203)
Local adapation with distilling: 0.000982
training loss: tensor(2.7383) feature loss: tensor(0.5294)
Local adapation with distilling: 0.000982
training loss: tensor(2.6442) feature loss: tensor(0.5370)
Local adapation with distilling: 0.000982
training loss: tensor(2.6771) feature loss: tensor(0.5503)
Global Model Acc on global data: 0.2159 length of data: 10000
save a model
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
all data: 2485
Local adapation with distilling: 0.000964
training loss: tensor(2.1244) feature loss: tensor(0.4935)
Local adapation with distilling: 0.000964
training loss: tensor(2.2126) feature loss: tensor(0.5642)
Local adapation with distilling: 0.000964
training loss: tensor(2.3101) feature loss: tensor(0.5854)
Local adapation with distilling: 0.000964
training loss: tensor(2.2847) feature loss: tensor(0.4931)
Local adapation with distilling: 0.000964
training loss: tensor(2.2288) feature loss: tensor(0.5219)
Local adapation with distilling: 0.000964
training loss: tensor(2.2484) feature loss: tensor(0.5521)
Local adapation with distilling: 0.000964
training loss: tensor(2.3038) feature loss: tensor(0.5527)
Local adapation with distilling: 0.000964
training loss: tensor(2.2204) feature loss: tensor(0.5851)
Local adapation with distilling: 0.000964
training loss: tensor(2.1859) feature loss: tensor(0.5647)
Local adapation with distilling: 0.000964
training loss: tensor(2.2135) feature loss: tensor(0.5173)
Global Model Acc on global data: 0.2927 length of data: 10000
save a model
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
all data: 2534
Local adapation with distilling: 0.000946
training loss: tensor(1.8178) feature loss: tensor(0.4400)
Local adapation with distilling: 0.000946
training loss: tensor(1.8441) feature loss: tensor(0.4521)
Local adapation with distilling: 0.000946
training loss: tensor(1.8555) feature loss: tensor(0.4463)
Local adapation with distilling: 0.000946
training loss: tensor(1.8496) feature loss: tensor(0.4359)
Local adapation with distilling: 0.000946
training loss: tensor(1.8285) feature loss: tensor(0.4708)
Local adapation with distilling: 0.000946
training loss: tensor(1.6706) feature loss: tensor(0.4520)
Local adapation with distilling: 0.000946
training loss: tensor(1.8707) feature loss: tensor(0.4343)
Local adapation with distilling: 0.000946
training loss: tensor(1.8355) feature loss: tensor(0.4280)
Local adapation with distilling: 0.000946
training loss: tensor(1.7856) feature loss: tensor(0.4674)
Local adapation with distilling: 0.000946
training loss: tensor(1.7593) feature loss: tensor(0.4626)
Global Model Acc on global data: 0.3634 length of data: 10000
save a model
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2455
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5660) feature loss: tensor(0.4370)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.6179) feature loss: tensor(0.4771)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5021) feature loss: tensor(0.4403)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5629) feature loss: tensor(0.4478)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.6424) feature loss: tensor(0.4707)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.6653) feature loss: tensor(0.4848)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.6527) feature loss: tensor(0.4475)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5513) feature loss: tensor(0.4645)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5196) feature loss: tensor(0.4528)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5927) feature loss: tensor(0.4701)
Global Model Acc on global data: 0.3872 length of data: 10000
save a model
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
all data: 2463
Local adapation with distilling: 0.00091
training loss: tensor(1.4401) feature loss: tensor(0.4575)
Local adapation with distilling: 0.00091
training loss: tensor(1.5063) feature loss: tensor(0.4270)
Local adapation with distilling: 0.00091
training loss: tensor(1.3829) feature loss: tensor(0.4021)
Local adapation with distilling: 0.00091
training loss: tensor(1.3957) feature loss: tensor(0.4133)
Local adapation with distilling: 0.00091
training loss: tensor(1.3632) feature loss: tensor(0.4133)
Local adapation with distilling: 0.00091
training loss: tensor(1.4325) feature loss: tensor(0.4322)
Local adapation with distilling: 0.00091
training loss: tensor(1.3300) feature loss: tensor(0.3871)
Local adapation with distilling: 0.00091
training loss: tensor(1.3376) feature loss: tensor(0.3830)
Local adapation with distilling: 0.00091
training loss: tensor(1.4112) feature loss: tensor(0.4093)
Local adapation with distilling: 0.00091
training loss: tensor(1.4444) feature loss: tensor(0.4054)
Global Model Acc on global data: 0.4187 length of data: 10000
save a model
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
all data: 2482
Local adapation with distilling: 0.000892
training loss: tensor(1.2287) feature loss: tensor(0.4355)
Local adapation with distilling: 0.000892
training loss: tensor(1.4170) feature loss: tensor(0.4390)
Local adapation with distilling: 0.000892
training loss: tensor(1.4711) feature loss: tensor(0.4510)
Local adapation with distilling: 0.000892
training loss: tensor(1.2787) feature loss: tensor(0.4493)
Local adapation with distilling: 0.000892
training loss: tensor(1.3114) feature loss: tensor(0.4088)
Local adapation with distilling: 0.000892
training loss: tensor(1.3617) feature loss: tensor(0.4264)
Local adapation with distilling: 0.000892
training loss: tensor(1.2427) feature loss: tensor(0.4270)
Local adapation with distilling: 0.000892
training loss: tensor(1.2747) feature loss: tensor(0.4290)
Local adapation with distilling: 0.000892
training loss: tensor(1.2961) feature loss: tensor(0.4242)
Local adapation with distilling: 0.000892
training loss: tensor(1.3727) feature loss: tensor(0.4376)
Global Model Acc on global data: 0.4574 length of data: 10000
save a model
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2554
Local adapation with distilling: 0.000874
training loss: tensor(1.2944) feature loss: tensor(0.4723)
Local adapation with distilling: 0.000874
training loss: tensor(1.7571) feature loss: tensor(0.4573)
Local adapation with distilling: 0.000874
training loss: tensor(1.2638) feature loss: tensor(0.4468)
Local adapation with distilling: 0.000874
training loss: tensor(1.2498) feature loss: tensor(0.4701)
Local adapation with distilling: 0.000874
training loss: tensor(1.3056) feature loss: tensor(0.4333)
Local adapation with distilling: 0.000874
training loss: tensor(1.2202) feature loss: tensor(0.4708)
Local adapation with distilling: 0.000874
training loss: tensor(1.2316) feature loss: tensor(0.4726)
Local adapation with distilling: 0.000874
training loss: tensor(1.3022) feature loss: tensor(0.4414)
Local adapation with distilling: 0.000874
training loss: tensor(1.1884) feature loss: tensor(0.4874)
Local adapation with distilling: 0.000874
training loss: tensor(1.2794) feature loss: tensor(0.4805)
Global Model Acc on global data: 0.4746 length of data: 10000
save a model
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
all data: 2494
Local adapation with distilling: 0.000856
training loss: tensor(1.1275) feature loss: tensor(0.4364)
Local adapation with distilling: 0.000856
training loss: tensor(1.1797) feature loss: tensor(0.4541)
Local adapation with distilling: 0.000856
training loss: tensor(1.1905) feature loss: tensor(0.4678)
Local adapation with distilling: 0.000856
training loss: tensor(1.1785) feature loss: tensor(0.4589)
Local adapation with distilling: 0.000856
training loss: tensor(1.2501) feature loss: tensor(0.4884)
Local adapation with distilling: 0.000856
training loss: tensor(1.2163) feature loss: tensor(0.4439)
Local adapation with distilling: 0.000856
training loss: tensor(1.0383) feature loss: tensor(0.4023)
Local adapation with distilling: 0.000856
training loss: tensor(1.4156) feature loss: tensor(0.4463)
Local adapation with distilling: 0.000856
training loss: tensor(1.1382) feature loss: tensor(0.4297)
Local adapation with distilling: 0.000856
training loss: tensor(1.1939) feature loss: tensor(0.4695)
Global Model Acc on global data: 0.4963 length of data: 10000
save a model
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
all data: 2481
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1935) feature loss: tensor(0.3845)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1123) feature loss: tensor(0.3881)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0639) feature loss: tensor(0.3672)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1174) feature loss: tensor(0.3713)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1424) feature loss: tensor(0.4254)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1577) feature loss: tensor(0.4060)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0558) feature loss: tensor(0.3948)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0843) feature loss: tensor(0.3885)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1532) feature loss: tensor(0.4097)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.2434) feature loss: tensor(0.4277)
Global Model Acc on global data: 0.5056 length of data: 10000
save a model
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2490
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0767) feature loss: tensor(0.4172)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0614) feature loss: tensor(0.4103)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0586) feature loss: tensor(0.3934)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0714) feature loss: tensor(0.3940)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0611) feature loss: tensor(0.4118)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0222) feature loss: tensor(0.3990)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0634) feature loss: tensor(0.4163)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0853) feature loss: tensor(0.4188)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.1015) feature loss: tensor(0.4102)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0277) feature loss: tensor(0.3738)
Global Model Acc on global data: 0.5253 length of data: 10000
save a model
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
all data: 2506
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9117) feature loss: tensor(0.3468)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0134) feature loss: tensor(0.4208)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9282) feature loss: tensor(0.3585)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9933) feature loss: tensor(0.4105)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9236) feature loss: tensor(0.3703)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.1030) feature loss: tensor(0.3603)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9665) feature loss: tensor(0.3851)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0632) feature loss: tensor(0.4057)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0431) feature loss: tensor(0.3926)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9840) feature loss: tensor(0.3960)
Global Model Acc on global data: 0.5533 length of data: 10000
save a model
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2543
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8515) feature loss: tensor(0.3481)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7943) feature loss: tensor(0.3687)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9375) feature loss: tensor(0.3673)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8670) feature loss: tensor(0.3488)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8540) feature loss: tensor(0.3548)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9669) feature loss: tensor(0.3927)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9322) feature loss: tensor(0.3517)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8844) feature loss: tensor(0.3673)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9093) feature loss: tensor(0.3673)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9178) feature loss: tensor(0.3555)
Global Model Acc on global data: 0.5573 length of data: 10000
save a model
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
all data: 2548
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9131) feature loss: tensor(0.3498)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8580) feature loss: tensor(0.3611)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8834) feature loss: tensor(0.3827)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8442) feature loss: tensor(0.3550)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9084) feature loss: tensor(0.3937)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9242) feature loss: tensor(0.3610)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8805) feature loss: tensor(0.3492)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8747) feature loss: tensor(0.3542)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9570) feature loss: tensor(0.3778)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9384) feature loss: tensor(0.3950)
Global Model Acc on global data: 0.5661 length of data: 10000
save a model
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2467
Local adapation with distilling: 0.000748
training loss: tensor(0.9850) feature loss: tensor(0.3749)
Local adapation with distilling: 0.000748
training loss: tensor(0.9436) feature loss: tensor(0.3822)
Local adapation with distilling: 0.000748
training loss: tensor(0.9465) feature loss: tensor(0.3571)
Local adapation with distilling: 0.000748
training loss: tensor(0.8722) feature loss: tensor(0.3525)
Local adapation with distilling: 0.000748
training loss: tensor(0.9625) feature loss: tensor(0.3724)
Local adapation with distilling: 0.000748
training loss: tensor(0.9244) feature loss: tensor(0.3500)
Local adapation with distilling: 0.000748
training loss: tensor(1.0677) feature loss: tensor(0.3768)
Local adapation with distilling: 0.000748
training loss: tensor(0.9886) feature loss: tensor(0.3704)
Local adapation with distilling: 0.000748
training loss: tensor(0.9236) feature loss: tensor(0.3706)
Local adapation with distilling: 0.000748
training loss: tensor(0.9458) feature loss: tensor(0.3802)
Global Model Acc on global data: 0.5768 length of data: 10000
save a model
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
all data: 2486
Local adapation with distilling: 0.00073
training loss: tensor(0.8893) feature loss: tensor(0.3365)
Local adapation with distilling: 0.00073
training loss: tensor(0.8533) feature loss: tensor(0.3538)
Local adapation with distilling: 0.00073
training loss: tensor(0.8162) feature loss: tensor(0.3650)
Local adapation with distilling: 0.00073
training loss: tensor(0.8191) feature loss: tensor(0.3429)
Local adapation with distilling: 0.00073
training loss: tensor(0.7805) feature loss: tensor(0.3363)
Local adapation with distilling: 0.00073
training loss: tensor(0.9025) feature loss: tensor(0.3490)
Local adapation with distilling: 0.00073
training loss: tensor(0.8277) feature loss: tensor(0.3675)
Local adapation with distilling: 0.00073
training loss: tensor(0.7442) feature loss: tensor(0.3453)
Local adapation with distilling: 0.00073
training loss: tensor(0.8923) feature loss: tensor(0.3528)
Local adapation with distilling: 0.00073
training loss: tensor(1.0854) feature loss: tensor(0.3341)
Global Model Acc on global data: 0.5864 length of data: 10000
save a model
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
all data: 2502
Local adapation with distilling: 0.000712
training loss: tensor(0.9251) feature loss: tensor(0.3961)
Local adapation with distilling: 0.000712
training loss: tensor(0.8492) feature loss: tensor(0.3828)
Local adapation with distilling: 0.000712
training loss: tensor(0.8828) feature loss: tensor(0.3703)
Local adapation with distilling: 0.000712
training loss: tensor(0.8630) feature loss: tensor(0.3580)
Local adapation with distilling: 0.000712
training loss: tensor(0.9059) feature loss: tensor(0.4119)
Local adapation with distilling: 0.000712
training loss: tensor(1.0850) feature loss: tensor(0.3559)
Local adapation with distilling: 0.000712
training loss: tensor(0.9078) feature loss: tensor(0.3502)
Local adapation with distilling: 0.000712
training loss: tensor(0.8735) feature loss: tensor(0.3411)
Local adapation with distilling: 0.000712
training loss: tensor(0.8927) feature loss: tensor(0.3774)
Local adapation with distilling: 0.000712
training loss: tensor(0.8159) feature loss: tensor(0.3273)
Global Model Acc on global data: 0.591 length of data: 10000
save a model
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
all data: 2516
Local adapation with distilling: 0.000694
training loss: tensor(0.7645) feature loss: tensor(0.3274)
Local adapation with distilling: 0.000694
training loss: tensor(0.7901) feature loss: tensor(0.3558)
Local adapation with distilling: 0.000694
training loss: tensor(0.7061) feature loss: tensor(0.3261)
Local adapation with distilling: 0.000694
training loss: tensor(0.7870) feature loss: tensor(0.3680)
Local adapation with distilling: 0.000694
training loss: tensor(0.8603) feature loss: tensor(0.3556)
Local adapation with distilling: 0.000694
training loss: tensor(0.8481) feature loss: tensor(0.3485)
Local adapation with distilling: 0.000694
training loss: tensor(0.7843) feature loss: tensor(0.3280)
Local adapation with distilling: 0.000694
training loss: tensor(0.8236) feature loss: tensor(0.3791)
Local adapation with distilling: 0.000694
training loss: tensor(0.7508) feature loss: tensor(0.3381)
Local adapation with distilling: 0.000694
training loss: tensor(0.7521) feature loss: tensor(0.3332)
Global Model Acc on global data: 0.5936 length of data: 10000
save a model
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
all data: 2508
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8168) feature loss: tensor(0.3784)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8057) feature loss: tensor(0.3946)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7692) feature loss: tensor(0.3662)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8564) feature loss: tensor(0.3562)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8204) feature loss: tensor(0.3569)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8575) feature loss: tensor(0.3691)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9336) feature loss: tensor(0.3386)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0163) feature loss: tensor(0.3448)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7952) feature loss: tensor(0.3636)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7766) feature loss: tensor(0.3351)
Global Model Acc on global data: 0.6012 length of data: 10000
save a model
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
all data: 2539
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8542) feature loss: tensor(0.3233)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9940) feature loss: tensor(0.3285)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8669) feature loss: tensor(0.3170)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8943) feature loss: tensor(0.3261)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9074) feature loss: tensor(0.3324)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8698) feature loss: tensor(0.3250)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8841) feature loss: tensor(0.3283)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8740) feature loss: tensor(0.3342)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8232) feature loss: tensor(0.3404)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8669) feature loss: tensor(0.3233)
Global Model Acc on global data: 0.6052 length of data: 10000
save a model
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2496
Local adapation with distilling: 0.00064
training loss: tensor(0.6984) feature loss: tensor(0.2975)
Local adapation with distilling: 0.00064
training loss: tensor(0.7159) feature loss: tensor(0.2840)
Local adapation with distilling: 0.00064
training loss: tensor(0.7219) feature loss: tensor(0.2974)
Local adapation with distilling: 0.00064
training loss: tensor(0.6643) feature loss: tensor(0.2874)
Local adapation with distilling: 0.00064
training loss: tensor(0.7613) feature loss: tensor(0.3244)
Local adapation with distilling: 0.00064
training loss: tensor(0.6641) feature loss: tensor(0.3027)
Local adapation with distilling: 0.00064
training loss: tensor(0.7601) feature loss: tensor(0.2955)
Local adapation with distilling: 0.00064
training loss: tensor(0.7301) feature loss: tensor(0.3379)
Local adapation with distilling: 0.00064
training loss: tensor(0.7155) feature loss: tensor(0.2941)
Local adapation with distilling: 0.00064
training loss: tensor(0.7303) feature loss: tensor(0.3195)
Global Model Acc on global data: 0.6006 length of data: 10000
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2500
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8026) feature loss: tensor(0.3327)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7195) feature loss: tensor(0.2962)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6663) feature loss: tensor(0.3045)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7453) feature loss: tensor(0.3174)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7077) feature loss: tensor(0.3123)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6821) feature loss: tensor(0.3228)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6719) feature loss: tensor(0.3196)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6986) feature loss: tensor(0.3131)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6901) feature loss: tensor(0.3469)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7350) feature loss: tensor(0.3483)
Global Model Acc on global data: 0.6216 length of data: 10000
save a model
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
all data: 2531
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6110) feature loss: tensor(0.2614)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6086) feature loss: tensor(0.2681)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.9564) feature loss: tensor(0.2736)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.5499) feature loss: tensor(0.2617)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6047) feature loss: tensor(0.2610)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7979) feature loss: tensor(0.2863)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6872) feature loss: tensor(0.2730)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.5785) feature loss: tensor(0.2726)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7012) feature loss: tensor(0.2771)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.5552) feature loss: tensor(0.2553)
Global Model Acc on global data: 0.6252 length of data: 10000
save a model
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
all data: 2511
Local adapation with distilling: 0.000586
training loss: tensor(1.3331) feature loss: tensor(0.2982)
Local adapation with distilling: 0.000586
training loss: tensor(0.7538) feature loss: tensor(0.2821)
Local adapation with distilling: 0.000586
training loss: tensor(0.7303) feature loss: tensor(0.2839)
Local adapation with distilling: 0.000586
training loss: tensor(0.7191) feature loss: tensor(0.2789)
Local adapation with distilling: 0.000586
training loss: tensor(0.7705) feature loss: tensor(0.3071)
Local adapation with distilling: 0.000586
training loss: tensor(0.5902) feature loss: tensor(0.2775)
Local adapation with distilling: 0.000586
training loss: tensor(0.7094) feature loss: tensor(0.2943)
Local adapation with distilling: 0.000586
training loss: tensor(0.7394) feature loss: tensor(0.3024)
Local adapation with distilling: 0.000586
training loss: tensor(0.7040) feature loss: tensor(0.2695)
Local adapation with distilling: 0.000586
training loss: tensor(0.7071) feature loss: tensor(0.2882)
Global Model Acc on global data: 0.6283 length of data: 10000
save a model
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
all data: 2520
Local adapation with distilling: 0.000568
training loss: tensor(1.0758) feature loss: tensor(0.2602)
Local adapation with distilling: 0.000568
training loss: tensor(0.5218) feature loss: tensor(0.2648)
Local adapation with distilling: 0.000568
training loss: tensor(0.5166) feature loss: tensor(0.2620)
Local adapation with distilling: 0.000568
training loss: tensor(0.5900) feature loss: tensor(0.2670)
Local adapation with distilling: 0.000568
training loss: tensor(0.6432) feature loss: tensor(0.2680)
Local adapation with distilling: 0.000568
training loss: tensor(0.6064) feature loss: tensor(0.2696)
Local adapation with distilling: 0.000568
training loss: tensor(0.5950) feature loss: tensor(0.2807)
Local adapation with distilling: 0.000568
training loss: tensor(0.5634) feature loss: tensor(0.2809)
Local adapation with distilling: 0.000568
training loss: tensor(0.5945) feature loss: tensor(0.2690)
Local adapation with distilling: 0.000568
training loss: tensor(0.6067) feature loss: tensor(0.2705)
Global Model Acc on global data: 0.622 length of data: 10000
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2523
Local adapation with distilling: 0.00055
training loss: tensor(0.7123) feature loss: tensor(0.3212)
Local adapation with distilling: 0.00055
training loss: tensor(0.7952) feature loss: tensor(0.2861)
Local adapation with distilling: 0.00055
training loss: tensor(0.7272) feature loss: tensor(0.2937)
Local adapation with distilling: 0.00055
training loss: tensor(0.7177) feature loss: tensor(0.2886)
Local adapation with distilling: 0.00055
training loss: tensor(0.7341) feature loss: tensor(0.2789)
Local adapation with distilling: 0.00055
training loss: tensor(0.7652) feature loss: tensor(0.3269)
Local adapation with distilling: 0.00055
training loss: tensor(0.7223) feature loss: tensor(0.3285)
Local adapation with distilling: 0.00055
training loss: tensor(0.7646) feature loss: tensor(0.3043)
Local adapation with distilling: 0.00055
training loss: tensor(0.7041) feature loss: tensor(0.2843)
Local adapation with distilling: 0.00055
training loss: tensor(0.7435) feature loss: tensor(0.2915)
Global Model Acc on global data: 0.6345 length of data: 10000
save a model
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
all data: 2484
Local adapation with distilling: 0.000532
training loss: tensor(0.7059) feature loss: tensor(0.2741)
Local adapation with distilling: 0.000532
training loss: tensor(0.7680) feature loss: tensor(0.3174)
Local adapation with distilling: 0.000532
training loss: tensor(0.7870) feature loss: tensor(0.3235)
Local adapation with distilling: 0.000532
training loss: tensor(0.6417) feature loss: tensor(0.3169)
Local adapation with distilling: 0.000532
training loss: tensor(0.7020) feature loss: tensor(0.2894)
Local adapation with distilling: 0.000532
training loss: tensor(0.7571) feature loss: tensor(0.3009)
Local adapation with distilling: 0.000532
training loss: tensor(0.7078) feature loss: tensor(0.2935)
Local adapation with distilling: 0.000532
training loss: tensor(0.7565) feature loss: tensor(0.3239)
Local adapation with distilling: 0.000532
training loss: tensor(0.6621) feature loss: tensor(0.3137)
Local adapation with distilling: 0.000532
training loss: tensor(0.6999) feature loss: tensor(0.2884)
Global Model Acc on global data: 0.6378 length of data: 10000
save a model
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
all data: 2487
Local adapation with distilling: 0.000514
training loss: tensor(0.6053) feature loss: tensor(0.2469)
Local adapation with distilling: 0.000514
training loss: tensor(0.6350) feature loss: tensor(0.2528)
Local adapation with distilling: 0.000514
training loss: tensor(0.6260) feature loss: tensor(0.2582)
Local adapation with distilling: 0.000514
training loss: tensor(0.6480) feature loss: tensor(0.2554)
Local adapation with distilling: 0.000514
training loss: tensor(0.6599) feature loss: tensor(0.2573)
Local adapation with distilling: 0.000514
training loss: tensor(0.5925) feature loss: tensor(0.2557)
Local adapation with distilling: 0.000514
training loss: tensor(0.6496) feature loss: tensor(0.2547)
Local adapation with distilling: 0.000514
training loss: tensor(0.5827) feature loss: tensor(0.2447)
Local adapation with distilling: 0.000514
training loss: tensor(0.6457) feature loss: tensor(0.2533)
Local adapation with distilling: 0.000514
training loss: tensor(0.6190) feature loss: tensor(0.2677)
Global Model Acc on global data: 0.6374 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2489
Local adapation with distilling: 0.000496
training loss: tensor(0.6149) feature loss: tensor(0.2464)
Local adapation with distilling: 0.000496
training loss: tensor(0.5823) feature loss: tensor(0.2600)
Local adapation with distilling: 0.000496
training loss: tensor(0.6547) feature loss: tensor(0.2385)
Local adapation with distilling: 0.000496
training loss: tensor(0.5614) feature loss: tensor(0.2385)
Local adapation with distilling: 0.000496
training loss: tensor(0.6723) feature loss: tensor(0.2630)
Local adapation with distilling: 0.000496
training loss: tensor(0.6267) feature loss: tensor(0.2475)
Local adapation with distilling: 0.000496
training loss: tensor(0.5799) feature loss: tensor(0.2436)
Local adapation with distilling: 0.000496
training loss: tensor(0.6337) feature loss: tensor(0.2630)
Local adapation with distilling: 0.000496
training loss: tensor(0.6271) feature loss: tensor(0.2627)
Local adapation with distilling: 0.000496
training loss: tensor(0.5400) feature loss: tensor(0.2582)
Global Model Acc on global data: 0.6412 length of data: 10000
save a model
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
all data: 2542
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7558) feature loss: tensor(0.2582)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6393) feature loss: tensor(0.2465)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6769) feature loss: tensor(0.2763)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6825) feature loss: tensor(0.2742)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6762) feature loss: tensor(0.2670)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6357) feature loss: tensor(0.2676)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6995) feature loss: tensor(0.2713)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6227) feature loss: tensor(0.2598)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6371) feature loss: tensor(0.2467)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7125) feature loss: tensor(0.2678)
Global Model Acc on global data: 0.6415 length of data: 10000
save a model
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
all data: 2505
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5105) feature loss: tensor(0.2228)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4980) feature loss: tensor(0.2255)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5404) feature loss: tensor(0.2558)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5142) feature loss: tensor(0.2531)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4731) feature loss: tensor(0.2250)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4918) feature loss: tensor(0.2301)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5495) feature loss: tensor(0.2403)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5243) feature loss: tensor(0.2344)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5303) feature loss: tensor(0.2315)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4912) feature loss: tensor(0.2412)
Global Model Acc on global data: 0.6536 length of data: 10000
save a model
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
all data: 2482
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5466) feature loss: tensor(0.2392)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.4979) feature loss: tensor(0.2509)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5715) feature loss: tensor(0.2435)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5564) feature loss: tensor(0.2632)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5819) feature loss: tensor(0.2496)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5306) feature loss: tensor(0.2441)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.4726) feature loss: tensor(0.2287)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.4706) feature loss: tensor(0.2389)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5793) feature loss: tensor(0.2492)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5064) feature loss: tensor(0.2476)
Global Model Acc on global data: 0.645 length of data: 10000
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
all data: 2471
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6120) feature loss: tensor(0.2512)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6847) feature loss: tensor(0.2489)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5602) feature loss: tensor(0.2493)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6233) feature loss: tensor(0.2483)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6397) feature loss: tensor(0.2459)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5470) feature loss: tensor(0.2425)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5684) feature loss: tensor(0.2501)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6522) feature loss: tensor(0.2419)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6177) feature loss: tensor(0.2432)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6482) feature loss: tensor(0.2482)
Global Model Acc on global data: 0.6415 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
all data: 2514
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5939) feature loss: tensor(0.2500)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6480) feature loss: tensor(0.2792)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5746) feature loss: tensor(0.2774)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8454) feature loss: tensor(0.2729)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6043) feature loss: tensor(0.2481)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5644) feature loss: tensor(0.2543)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6188) feature loss: tensor(0.2668)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6235) feature loss: tensor(0.2874)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6769) feature loss: tensor(0.2883)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5680) feature loss: tensor(0.2596)
Global Model Acc on global data: 0.6512 length of data: 10000
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
all data: 2515
Local adapation with distilling: 0.000388
training loss: tensor(0.5089) feature loss: tensor(0.2190)
Local adapation with distilling: 0.000388
training loss: tensor(0.5150) feature loss: tensor(0.2198)
Local adapation with distilling: 0.000388
training loss: tensor(0.5666) feature loss: tensor(0.2323)
Local adapation with distilling: 0.000388
training loss: tensor(0.5901) feature loss: tensor(0.2071)
Local adapation with distilling: 0.000388
training loss: tensor(0.6378) feature loss: tensor(0.2306)
Local adapation with distilling: 0.000388
training loss: tensor(0.7306) feature loss: tensor(0.2245)
Local adapation with distilling: 0.000388
training loss: tensor(0.5193) feature loss: tensor(0.2128)
Local adapation with distilling: 0.000388
training loss: tensor(0.5489) feature loss: tensor(0.2361)
Local adapation with distilling: 0.000388
training loss: tensor(0.5598) feature loss: tensor(0.2346)
Local adapation with distilling: 0.000388
training loss: tensor(0.5949) feature loss: tensor(0.2168)
Global Model Acc on global data: 0.6583 length of data: 10000
save a model
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
all data: 2497
Local adapation with distilling: 0.00037
training loss: tensor(0.5527) feature loss: tensor(0.2456)
Local adapation with distilling: 0.00037
training loss: tensor(0.5979) feature loss: tensor(0.3186)
Local adapation with distilling: 0.00037
training loss: tensor(0.8250) feature loss: tensor(0.3475)
Local adapation with distilling: 0.00037
training loss: tensor(0.5535) feature loss: tensor(0.2234)
Local adapation with distilling: 0.00037
training loss: tensor(0.7002) feature loss: tensor(0.3162)
Local adapation with distilling: 0.00037
training loss: tensor(0.7152) feature loss: tensor(0.3129)
Local adapation with distilling: 0.00037
training loss: tensor(0.7431) feature loss: tensor(0.4391)
Local adapation with distilling: 0.00037
training loss: tensor(0.7538) feature loss: tensor(0.2647)
Local adapation with distilling: 0.00037
training loss: tensor(0.8052) feature loss: tensor(0.4492)
Local adapation with distilling: 0.00037
training loss: tensor(0.7655) feature loss: tensor(0.3658)
Global Model Acc on global data: 0.6593 length of data: 10000
save a model
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2531
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.2013) feature loss: tensor(0.2269)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4445) feature loss: tensor(0.2100)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5166) feature loss: tensor(0.2249)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4107) feature loss: tensor(0.2036)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5155) feature loss: tensor(0.2217)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6112) feature loss: tensor(0.2169)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5308) feature loss: tensor(0.2114)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4989) feature loss: tensor(0.2055)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4491) feature loss: tensor(0.2177)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4401) feature loss: tensor(0.2088)
Global Model Acc on global data: 0.6599 length of data: 10000
save a model
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
all data: 2567
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5461) feature loss: tensor(0.2421)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5443) feature loss: tensor(0.2408)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.4865) feature loss: tensor(0.2338)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5230) feature loss: tensor(0.2274)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5934) feature loss: tensor(0.2273)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.4608) feature loss: tensor(0.2569)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5127) feature loss: tensor(0.2214)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8003) feature loss: tensor(0.2461)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.4823) feature loss: tensor(0.2434)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5215) feature loss: tensor(0.2270)
Global Model Acc on global data: 0.6593 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
all data: 2478
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.5973) feature loss: tensor(0.2485)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6311) feature loss: tensor(0.2334)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.5650) feature loss: tensor(0.2392)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6875) feature loss: tensor(0.2601)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6547) feature loss: tensor(0.2421)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6202) feature loss: tensor(0.2436)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6744) feature loss: tensor(0.2620)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.5840) feature loss: tensor(0.2488)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.0615) feature loss: tensor(0.2522)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6785) feature loss: tensor(0.2510)
Global Model Acc on global data: 0.6464 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
all data: 2493
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5782) feature loss: tensor(0.2366)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5397) feature loss: tensor(0.2442)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6213) feature loss: tensor(0.2396)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5510) feature loss: tensor(0.2384)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5748) feature loss: tensor(0.2480)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5470) feature loss: tensor(0.2195)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.1454) feature loss: tensor(0.2305)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6472) feature loss: tensor(0.2225)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.4909) feature loss: tensor(0.2267)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6684) feature loss: tensor(0.2453)
Global Model Acc on global data: 0.6551 length of data: 10000
-------------Round number:  40  -------------
selected users: [79, 75, 63, 15, 38, 11, 40, 45, 39, 62]
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
all data: 2510
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5495) feature loss: tensor(0.2087)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6034) feature loss: tensor(0.2091)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5291) feature loss: tensor(0.2127)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5272) feature loss: tensor(0.2090)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5314) feature loss: tensor(0.2036)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5968) feature loss: tensor(0.2263)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.4790) feature loss: tensor(0.2056)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5378) feature loss: tensor(0.1974)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5329) feature loss: tensor(0.2310)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5195) feature loss: tensor(0.2377)
Global Model Acc on global data: 0.6642 length of data: 10000
save a model
-------------Round number:  41  -------------
selected users: [42, 94, 37, 6, 79, 32, 24, 0, 33, 93]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2486
Local adapation with distilling: 0.000262
training loss: tensor(0.4671) feature loss: tensor(0.1976)
Local adapation with distilling: 0.000262
training loss: tensor(0.5444) feature loss: tensor(0.2021)
Local adapation with distilling: 0.000262
training loss: tensor(0.4542) feature loss: tensor(0.2040)
Local adapation with distilling: 0.000262
training loss: tensor(0.5038) feature loss: tensor(0.1937)
Local adapation with distilling: 0.000262
training loss: tensor(0.4657) feature loss: tensor(0.2138)
Local adapation with distilling: 0.000262
training loss: tensor(0.5666) feature loss: tensor(0.2065)
Local adapation with distilling: 0.000262
training loss: tensor(0.5406) feature loss: tensor(0.2122)
Local adapation with distilling: 0.000262
training loss: tensor(0.6199) feature loss: tensor(0.2054)
Local adapation with distilling: 0.000262
training loss: tensor(0.4733) feature loss: tensor(0.2053)
Local adapation with distilling: 0.000262
training loss: tensor(0.5087) feature loss: tensor(0.1997)
Global Model Acc on global data: 0.6667 length of data: 10000
save a model
-------------Round number:  42  -------------
selected users: [83, 53, 70, 45, 44, 39, 22, 80, 10, 0]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
all data: 2534
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4845) feature loss: tensor(0.1899)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4405) feature loss: tensor(0.1777)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4192) feature loss: tensor(0.1996)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4650) feature loss: tensor(0.1918)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4568) feature loss: tensor(0.2011)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4438) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4214) feature loss: tensor(0.1989)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4525) feature loss: tensor(0.1913)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4537) feature loss: tensor(0.1724)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4898) feature loss: tensor(0.1811)
Global Model Acc on global data: 0.6709 length of data: 10000
save a model
-------------Round number:  43  -------------
selected users: [20, 2, 15, 22, 57, 91, 69, 55, 11, 79]
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
all data: 2519
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4157) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4070) feature loss: tensor(0.1843)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.3566) feature loss: tensor(0.1733)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.3445) feature loss: tensor(0.1933)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.3851) feature loss: tensor(0.1911)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.3627) feature loss: tensor(0.1859)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4054) feature loss: tensor(0.1818)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4800) feature loss: tensor(0.1943)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4490) feature loss: tensor(0.2039)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.3743) feature loss: tensor(0.2002)
Global Model Acc on global data: 0.6634 length of data: 10000
-------------Round number:  44  -------------
selected users: [42, 54, 27, 93, 39, 65, 7, 26, 24, 60]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2467
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4228) feature loss: tensor(0.1811)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5252) feature loss: tensor(0.1884)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4231) feature loss: tensor(0.1930)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4561) feature loss: tensor(0.1820)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4228) feature loss: tensor(0.1899)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4853) feature loss: tensor(0.1882)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4819) feature loss: tensor(0.1821)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8823) feature loss: tensor(0.2003)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4799) feature loss: tensor(0.2089)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.4776) feature loss: tensor(0.1907)
Global Model Acc on global data: 0.6639 length of data: 10000
-------------Round number:  45  -------------
selected users: [0, 1, 62, 76, 37, 99, 78, 38, 2, 84]
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
all data: 2511
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4419) feature loss: tensor(0.1960)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5698) feature loss: tensor(0.1892)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4119) feature loss: tensor(0.1862)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4900) feature loss: tensor(0.1873)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4033) feature loss: tensor(0.1853)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5550) feature loss: tensor(0.2036)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4874) feature loss: tensor(0.1937)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4544) feature loss: tensor(0.1961)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4628) feature loss: tensor(0.1948)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5350) feature loss: tensor(0.2088)
Global Model Acc on global data: 0.6622 length of data: 10000
-------------Round number:  46  -------------
selected users: [71, 33, 37, 10, 44, 34, 24, 98, 73, 95]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2487
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3734) feature loss: tensor(0.1667)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3464) feature loss: tensor(0.1820)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3164) feature loss: tensor(0.1569)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3631) feature loss: tensor(0.1624)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3479) feature loss: tensor(0.1755)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4138) feature loss: tensor(0.1663)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3710) feature loss: tensor(0.1900)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4337) feature loss: tensor(0.1645)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4474) feature loss: tensor(0.1609)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.3671) feature loss: tensor(0.1776)
Global Model Acc on global data: 0.6645 length of data: 10000
-------------Round number:  47  -------------
selected users: [17, 90, 94, 86, 63, 5, 38, 14, 40, 47]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2491
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4512) feature loss: tensor(0.1800)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5344) feature loss: tensor(0.1774)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5031) feature loss: tensor(0.1673)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4337) feature loss: tensor(0.1748)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4666) feature loss: tensor(0.1769)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4868) feature loss: tensor(0.1860)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4177) feature loss: tensor(0.1754)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4508) feature loss: tensor(0.1736)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4381) feature loss: tensor(0.1794)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4912) feature loss: tensor(0.1846)
Global Model Acc on global data: 0.6617 length of data: 10000
-------------Round number:  48  -------------
selected users: [93, 5, 71, 9, 11, 79, 69, 8, 59, 63]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
all data: 2521
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4292) feature loss: tensor(0.1796)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4556) feature loss: tensor(0.1723)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4031) feature loss: tensor(0.1873)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5272) feature loss: tensor(0.1926)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4813) feature loss: tensor(0.2034)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4367) feature loss: tensor(0.1847)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4589) feature loss: tensor(0.2118)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4349) feature loss: tensor(0.1732)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.8573) feature loss: tensor(0.1883)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.4097) feature loss: tensor(0.1713)
Global Model Acc on global data: 0.6653 length of data: 10000
-------------Round number:  49  -------------
selected users: [76, 25, 28, 75, 81, 47, 41, 22, 29, 1]
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
all data: 2519
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5695) feature loss: tensor(0.2441)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5527) feature loss: tensor(0.2233)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5620) feature loss: tensor(0.2027)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6038) feature loss: tensor(0.2160)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5253) feature loss: tensor(0.2135)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5115) feature loss: tensor(0.2134)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5345) feature loss: tensor(0.2397)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.4671) feature loss: tensor(0.2595)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9052) feature loss: tensor(0.2232)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6099) feature loss: tensor(0.2413)
Global Model Acc on global data: 0.6621 length of data: 10000
-------------Round number:  50  -------------
selected users: [80, 79, 25, 15, 39, 40, 53, 17, 57, 50]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
all data: 2496
Local adapation with distilling: 0.0001
training loss: tensor(0.3377) feature loss: tensor(0.1405)
Local adapation with distilling: 0.0001
training loss: tensor(0.3362) feature loss: tensor(0.1345)
Local adapation with distilling: 0.0001
training loss: tensor(0.3753) feature loss: tensor(0.1349)
Local adapation with distilling: 0.0001
training loss: tensor(0.3158) feature loss: tensor(0.1335)
Local adapation with distilling: 0.0001
training loss: tensor(0.3460) feature loss: tensor(0.1399)
Local adapation with distilling: 0.0001
training loss: tensor(0.3234) feature loss: tensor(0.1300)
Local adapation with distilling: 0.0001
training loss: tensor(0.3555) feature loss: tensor(0.1442)
Local adapation with distilling: 0.0001
training loss: tensor(0.3459) feature loss: tensor(0.1394)
Local adapation with distilling: 0.0001
training loss: tensor(0.3665) feature loss: tensor(0.1462)
Local adapation with distilling: 0.0001
training loss: tensor(0.3863) feature loss: tensor(0.1350)
Global Model Acc on global data: 0.6585 length of data: 10000
-------------Round number:  51  -------------
selected users: [71, 43, 11, 83, 78, 19, 80, 4, 79, 75]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2567
Local adapation with distilling: 0.0001
training loss: tensor(0.4148) feature loss: tensor(0.1735)
Local adapation with distilling: 0.0001
training loss: tensor(0.5389) feature loss: tensor(0.1717)
Local adapation with distilling: 0.0001
training loss: tensor(0.5048) feature loss: tensor(0.1919)
Local adapation with distilling: 0.0001
training loss: tensor(0.4593) feature loss: tensor(0.1859)
Local adapation with distilling: 0.0001
training loss: tensor(0.4876) feature loss: tensor(0.1668)
Local adapation with distilling: 0.0001
training loss: tensor(0.6152) feature loss: tensor(0.1946)
Local adapation with distilling: 0.0001
training loss: tensor(0.4110) feature loss: tensor(0.1627)
Local adapation with distilling: 0.0001
training loss: tensor(0.5252) feature loss: tensor(0.1632)
Local adapation with distilling: 0.0001
training loss: tensor(0.4126) feature loss: tensor(0.1720)
Local adapation with distilling: 0.0001
training loss: tensor(0.5026) feature loss: tensor(0.1669)
Global Model Acc on global data: 0.6646 length of data: 10000
-------------Round number:  52  -------------
selected users: [82, 8, 44, 19, 2, 73, 37, 89, 67, 18]
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
all data: 2522
Local adapation with distilling: 0.0001
training loss: tensor(0.5019) feature loss: tensor(0.1652)
Local adapation with distilling: 0.0001
training loss: tensor(0.3714) feature loss: tensor(0.1537)
Local adapation with distilling: 0.0001
training loss: tensor(0.3590) feature loss: tensor(0.1572)
Local adapation with distilling: 0.0001
training loss: tensor(0.4480) feature loss: tensor(0.1884)
Local adapation with distilling: 0.0001
training loss: tensor(0.4423) feature loss: tensor(0.1736)
Local adapation with distilling: 0.0001
training loss: tensor(0.4306) feature loss: tensor(0.1626)
Local adapation with distilling: 0.0001
training loss: tensor(0.3202) feature loss: tensor(0.1632)
Local adapation with distilling: 0.0001
training loss: tensor(0.3905) feature loss: tensor(0.1677)
Local adapation with distilling: 0.0001
training loss: tensor(0.3858) feature loss: tensor(0.1669)
Local adapation with distilling: 0.0001
training loss: tensor(0.4339) feature loss: tensor(0.1548)
Global Model Acc on global data: 0.6648 length of data: 10000
-------------Round number:  53  -------------
selected users: [19, 78, 64, 3, 71, 32, 68, 42, 55, 97]
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
all data: 2499
Local adapation with distilling: 0.0001
training loss: tensor(0.4548) feature loss: tensor(0.1590)
Local adapation with distilling: 0.0001
training loss: tensor(0.5005) feature loss: tensor(0.1493)
Local adapation with distilling: 0.0001
training loss: tensor(0.5589) feature loss: tensor(0.1694)
Local adapation with distilling: 0.0001
training loss: tensor(0.4995) feature loss: tensor(0.1720)
Local adapation with distilling: 0.0001
training loss: tensor(0.4468) feature loss: tensor(0.1863)
Local adapation with distilling: 0.0001
training loss: tensor(0.5996) feature loss: tensor(0.1991)
Local adapation with distilling: 0.0001
training loss: tensor(0.5258) feature loss: tensor(0.1663)
Local adapation with distilling: 0.0001
training loss: tensor(0.3774) feature loss: tensor(0.1481)
Local adapation with distilling: 0.0001
training loss: tensor(0.5350) feature loss: tensor(0.2139)
Local adapation with distilling: 0.0001
training loss: tensor(0.5896) feature loss: tensor(0.1857)
Global Model Acc on global data: 0.6612 length of data: 10000
-------------Round number:  54  -------------
selected users: [36, 70, 48, 94, 81, 46, 38, 29, 34, 22]
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2489
Local adapation with distilling: 0.0001
training loss: tensor(0.5040) feature loss: tensor(0.1782)
Local adapation with distilling: 0.0001
training loss: tensor(0.4150) feature loss: tensor(0.1712)
Local adapation with distilling: 0.0001
training loss: tensor(0.4756) feature loss: tensor(0.1719)
Local adapation with distilling: 0.0001
training loss: tensor(0.4189) feature loss: tensor(0.1573)
Local adapation with distilling: 0.0001
training loss: tensor(0.4031) feature loss: tensor(0.1757)
Local adapation with distilling: 0.0001
training loss: tensor(0.4471) feature loss: tensor(0.1669)
Local adapation with distilling: 0.0001
training loss: tensor(0.4020) feature loss: tensor(0.1679)
Local adapation with distilling: 0.0001
training loss: tensor(0.6253) feature loss: tensor(0.1685)
Local adapation with distilling: 0.0001
training loss: tensor(0.4736) feature loss: tensor(0.1653)
Local adapation with distilling: 0.0001
training loss: tensor(0.3708) feature loss: tensor(0.1658)
Global Model Acc on global data: 0.6659 length of data: 10000
-------------Round number:  55  -------------
selected users: [28, 92, 98, 95, 84, 34, 38, 76, 17, 78]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2482
Local adapation with distilling: 0.0001
training loss: tensor(0.4257) feature loss: tensor(0.1558)
Local adapation with distilling: 0.0001
training loss: tensor(0.5259) feature loss: tensor(0.1615)
Local adapation with distilling: 0.0001
training loss: tensor(0.4044) feature loss: tensor(0.1518)
Local adapation with distilling: 0.0001
training loss: tensor(0.3719) feature loss: tensor(0.1660)
Local adapation with distilling: 0.0001
training loss: tensor(0.4513) feature loss: tensor(0.1664)
Local adapation with distilling: 0.0001
training loss: tensor(0.3897) feature loss: tensor(0.1568)
Local adapation with distilling: 0.0001
training loss: tensor(0.3326) feature loss: tensor(0.1478)
Local adapation with distilling: 0.0001
training loss: tensor(0.3969) feature loss: tensor(0.1619)
Local adapation with distilling: 0.0001
training loss: tensor(0.3357) feature loss: tensor(0.1508)
Local adapation with distilling: 0.0001
training loss: tensor(0.3504) feature loss: tensor(0.1446)
Global Model Acc on global data: 0.6618 length of data: 10000
-------------Round number:  56  -------------
selected users: [92, 79, 23, 68, 52, 38, 73, 9, 59, 27]
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2529
Local adapation with distilling: 0.0001
training loss: tensor(0.5532) feature loss: tensor(0.1661)
Local adapation with distilling: 0.0001
training loss: tensor(0.3785) feature loss: tensor(0.1642)
Local adapation with distilling: 0.0001
training loss: tensor(0.5593) feature loss: tensor(0.1707)
Local adapation with distilling: 0.0001
training loss: tensor(0.4355) feature loss: tensor(0.1592)
Local adapation with distilling: 0.0001
training loss: tensor(0.4457) feature loss: tensor(0.1772)
Local adapation with distilling: 0.0001
training loss: tensor(0.3559) feature loss: tensor(0.1543)
Local adapation with distilling: 0.0001
training loss: tensor(0.4843) feature loss: tensor(0.1564)
Local adapation with distilling: 0.0001
training loss: tensor(0.4634) feature loss: tensor(0.1708)
Local adapation with distilling: 0.0001
training loss: tensor(0.9772) feature loss: tensor(0.1717)
Local adapation with distilling: 0.0001
training loss: tensor(0.4021) feature loss: tensor(0.1686)
Global Model Acc on global data: 0.664 length of data: 10000
-------------Round number:  57  -------------
selected users: [52, 17, 41, 3, 8, 98, 59, 20, 67, 7]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
all data: 2525
Local adapation with distilling: 0.0001
training loss: tensor(0.3674) feature loss: tensor(0.1731)
Local adapation with distilling: 0.0001
training loss: tensor(0.3463) feature loss: tensor(0.1653)
Local adapation with distilling: 0.0001
training loss: tensor(0.3915) feature loss: tensor(0.1899)
Local adapation with distilling: 0.0001
training loss: tensor(0.4172) feature loss: tensor(0.1895)
Local adapation with distilling: 0.0001
training loss: tensor(0.3707) feature loss: tensor(0.1722)
Local adapation with distilling: 0.0001
training loss: tensor(0.4291) feature loss: tensor(0.1766)
Local adapation with distilling: 0.0001
training loss: tensor(0.9198) feature loss: tensor(0.1744)
Local adapation with distilling: 0.0001
training loss: tensor(0.4191) feature loss: tensor(0.1897)
Local adapation with distilling: 0.0001
training loss: tensor(0.4236) feature loss: tensor(0.1765)
Local adapation with distilling: 0.0001
training loss: tensor(0.5158) feature loss: tensor(0.1801)
Global Model Acc on global data: 0.6607 length of data: 10000
-------------Round number:  58  -------------
selected users: [43, 58, 8, 31, 70, 45, 69, 95, 50, 4]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
all data: 2490
Local adapation with distilling: 0.0001
training loss: tensor(0.4449) feature loss: tensor(0.1816)
Local adapation with distilling: 0.0001
training loss: tensor(0.4750) feature loss: tensor(0.1733)
Local adapation with distilling: 0.0001
training loss: tensor(0.3561) feature loss: tensor(0.1686)
Local adapation with distilling: 0.0001
training loss: tensor(0.4267) feature loss: tensor(0.1879)
Local adapation with distilling: 0.0001
training loss: tensor(0.3681) feature loss: tensor(0.1776)
Local adapation with distilling: 0.0001
training loss: tensor(0.4185) feature loss: tensor(0.1775)
Local adapation with distilling: 0.0001
training loss: tensor(0.3926) feature loss: tensor(0.1857)
Local adapation with distilling: 0.0001
training loss: tensor(0.3486) feature loss: tensor(0.1813)
Local adapation with distilling: 0.0001
training loss: tensor(0.4124) feature loss: tensor(0.1837)
Local adapation with distilling: 0.0001
training loss: tensor(0.4222) feature loss: tensor(0.1850)
Global Model Acc on global data: 0.6626 length of data: 10000
-------------Round number:  59  -------------
selected users: [38, 46, 24, 87, 30, 85, 16, 96, 18, 99]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
all data: 2435
Local adapation with distilling: 0.0001
training loss: tensor(0.3690) feature loss: tensor(0.1831)
Local adapation with distilling: 0.0001
training loss: tensor(0.4247) feature loss: tensor(0.1880)
Local adapation with distilling: 0.0001
training loss: tensor(0.4232) feature loss: tensor(0.2127)
Local adapation with distilling: 0.0001
training loss: tensor(0.4917) feature loss: tensor(0.2080)
Local adapation with distilling: 0.0001
training loss: tensor(0.4675) feature loss: tensor(0.1922)
Local adapation with distilling: 0.0001
training loss: tensor(0.4357) feature loss: tensor(0.1729)
Local adapation with distilling: 0.0001
training loss: tensor(0.4962) feature loss: tensor(0.1983)
Local adapation with distilling: 0.0001
training loss: tensor(0.4888) feature loss: tensor(0.1866)
Local adapation with distilling: 0.0001
training loss: tensor(0.4864) feature loss: tensor(0.2531)
Local adapation with distilling: 0.0001
training loss: tensor(0.6433) feature loss: tensor(0.2578)
Global Model Acc on global data: 0.6645 length of data: 10000
-------------Round number:  60  -------------
selected users: [88, 4, 79, 14, 55, 3, 19, 28, 94, 25]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
all data: 2480
Local adapation with distilling: 0.0001
training loss: tensor(0.4149) feature loss: tensor(0.1814)
Local adapation with distilling: 0.0001
training loss: tensor(0.3694) feature loss: tensor(0.1860)
Local adapation with distilling: 0.0001
training loss: tensor(0.3648) feature loss: tensor(0.1792)
Local adapation with distilling: 0.0001
training loss: tensor(0.3560) feature loss: tensor(0.1775)
Local adapation with distilling: 0.0001
training loss: tensor(0.4183) feature loss: tensor(0.1704)
Local adapation with distilling: 0.0001
training loss: tensor(0.3719) feature loss: tensor(0.1828)
Local adapation with distilling: 0.0001
training loss: tensor(0.3904) feature loss: tensor(0.1845)
Local adapation with distilling: 0.0001
training loss: tensor(0.4067) feature loss: tensor(0.1738)
Local adapation with distilling: 0.0001
training loss: tensor(0.3765) feature loss: tensor(0.1695)
Local adapation with distilling: 0.0001
training loss: tensor(0.3858) feature loss: tensor(0.1781)
Global Model Acc on global data: 0.6681 length of data: 10000
-------------Round number:  61  -------------
selected users: [83, 1, 55, 9, 31, 28, 96, 29, 86, 63]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
all data: 2552
Local adapation with distilling: 0.0001
training loss: tensor(0.4295) feature loss: tensor(0.1788)
Local adapation with distilling: 0.0001
training loss: tensor(0.4960) feature loss: tensor(0.1789)
Local adapation with distilling: 0.0001
training loss: tensor(0.4331) feature loss: tensor(0.1692)
Local adapation with distilling: 0.0001
training loss: tensor(0.4647) feature loss: tensor(0.1694)
Local adapation with distilling: 0.0001
training loss: tensor(0.4742) feature loss: tensor(0.1817)
Local adapation with distilling: 0.0001
training loss: tensor(0.4232) feature loss: tensor(0.1756)
Local adapation with distilling: 0.0001
training loss: tensor(0.4698) feature loss: tensor(0.1737)
Local adapation with distilling: 0.0001
training loss: tensor(0.7744) feature loss: tensor(0.1644)
Local adapation with distilling: 0.0001
training loss: tensor(0.4152) feature loss: tensor(0.1660)
Local adapation with distilling: 0.0001
training loss: tensor(0.4300) feature loss: tensor(0.1643)
Global Model Acc on global data: 0.6673 length of data: 10000
-------------Round number:  62  -------------
selected users: [76, 48, 62, 80, 29, 99, 60, 89, 39, 69]
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
all data: 2498
Local adapation with distilling: 0.0001
training loss: tensor(0.4180) feature loss: tensor(0.2239)
Local adapation with distilling: 0.0001
training loss: tensor(0.4334) feature loss: tensor(0.2139)
Local adapation with distilling: 0.0001
training loss: tensor(0.4158) feature loss: tensor(0.2163)
Local adapation with distilling: 0.0001
training loss: tensor(0.3608) feature loss: tensor(0.1994)
Local adapation with distilling: 0.0001
training loss: tensor(0.6653) feature loss: tensor(0.1978)
Local adapation with distilling: 0.0001
training loss: tensor(0.4314) feature loss: tensor(0.1929)
Local adapation with distilling: 0.0001
training loss: tensor(0.3978) feature loss: tensor(0.1783)
Local adapation with distilling: 0.0001
training loss: tensor(0.4653) feature loss: tensor(0.2025)
Local adapation with distilling: 0.0001
training loss: tensor(0.4428) feature loss: tensor(0.2413)
Local adapation with distilling: 0.0001
training loss: tensor(0.4139) feature loss: tensor(0.2140)
Global Model Acc on global data: 0.6654 length of data: 10000
-------------Round number:  63  -------------
selected users: [64, 59, 63, 2, 80, 20, 18, 48, 72, 51]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
all data: 2502
Local adapation with distilling: 0.0001
training loss: tensor(0.4679) feature loss: tensor(0.1673)
Local adapation with distilling: 0.0001
training loss: tensor(0.9795) feature loss: tensor(0.1595)
Local adapation with distilling: 0.0001
training loss: tensor(0.3551) feature loss: tensor(0.1616)
Local adapation with distilling: 0.0001
training loss: tensor(0.4067) feature loss: tensor(0.1809)
Local adapation with distilling: 0.0001
training loss: tensor(0.3285) feature loss: tensor(0.1682)
Local adapation with distilling: 0.0001
training loss: tensor(0.3633) feature loss: tensor(0.1598)
Local adapation with distilling: 0.0001
training loss: tensor(0.3652) feature loss: tensor(0.1655)
Local adapation with distilling: 0.0001
training loss: tensor(0.3427) feature loss: tensor(0.1764)
Local adapation with distilling: 0.0001
training loss: tensor(0.6615) feature loss: tensor(0.1618)
Local adapation with distilling: 0.0001
training loss: tensor(0.4768) feature loss: tensor(0.1770)
Global Model Acc on global data: 0.6623 length of data: 10000
-------------Round number:  64  -------------
selected users: [17, 22, 60, 92, 23, 19, 71, 94, 40, 49]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2501
Local adapation with distilling: 0.0001
training loss: tensor(0.3064) feature loss: tensor(0.1589)
Local adapation with distilling: 0.0001
training loss: tensor(0.3372) feature loss: tensor(0.1724)
Local adapation with distilling: 0.0001
training loss: tensor(0.3475) feature loss: tensor(0.1914)
Local adapation with distilling: 0.0001
training loss: tensor(0.4536) feature loss: tensor(0.1753)
Local adapation with distilling: 0.0001
training loss: tensor(0.4677) feature loss: tensor(0.1775)
Local adapation with distilling: 0.0001
training loss: tensor(0.3500) feature loss: tensor(0.1823)
Local adapation with distilling: 0.0001
training loss: tensor(0.2999) feature loss: tensor(0.1603)
Local adapation with distilling: 0.0001
training loss: tensor(0.3434) feature loss: tensor(0.1697)
Local adapation with distilling: 0.0001
training loss: tensor(0.3684) feature loss: tensor(0.1785)
Local adapation with distilling: 0.0001
training loss: tensor(0.3794) feature loss: tensor(0.2003)
Global Model Acc on global data: 0.6601 length of data: 10000
-------------Round number:  65  -------------
selected users: [37, 81, 39, 61, 76, 90, 27, 86, 28, 69]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
all data: 2519
Local adapation with distilling: 0.0001
training loss: tensor(0.3415) feature loss: tensor(0.1647)
Local adapation with distilling: 0.0001
training loss: tensor(0.3827) feature loss: tensor(0.1663)
Local adapation with distilling: 0.0001
training loss: tensor(0.3479) feature loss: tensor(0.1640)
Local adapation with distilling: 0.0001
training loss: tensor(0.4706) feature loss: tensor(0.1758)
Local adapation with distilling: 0.0001
training loss: tensor(0.3572) feature loss: tensor(0.1695)
Local adapation with distilling: 0.0001
training loss: tensor(0.4256) feature loss: tensor(0.1692)
Local adapation with distilling: 0.0001
training loss: tensor(0.3405) feature loss: tensor(0.1630)
Local adapation with distilling: 0.0001
training loss: tensor(0.3535) feature loss: tensor(0.1646)
Local adapation with distilling: 0.0001
training loss: tensor(0.3467) feature loss: tensor(0.1598)
Local adapation with distilling: 0.0001
training loss: tensor(0.3337) feature loss: tensor(0.1629)
Global Model Acc on global data: 0.6609 length of data: 10000
-------------Round number:  66  -------------
selected users: [8, 93, 4, 5, 52, 41, 0, 73, 88, 68]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2547
Local adapation with distilling: 0.0001
training loss: tensor(0.3045) feature loss: tensor(0.1514)
Local adapation with distilling: 0.0001
training loss: tensor(0.3747) feature loss: tensor(0.1553)
Local adapation with distilling: 0.0001
training loss: tensor(0.3472) feature loss: tensor(0.1617)
Local adapation with distilling: 0.0001
training loss: tensor(0.3975) feature loss: tensor(0.1589)
Local adapation with distilling: 0.0001
training loss: tensor(0.3289) feature loss: tensor(0.1612)
Local adapation with distilling: 0.0001
training loss: tensor(0.3355) feature loss: tensor(0.1605)
Local adapation with distilling: 0.0001
training loss: tensor(0.3678) feature loss: tensor(0.1566)
Local adapation with distilling: 0.0001
training loss: tensor(0.4840) feature loss: tensor(0.1562)
Local adapation with distilling: 0.0001
training loss: tensor(0.3498) feature loss: tensor(0.1580)
Local adapation with distilling: 0.0001
training loss: tensor(0.3555) feature loss: tensor(0.1620)
Global Model Acc on global data: 0.6586 length of data: 10000
-------------Round number:  67  -------------
selected users: [17, 24, 64, 93, 97, 29, 3, 70, 82, 11]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2477
Local adapation with distilling: 0.0001
training loss: tensor(0.2873) feature loss: tensor(0.1510)
Local adapation with distilling: 0.0001
training loss: tensor(0.3630) feature loss: tensor(0.1656)
Local adapation with distilling: 0.0001
training loss: tensor(0.3780) feature loss: tensor(0.1510)
Local adapation with distilling: 0.0001
training loss: tensor(0.3361) feature loss: tensor(0.1526)
Local adapation with distilling: 0.0001
training loss: tensor(0.4106) feature loss: tensor(0.1546)
Local adapation with distilling: 0.0001
training loss: tensor(0.5485) feature loss: tensor(0.1569)
Local adapation with distilling: 0.0001
training loss: tensor(0.3331) feature loss: tensor(0.1576)
Local adapation with distilling: 0.0001
training loss: tensor(0.3230) feature loss: tensor(0.1574)
Local adapation with distilling: 0.0001
training loss: tensor(0.6300) feature loss: tensor(0.1567)
Local adapation with distilling: 0.0001
training loss: tensor(0.4367) feature loss: tensor(0.1553)
Global Model Acc on global data: 0.6606 length of data: 10000
-------------Round number:  68  -------------
selected users: [29, 30, 16, 5, 38, 71, 76, 94, 99, 95]
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2492
Local adapation with distilling: 0.0001
training loss: tensor(0.4059) feature loss: tensor(0.1618)
Local adapation with distilling: 0.0001
training loss: tensor(0.3822) feature loss: tensor(0.1692)
Local adapation with distilling: 0.0001
training loss: tensor(0.3796) feature loss: tensor(0.1595)
Local adapation with distilling: 0.0001
training loss: tensor(0.3422) feature loss: tensor(0.1527)
Local adapation with distilling: 0.0001
training loss: tensor(0.3011) feature loss: tensor(0.1529)
Local adapation with distilling: 0.0001
training loss: tensor(0.2919) feature loss: tensor(0.1640)
Local adapation with distilling: 0.0001
training loss: tensor(0.3188) feature loss: tensor(0.1678)
Local adapation with distilling: 0.0001
training loss: tensor(0.3120) feature loss: tensor(0.1661)
Local adapation with distilling: 0.0001
training loss: tensor(0.3600) feature loss: tensor(0.1680)
Local adapation with distilling: 0.0001
training loss: tensor(0.3015) feature loss: tensor(0.1669)
Global Model Acc on global data: 0.6651 length of data: 10000
-------------Round number:  69  -------------
selected users: [72, 31, 13, 83, 33, 8, 26, 89, 64, 97]
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
all data: 2554
Local adapation with distilling: 0.0001
training loss: tensor(0.6445) feature loss: tensor(0.1451)
Local adapation with distilling: 0.0001
training loss: tensor(0.3904) feature loss: tensor(0.1499)
Local adapation with distilling: 0.0001
training loss: tensor(0.5010) feature loss: tensor(0.1379)
Local adapation with distilling: 0.0001
training loss: tensor(0.3466) feature loss: tensor(0.1455)
Local adapation with distilling: 0.0001
training loss: tensor(0.3663) feature loss: tensor(0.1415)
Local adapation with distilling: 0.0001
training loss: tensor(0.3381) feature loss: tensor(0.1424)
Local adapation with distilling: 0.0001
training loss: tensor(1.3038) feature loss: tensor(0.1474)
Local adapation with distilling: 0.0001
training loss: tensor(0.3778) feature loss: tensor(0.1490)
Local adapation with distilling: 0.0001
training loss: tensor(0.3750) feature loss: tensor(0.1407)
Local adapation with distilling: 0.0001
training loss: tensor(0.3990) feature loss: tensor(0.1394)
Global Model Acc on global data: 0.6582 length of data: 10000
-------------Round number:  70  -------------
selected users: [81, 43, 88, 32, 50, 71, 73, 55, 42, 2]
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
all data: 2526
Local adapation with distilling: 0.0001
training loss: tensor(0.3115) feature loss: tensor(0.1544)
Local adapation with distilling: 0.0001
training loss: tensor(0.3512) feature loss: tensor(0.1540)
Local adapation with distilling: 0.0001
training loss: tensor(0.3122) feature loss: tensor(0.1376)
Local adapation with distilling: 0.0001
training loss: tensor(0.3902) feature loss: tensor(0.1468)
Local adapation with distilling: 0.0001
training loss: tensor(0.3510) feature loss: tensor(0.1496)
Local adapation with distilling: 0.0001
training loss: tensor(0.2953) feature loss: tensor(0.1493)
Local adapation with distilling: 0.0001
training loss: tensor(0.4446) feature loss: tensor(0.1424)
Local adapation with distilling: 0.0001
training loss: tensor(0.3355) feature loss: tensor(0.1409)
Local adapation with distilling: 0.0001
training loss: tensor(0.2906) feature loss: tensor(0.1437)
Local adapation with distilling: 0.0001
training loss: tensor(0.3380) feature loss: tensor(0.1568)
Global Model Acc on global data: 0.6613 length of data: 10000
-------------Round number:  71  -------------
selected users: [41, 84, 98, 42, 75, 25, 60, 19, 52, 29]
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
all data: 2509
Local adapation with distilling: 0.0001
training loss: tensor(0.3146) feature loss: tensor(0.1677)
Local adapation with distilling: 0.0001
training loss: tensor(0.4151) feature loss: tensor(0.1705)
Local adapation with distilling: 0.0001
training loss: tensor(0.3585) feature loss: tensor(0.1604)
Local adapation with distilling: 0.0001
training loss: tensor(0.2934) feature loss: tensor(0.1639)
Local adapation with distilling: 0.0001
training loss: tensor(0.4099) feature loss: tensor(0.1670)
Local adapation with distilling: 0.0001
training loss: tensor(0.3488) feature loss: tensor(0.1628)
Local adapation with distilling: 0.0001
training loss: tensor(0.3222) feature loss: tensor(0.1584)
Local adapation with distilling: 0.0001
training loss: tensor(0.3463) feature loss: tensor(0.1770)
Local adapation with distilling: 0.0001
training loss: tensor(0.3203) feature loss: tensor(0.1689)
Local adapation with distilling: 0.0001
training loss: tensor(0.6083) feature loss: tensor(0.1669)
Global Model Acc on global data: 0.6574 length of data: 10000
-------------Round number:  72  -------------
selected users: [76, 82, 43, 16, 84, 95, 78, 91, 30, 22]
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2478
Local adapation with distilling: 0.0001
training loss: tensor(0.3144) feature loss: tensor(0.1647)
Local adapation with distilling: 0.0001
training loss: tensor(0.4388) feature loss: tensor(0.1685)
Local adapation with distilling: 0.0001
training loss: tensor(0.3469) feature loss: tensor(0.1691)
Local adapation with distilling: 0.0001
training loss: tensor(0.3449) feature loss: tensor(0.1632)
Local adapation with distilling: 0.0001
training loss: tensor(0.3543) feature loss: tensor(0.1696)
Local adapation with distilling: 0.0001
training loss: tensor(0.2961) feature loss: tensor(0.1697)
Local adapation with distilling: 0.0001
training loss: tensor(0.3918) feature loss: tensor(0.1705)
Local adapation with distilling: 0.0001
training loss: tensor(0.3628) feature loss: tensor(0.1669)
Local adapation with distilling: 0.0001
training loss: tensor(0.3617) feature loss: tensor(0.1648)
Local adapation with distilling: 0.0001
training loss: tensor(0.3201) feature loss: tensor(0.1826)
Global Model Acc on global data: 0.6615 length of data: 10000
-------------Round number:  73  -------------
selected users: [49, 14, 34, 70, 90, 35, 68, 76, 80, 9]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
all data: 2459
Local adapation with distilling: 0.0001
training loss: tensor(0.3529) feature loss: tensor(0.1628)
Local adapation with distilling: 0.0001
training loss: tensor(0.3570) feature loss: tensor(0.1643)
Local adapation with distilling: 0.0001
training loss: tensor(0.3845) feature loss: tensor(0.1576)
Local adapation with distilling: 0.0001
training loss: tensor(0.3342) feature loss: tensor(0.1582)
Local adapation with distilling: 0.0001
training loss: tensor(0.4214) feature loss: tensor(0.1685)
Local adapation with distilling: 0.0001
training loss: tensor(0.4855) feature loss: tensor(0.1594)
Local adapation with distilling: 0.0001
training loss: tensor(0.3485) feature loss: tensor(0.1592)
Local adapation with distilling: 0.0001
training loss: tensor(0.3107) feature loss: tensor(0.1621)
Local adapation with distilling: 0.0001
training loss: tensor(0.3165) feature loss: tensor(0.1588)
Local adapation with distilling: 0.0001
training loss: tensor(0.3904) feature loss: tensor(0.1622)
Global Model Acc on global data: 0.6675 length of data: 10000
-------------Round number:  74  -------------
selected users: [85, 64, 63, 80, 6, 12, 43, 17, 7, 8]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2517
Local adapation with distilling: 0.0001
training loss: tensor(0.3536) feature loss: tensor(0.1502)
Local adapation with distilling: 0.0001
training loss: tensor(0.3629) feature loss: tensor(0.1500)
Local adapation with distilling: 0.0001
training loss: tensor(0.3639) feature loss: tensor(0.1531)
Local adapation with distilling: 0.0001
training loss: tensor(0.3262) feature loss: tensor(0.1526)
Local adapation with distilling: 0.0001
training loss: tensor(0.4828) feature loss: tensor(0.1558)
Local adapation with distilling: 0.0001
training loss: tensor(0.7401) feature loss: tensor(0.1578)
Local adapation with distilling: 0.0001
training loss: tensor(0.3516) feature loss: tensor(0.1612)
Local adapation with distilling: 0.0001
training loss: tensor(0.3112) feature loss: tensor(0.1512)
Local adapation with distilling: 0.0001
training loss: tensor(0.4468) feature loss: tensor(0.1599)
Local adapation with distilling: 0.0001
training loss: tensor(0.3153) feature loss: tensor(0.1546)
Global Model Acc on global data: 0.6677 length of data: 10000
-------------Round number:  75  -------------
selected users: [36, 7, 6, 45, 56, 54, 22, 37, 53, 68]
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
all data: 2498
Local adapation with distilling: 0.0001
training loss: tensor(0.4597) feature loss: tensor(0.2177)
Local adapation with distilling: 0.0001
training loss: tensor(0.3793) feature loss: tensor(0.2064)
Local adapation with distilling: 0.0001
training loss: tensor(0.4718) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0001
training loss: tensor(0.4096) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0001
training loss: tensor(0.4882) feature loss: tensor(0.2027)
Local adapation with distilling: 0.0001
training loss: tensor(0.5372) feature loss: tensor(0.2123)
Local adapation with distilling: 0.0001
training loss: tensor(0.4105) feature loss: tensor(0.2153)
Local adapation with distilling: 0.0001
training loss: tensor(0.3881) feature loss: tensor(0.1900)
Local adapation with distilling: 0.0001
training loss: tensor(0.4448) feature loss: tensor(0.2090)
Local adapation with distilling: 0.0001
training loss: tensor(0.4067) feature loss: tensor(0.2153)
Global Model Acc on global data: 0.6673 length of data: 10000
-------------Round number:  76  -------------
selected users: [38, 37, 32, 50, 10, 94, 19, 44, 86, 23]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
all data: 2469
Local adapation with distilling: 0.0001
training loss: tensor(0.2998) feature loss: tensor(0.1656)
Local adapation with distilling: 0.0001
training loss: tensor(0.2812) feature loss: tensor(0.1682)
Local adapation with distilling: 0.0001
training loss: tensor(0.3995) feature loss: tensor(0.1722)
Local adapation with distilling: 0.0001
training loss: tensor(0.3368) feature loss: tensor(0.1722)
Local adapation with distilling: 0.0001
training loss: tensor(0.3640) feature loss: tensor(0.1690)
Local adapation with distilling: 0.0001
training loss: tensor(0.3088) feature loss: tensor(0.1712)
Local adapation with distilling: 0.0001
training loss: tensor(0.3334) feature loss: tensor(0.1745)
Local adapation with distilling: 0.0001
training loss: tensor(0.3403) feature loss: tensor(0.1759)
Local adapation with distilling: 0.0001
training loss: tensor(0.3081) feature loss: tensor(0.1671)
Local adapation with distilling: 0.0001
training loss: tensor(0.4061) feature loss: tensor(0.1734)
Global Model Acc on global data: 0.6621 length of data: 10000
-------------Round number:  77  -------------
selected users: [5, 93, 41, 96, 16, 42, 81, 91, 50, 58]
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
all data: 2480
Local adapation with distilling: 0.0001
training loss: tensor(0.3424) feature loss: tensor(0.1530)
Local adapation with distilling: 0.0001
training loss: tensor(0.3112) feature loss: tensor(0.1476)
Local adapation with distilling: 0.0001
training loss: tensor(0.2868) feature loss: tensor(0.1533)
Local adapation with distilling: 0.0001
training loss: tensor(0.3822) feature loss: tensor(0.1599)
Local adapation with distilling: 0.0001
training loss: tensor(0.3254) feature loss: tensor(0.1535)
Local adapation with distilling: 0.0001
training loss: tensor(0.2835) feature loss: tensor(0.1538)
Local adapation with distilling: 0.0001
training loss: tensor(0.3067) feature loss: tensor(0.1574)
Local adapation with distilling: 0.0001
training loss: tensor(0.2962) feature loss: tensor(0.1503)
Local adapation with distilling: 0.0001
training loss: tensor(0.2857) feature loss: tensor(0.1526)
Local adapation with distilling: 0.0001
training loss: tensor(0.3502) feature loss: tensor(0.1523)
Global Model Acc on global data: 0.6639 length of data: 10000
-------------Round number:  78  -------------
selected users: [9, 46, 7, 63, 15, 2, 74, 31, 5, 36]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
all data: 2540
Local adapation with distilling: 0.0001
training loss: tensor(0.3503) feature loss: tensor(0.1577)
Local adapation with distilling: 0.0001
training loss: tensor(0.3702) feature loss: tensor(0.1495)
Local adapation with distilling: 0.0001
training loss: tensor(0.3300) feature loss: tensor(0.1552)
Local adapation with distilling: 0.0001
training loss: tensor(0.2961) feature loss: tensor(0.1463)
Local adapation with distilling: 0.0001
training loss: tensor(0.3480) feature loss: tensor(0.1471)
Local adapation with distilling: 0.0001
training loss: tensor(0.4192) feature loss: tensor(0.1535)
Local adapation with distilling: 0.0001
training loss: tensor(0.3452) feature loss: tensor(0.1478)
Local adapation with distilling: 0.0001
training loss: tensor(0.3581) feature loss: tensor(0.1565)
Local adapation with distilling: 0.0001
training loss: tensor(0.3317) feature loss: tensor(0.1497)
Local adapation with distilling: 0.0001
training loss: tensor(0.3708) feature loss: tensor(0.1527)
Global Model Acc on global data: 0.6627 length of data: 10000
-------------Round number:  79  -------------
selected users: [68, 18, 86, 60, 56, 32, 30, 24, 45, 92]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2460
Local adapation with distilling: 0.0001
training loss: tensor(0.3092) feature loss: tensor(0.1635)
Local adapation with distilling: 0.0001
training loss: tensor(0.3457) feature loss: tensor(0.1570)
Local adapation with distilling: 0.0001
training loss: tensor(0.2876) feature loss: tensor(0.1588)
Local adapation with distilling: 0.0001
training loss: tensor(0.3271) feature loss: tensor(0.1575)
Local adapation with distilling: 0.0001
training loss: tensor(0.3839) feature loss: tensor(0.1566)
Local adapation with distilling: 0.0001
training loss: tensor(0.3547) feature loss: tensor(0.1552)
Local adapation with distilling: 0.0001
training loss: tensor(0.3451) feature loss: tensor(0.1569)
Local adapation with distilling: 0.0001
training loss: tensor(0.3525) feature loss: tensor(0.1630)
Local adapation with distilling: 0.0001
training loss: tensor(0.3303) feature loss: tensor(0.1640)
Local adapation with distilling: 0.0001
training loss: tensor(0.4463) feature loss: tensor(0.1646)
Global Model Acc on global data: 0.6639 length of data: 10000
-------------Round number:  80  -------------
selected users: [37, 65, 95, 53, 66, 30, 73, 85, 45, 36]
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
all data: 2495
Local adapation with distilling: 0.0001
training loss: tensor(0.3169) feature loss: tensor(0.1487)
Local adapation with distilling: 0.0001
training loss: tensor(0.3710) feature loss: tensor(0.1503)
Local adapation with distilling: 0.0001
training loss: tensor(0.2919) feature loss: tensor(0.1539)
Local adapation with distilling: 0.0001
training loss: tensor(0.3366) feature loss: tensor(0.1556)
Local adapation with distilling: 0.0001
training loss: tensor(0.4525) feature loss: tensor(0.1532)
Local adapation with distilling: 0.0001
training loss: tensor(0.3086) feature loss: tensor(0.1601)
Local adapation with distilling: 0.0001
training loss: tensor(0.3857) feature loss: tensor(0.1474)
Local adapation with distilling: 0.0001
training loss: tensor(0.3065) feature loss: tensor(0.1484)
Local adapation with distilling: 0.0001
training loss: tensor(0.3040) feature loss: tensor(0.1565)
Local adapation with distilling: 0.0001
training loss: tensor(0.3287) feature loss: tensor(0.1538)
Global Model Acc on global data: 0.6641 length of data: 10000
-------------Round number:  81  -------------
selected users: [73, 89, 41, 78, 51, 21, 30, 69, 8, 5]
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
all data: 2532
Local adapation with distilling: 0.0001
training loss: tensor(0.5793) feature loss: tensor(0.1579)
Local adapation with distilling: 0.0001
training loss: tensor(0.3205) feature loss: tensor(0.1662)
Local adapation with distilling: 0.0001
training loss: tensor(0.2718) feature loss: tensor(0.1661)
Local adapation with distilling: 0.0001
training loss: tensor(0.3912) feature loss: tensor(0.1583)
Local adapation with distilling: 0.0001
training loss: tensor(0.4007) feature loss: tensor(0.1690)
Local adapation with distilling: 0.0001
training loss: tensor(0.3835) feature loss: tensor(0.1644)
Local adapation with distilling: 0.0001
training loss: tensor(0.2735) feature loss: tensor(0.1598)
Local adapation with distilling: 0.0001
training loss: tensor(0.2964) feature loss: tensor(0.1718)
Local adapation with distilling: 0.0001
training loss: tensor(0.2677) feature loss: tensor(0.1613)
Local adapation with distilling: 0.0001
training loss: tensor(0.3888) feature loss: tensor(0.1555)
Global Model Acc on global data: 0.6603 length of data: 10000
-------------Round number:  82  -------------
selected users: [72, 33, 58, 2, 55, 84, 54, 75, 28, 40]
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2479
Local adapation with distilling: 0.0001
training loss: tensor(0.6286) feature loss: tensor(0.1686)
Local adapation with distilling: 0.0001
training loss: tensor(0.3248) feature loss: tensor(0.1688)
Local adapation with distilling: 0.0001
training loss: tensor(0.3764) feature loss: tensor(0.1878)
Local adapation with distilling: 0.0001
training loss: tensor(0.3221) feature loss: tensor(0.1685)
Local adapation with distilling: 0.0001
training loss: tensor(0.3521) feature loss: tensor(0.1682)
Local adapation with distilling: 0.0001
training loss: tensor(0.3718) feature loss: tensor(0.1754)
Local adapation with distilling: 0.0001
training loss: tensor(0.4096) feature loss: tensor(0.1738)
Local adapation with distilling: 0.0001
training loss: tensor(0.3847) feature loss: tensor(0.1641)
Local adapation with distilling: 0.0001
training loss: tensor(0.3229) feature loss: tensor(0.1680)
Local adapation with distilling: 0.0001
training loss: tensor(0.3314) feature loss: tensor(0.1703)
Global Model Acc on global data: 0.6621 length of data: 10000
-------------Round number:  83  -------------
selected users: [6, 65, 95, 84, 61, 12, 30, 69, 35, 1]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
all data: 2498
Local adapation with distilling: 0.0001
training loss: tensor(0.4195) feature loss: tensor(0.1796)
Local adapation with distilling: 0.0001
training loss: tensor(0.5136) feature loss: tensor(0.3399)
Local adapation with distilling: 0.0001
training loss: tensor(0.3595) feature loss: tensor(0.1974)
Local adapation with distilling: 0.0001
training loss: tensor(0.6404) feature loss: tensor(0.2773)
Local adapation with distilling: 0.0001
training loss: tensor(0.5621) feature loss: tensor(0.1876)
Local adapation with distilling: 0.0001
training loss: tensor(0.6922) feature loss: tensor(0.2079)
Local adapation with distilling: 0.0001
training loss: tensor(0.4644) feature loss: tensor(0.2388)
Local adapation with distilling: 0.0001
training loss: tensor(0.3599) feature loss: tensor(0.1876)
Local adapation with distilling: 0.0001
training loss: tensor(0.5375) feature loss: tensor(0.2241)
Local adapation with distilling: 0.0001
training loss: tensor(0.4972) feature loss: tensor(0.1943)
Global Model Acc on global data: 0.6643 length of data: 10000
-------------Round number:  84  -------------
selected users: [94, 55, 80, 1, 90, 11, 32, 8, 6, 82]
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([241, 16, 32, 32]) torch.Size([241])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
all data: 2511
Local adapation with distilling: 0.0001
training loss: tensor(0.3162) feature loss: tensor(0.1846)
Local adapation with distilling: 0.0001
training loss: tensor(0.3293) feature loss: tensor(0.1808)
Local adapation with distilling: 0.0001
training loss: tensor(0.2895) feature loss: tensor(0.1846)
Local adapation with distilling: 0.0001
training loss: tensor(0.3716) feature loss: tensor(0.1899)
Local adapation with distilling: 0.0001
training loss: tensor(0.3632) feature loss: tensor(0.1881)
Local adapation with distilling: 0.0001
training loss: tensor(0.4046) feature loss: tensor(0.2040)
Local adapation with distilling: 0.0001
training loss: tensor(0.3371) feature loss: tensor(0.1900)
Local adapation with distilling: 0.0001
training loss: tensor(0.2926) feature loss: tensor(0.1800)
Local adapation with distilling: 0.0001
training loss: tensor(0.3218) feature loss: tensor(0.1904)
Local adapation with distilling: 0.0001
training loss: tensor(0.5912) feature loss: tensor(0.1897)
Global Model Acc on global data: 0.6669 length of data: 10000
-------------Round number:  85  -------------
selected users: [81, 25, 40, 87, 41, 23, 10, 89, 50, 54]
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
all data: 2468
Local adapation with distilling: 0.0001
training loss: tensor(0.3342) feature loss: tensor(0.1758)
Local adapation with distilling: 0.0001
training loss: tensor(0.3449) feature loss: tensor(0.1834)
Local adapation with distilling: 0.0001
training loss: tensor(0.3144) feature loss: tensor(0.1756)
Local adapation with distilling: 0.0001
training loss: tensor(0.3848) feature loss: tensor(0.1807)
Local adapation with distilling: 0.0001
training loss: tensor(0.2937) feature loss: tensor(0.1833)
Local adapation with distilling: 0.0001
training loss: tensor(0.3791) feature loss: tensor(0.1777)
Local adapation with distilling: 0.0001
training loss: tensor(0.3421) feature loss: tensor(0.1782)
Local adapation with distilling: 0.0001
training loss: tensor(0.3238) feature loss: tensor(0.1852)
Local adapation with distilling: 0.0001
training loss: tensor(0.3057) feature loss: tensor(0.1823)
Local adapation with distilling: 0.0001
training loss: tensor(0.3520) feature loss: tensor(0.1785)
Global Model Acc on global data: 0.6648 length of data: 10000
-------------Round number:  86  -------------
selected users: [69, 74, 34, 68, 42, 0, 32, 88, 8, 3]
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
all data: 2485
Local adapation with distilling: 0.0001
training loss: tensor(0.2391) feature loss: tensor(0.1338)
Local adapation with distilling: 0.0001
training loss: tensor(0.2896) feature loss: tensor(0.1332)
Local adapation with distilling: 0.0001
training loss: tensor(0.3073) feature loss: tensor(0.1358)
Local adapation with distilling: 0.0001
training loss: tensor(0.2609) feature loss: tensor(0.1370)
Local adapation with distilling: 0.0001
training loss: tensor(0.2510) feature loss: tensor(0.1338)
Local adapation with distilling: 0.0001
training loss: tensor(0.3344) feature loss: tensor(0.1340)
Local adapation with distilling: 0.0001
training loss: tensor(0.2652) feature loss: tensor(0.1347)
Local adapation with distilling: 0.0001
training loss: tensor(0.2909) feature loss: tensor(0.1345)
Local adapation with distilling: 0.0001
training loss: tensor(0.2233) feature loss: tensor(0.1319)
Local adapation with distilling: 0.0001
training loss: tensor(0.2770) feature loss: tensor(0.1331)
Global Model Acc on global data: 0.6686 length of data: 10000
-------------Round number:  87  -------------
selected users: [16, 81, 85, 32, 39, 25, 26, 29, 65, 7]
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([522, 16, 32, 32]) torch.Size([522])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
all data: 2523
Local adapation with distilling: 0.0001
training loss: tensor(0.3050) feature loss: tensor(0.1565)
Local adapation with distilling: 0.0001
training loss: tensor(0.2886) feature loss: tensor(0.1624)
Local adapation with distilling: 0.0001
training loss: tensor(0.2790) feature loss: tensor(0.1543)
Local adapation with distilling: 0.0001
training loss: tensor(0.2916) feature loss: tensor(0.1550)
Local adapation with distilling: 0.0001
training loss: tensor(0.3160) feature loss: tensor(0.1591)
Local adapation with distilling: 0.0001
training loss: tensor(0.2992) feature loss: tensor(0.1563)
Local adapation with distilling: 0.0001
training loss: tensor(0.9821) feature loss: tensor(0.1618)
Local adapation with distilling: 0.0001
training loss: tensor(0.3651) feature loss: tensor(0.1592)
Local adapation with distilling: 0.0001
training loss: tensor(0.2990) feature loss: tensor(0.1584)
Local adapation with distilling: 0.0001
training loss: tensor(0.3088) feature loss: tensor(0.1642)
Global Model Acc on global data: 0.6702 length of data: 10000
-------------Round number:  88  -------------
selected users: [95, 53, 43, 84, 2, 74, 55, 31, 54, 97]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
all data: 2493
Local adapation with distilling: 0.0001
training loss: tensor(0.2563) feature loss: tensor(0.1610)
Local adapation with distilling: 0.0001
training loss: tensor(0.3070) feature loss: tensor(0.1671)
Local adapation with distilling: 0.0001
training loss: tensor(0.2959) feature loss: tensor(0.1612)
Local adapation with distilling: 0.0001
training loss: tensor(0.2729) feature loss: tensor(0.1568)
Local adapation with distilling: 0.0001
training loss: tensor(0.3253) feature loss: tensor(0.1569)
Local adapation with distilling: 0.0001
training loss: tensor(0.3018) feature loss: tensor(0.1542)
Local adapation with distilling: 0.0001
training loss: tensor(0.2817) feature loss: tensor(0.1570)
Local adapation with distilling: 0.0001
training loss: tensor(0.3075) feature loss: tensor(0.1640)
Local adapation with distilling: 0.0001
training loss: tensor(0.3115) feature loss: tensor(0.1582)
Local adapation with distilling: 0.0001
training loss: tensor(0.3209) feature loss: tensor(0.1569)
Global Model Acc on global data: 0.6661 length of data: 10000
-------------Round number:  89  -------------
selected users: [65, 21, 87, 6, 46, 74, 44, 60, 72, 5]
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
all data: 2490
Local adapation with distilling: 0.0001
training loss: tensor(0.2772) feature loss: tensor(0.1499)
Local adapation with distilling: 0.0001
training loss: tensor(0.3825) feature loss: tensor(0.1534)
Local adapation with distilling: 0.0001
training loss: tensor(0.3396) feature loss: tensor(0.1478)
Local adapation with distilling: 0.0001
training loss: tensor(0.2961) feature loss: tensor(0.1452)
Local adapation with distilling: 0.0001
training loss: tensor(0.3284) feature loss: tensor(0.1473)
Local adapation with distilling: 0.0001
training loss: tensor(0.2743) feature loss: tensor(0.1465)
Local adapation with distilling: 0.0001
training loss: tensor(0.2980) feature loss: tensor(0.1497)
Local adapation with distilling: 0.0001
training loss: tensor(0.2882) feature loss: tensor(0.1464)
Local adapation with distilling: 0.0001
training loss: tensor(0.4655) feature loss: tensor(0.1532)
Local adapation with distilling: 0.0001
training loss: tensor(0.3180) feature loss: tensor(0.1488)
Global Model Acc on global data: 0.6679 length of data: 10000
-------------Round number:  90  -------------
selected users: [25, 85, 96, 89, 65, 94, 5, 35, 36, 92]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([480, 16, 32, 32]) torch.Size([480])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([527, 16, 32, 32]) torch.Size([527])
random features: torch.Size([263, 16, 32, 32]) torch.Size([263])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
all data: 2503
Local adapation with distilling: 0.0001
training loss: tensor(0.2988) feature loss: tensor(0.1908)
Local adapation with distilling: 0.0001
training loss: tensor(0.2739) feature loss: tensor(0.1755)
Local adapation with distilling: 0.0001
training loss: tensor(0.3712) feature loss: tensor(0.1903)
Local adapation with distilling: 0.0001
training loss: tensor(0.2892) feature loss: tensor(0.1730)
Local adapation with distilling: 0.0001
training loss: tensor(0.2691) feature loss: tensor(0.1614)
Local adapation with distilling: 0.0001
training loss: tensor(0.2785) feature loss: tensor(0.1710)
Local adapation with distilling: 0.0001
training loss: tensor(0.2958) feature loss: tensor(0.1683)
Local adapation with distilling: 0.0001
training loss: tensor(0.3705) feature loss: tensor(0.1548)
Local adapation with distilling: 0.0001
training loss: tensor(0.3485) feature loss: tensor(0.1734)
Local adapation with distilling: 0.0001
training loss: tensor(0.4048) feature loss: tensor(0.1674)
Global Model Acc on global data: 0.6648 length of data: 10000
-------------Round number:  91  -------------
selected users: [75, 25, 3, 52, 78, 54, 59, 26, 62, 97]
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([232, 16, 32, 32]) torch.Size([232])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([257, 16, 32, 32]) torch.Size([257])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
all data: 2508
Local adapation with distilling: 0.0001
training loss: tensor(0.3775) feature loss: tensor(0.1708)
Local adapation with distilling: 0.0001
training loss: tensor(0.2960) feature loss: tensor(0.1708)
Local adapation with distilling: 0.0001
training loss: tensor(0.3416) feature loss: tensor(0.1794)
Local adapation with distilling: 0.0001
training loss: tensor(0.3327) feature loss: tensor(0.1750)
Local adapation with distilling: 0.0001
training loss: tensor(0.3584) feature loss: tensor(0.1659)
Local adapation with distilling: 0.0001
training loss: tensor(0.3489) feature loss: tensor(0.1680)
Local adapation with distilling: 0.0001
training loss: tensor(0.9577) feature loss: tensor(0.1728)
Local adapation with distilling: 0.0001
training loss: tensor(0.8003) feature loss: tensor(0.1801)
Local adapation with distilling: 0.0001
training loss: tensor(0.3646) feature loss: tensor(0.1728)
Local adapation with distilling: 0.0001
training loss: tensor(0.3657) feature loss: tensor(0.1694)
Global Model Acc on global data: 0.662 length of data: 10000
-------------Round number:  92  -------------
selected users: [25, 99, 73, 61, 66, 36, 23, 83, 77, 6]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([288, 16, 32, 32]) torch.Size([288])
K 2 torch.Size([499, 16, 32, 32]) torch.Size([499])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2529
Local adapation with distilling: 0.0001
training loss: tensor(0.3485) feature loss: tensor(0.1769)
Local adapation with distilling: 0.0001
training loss: tensor(0.4527) feature loss: tensor(0.1883)
Local adapation with distilling: 0.0001
training loss: tensor(0.4176) feature loss: tensor(0.1808)
Local adapation with distilling: 0.0001
training loss: tensor(0.4501) feature loss: tensor(0.1855)
Local adapation with distilling: 0.0001
training loss: tensor(0.4887) feature loss: tensor(0.1773)
Local adapation with distilling: 0.0001
training loss: tensor(0.3897) feature loss: tensor(0.1870)
Local adapation with distilling: 0.0001
training loss: tensor(0.4502) feature loss: tensor(0.1851)
Local adapation with distilling: 0.0001
training loss: tensor(0.3908) feature loss: tensor(0.1868)
Local adapation with distilling: 0.0001
training loss: tensor(0.5449) feature loss: tensor(0.1753)
Local adapation with distilling: 0.0001
training loss: tensor(0.3832) feature loss: tensor(0.1804)
Global Model Acc on global data: 0.6669 length of data: 10000
-------------Round number:  93  -------------
selected users: [75, 82, 56, 27, 42, 35, 1, 97, 66, 61]
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([516, 16, 32, 32]) torch.Size([516])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([264, 16, 32, 32]) torch.Size([264])
all data: 2494
Local adapation with distilling: 0.0001
training loss: tensor(0.3252) feature loss: tensor(0.1606)
Local adapation with distilling: 0.0001
training loss: tensor(0.4252) feature loss: tensor(0.1670)
Local adapation with distilling: 0.0001
training loss: tensor(0.3484) feature loss: tensor(0.1685)
Local adapation with distilling: 0.0001
training loss: tensor(0.3346) feature loss: tensor(0.1666)
Local adapation with distilling: 0.0001
training loss: tensor(0.2899) feature loss: tensor(0.1622)
Local adapation with distilling: 0.0001
training loss: tensor(0.3399) feature loss: tensor(0.1596)
Local adapation with distilling: 0.0001
training loss: tensor(0.3678) feature loss: tensor(0.1716)
Local adapation with distilling: 0.0001
training loss: tensor(0.3130) feature loss: tensor(0.1730)
Local adapation with distilling: 0.0001
training loss: tensor(0.3648) feature loss: tensor(0.1627)
Local adapation with distilling: 0.0001
training loss: tensor(0.3375) feature loss: tensor(0.1689)
Global Model Acc on global data: 0.6675 length of data: 10000
-------------Round number:  94  -------------
selected users: [13, 73, 5, 18, 99, 48, 23, 4, 35, 17]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([240, 16, 32, 32]) torch.Size([240])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([255, 16, 32, 32]) torch.Size([255])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
all data: 2498
Local adapation with distilling: 0.0001
training loss: tensor(0.7354) feature loss: tensor(0.2815)
Local adapation with distilling: 0.0001
training loss: tensor(0.4060) feature loss: tensor(0.2226)
Local adapation with distilling: 0.0001
training loss: tensor(0.3151) feature loss: tensor(0.1549)
Local adapation with distilling: 0.0001
training loss: tensor(0.3421) feature loss: tensor(0.1523)
Local adapation with distilling: 0.0001
training loss: tensor(0.4015) feature loss: tensor(0.1973)
Local adapation with distilling: 0.0001
training loss: tensor(0.4503) feature loss: tensor(0.1932)
Local adapation with distilling: 0.0001
training loss: tensor(0.3445) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.4494) feature loss: tensor(0.1855)
Local adapation with distilling: 0.0001
training loss: tensor(0.3625) feature loss: tensor(0.1880)
Local adapation with distilling: 0.0001
training loss: tensor(0.3265) feature loss: tensor(0.1771)
Global Model Acc on global data: 0.6651 length of data: 10000
-------------Round number:  95  -------------
selected users: [88, 9, 1, 60, 95, 26, 45, 71, 44, 21]
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([509, 16, 32, 32]) torch.Size([509])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([256, 16, 32, 32]) torch.Size([256])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([521, 16, 32, 32]) torch.Size([521])
random features: torch.Size([260, 16, 32, 32]) torch.Size([260])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
all data: 2497
Local adapation with distilling: 0.0001
training loss: tensor(0.8229) feature loss: tensor(0.6140)
Local adapation with distilling: 0.0001
training loss: tensor(0.9410) feature loss: tensor(0.6821)
Local adapation with distilling: 0.0001
training loss: tensor(0.3834) feature loss: tensor(0.2167)
Local adapation with distilling: 0.0001
training loss: tensor(0.3592) feature loss: tensor(0.2295)
Local adapation with distilling: 0.0001
training loss: tensor(0.3347) feature loss: tensor(0.2012)
Local adapation with distilling: 0.0001
training loss: tensor(1.5262) feature loss: tensor(0.2311)
Local adapation with distilling: 0.0001
training loss: tensor(0.6049) feature loss: tensor(0.4631)
Local adapation with distilling: 0.0001
training loss: tensor(0.4001) feature loss: tensor(0.2176)
Local adapation with distilling: 0.0001
training loss: tensor(0.3709) feature loss: tensor(0.2412)
Local adapation with distilling: 0.0001
training loss: tensor(0.6542) feature loss: tensor(0.4716)
Global Model Acc on global data: 0.6692 length of data: 10000
-------------Round number:  96  -------------
selected users: [41, 28, 52, 15, 87, 17, 75, 42, 45, 49]
K 2 torch.Size([501, 16, 32, 32]) torch.Size([501])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([267, 16, 32, 32]) torch.Size([267])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([497, 16, 32, 32]) torch.Size([497])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
all data: 2520
Local adapation with distilling: 0.0001
training loss: tensor(0.2485) feature loss: tensor(0.1704)
Local adapation with distilling: 0.0001
training loss: tensor(0.2806) feature loss: tensor(0.1606)
Local adapation with distilling: 0.0001
training loss: tensor(0.2603) feature loss: tensor(0.1579)
Local adapation with distilling: 0.0001
training loss: tensor(0.3070) feature loss: tensor(0.1598)
Local adapation with distilling: 0.0001
training loss: tensor(0.2929) feature loss: tensor(0.1578)
Local adapation with distilling: 0.0001
training loss: tensor(0.2458) feature loss: tensor(0.1607)
Local adapation with distilling: 0.0001
training loss: tensor(0.2695) feature loss: tensor(0.1619)
Local adapation with distilling: 0.0001
training loss: tensor(0.2395) feature loss: tensor(0.1605)
Local adapation with distilling: 0.0001
training loss: tensor(0.2673) feature loss: tensor(0.1654)
Local adapation with distilling: 0.0001
training loss: tensor(0.2888) feature loss: tensor(0.1667)
Global Model Acc on global data: 0.6655 length of data: 10000
-------------Round number:  97  -------------
selected users: [31, 43, 64, 56, 85, 2, 70, 21, 34, 50]
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([261, 16, 32, 32]) torch.Size([261])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([254, 16, 32, 32]) torch.Size([254])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([246, 16, 32, 32]) torch.Size([246])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([238, 16, 32, 32]) torch.Size([238])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([258, 16, 32, 32]) torch.Size([258])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([245, 16, 32, 32]) torch.Size([245])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([252, 16, 32, 32]) torch.Size([252])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([467, 16, 32, 32]) torch.Size([467])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
all data: 2469
Local adapation with distilling: 0.0001
training loss: tensor(0.2779) feature loss: tensor(0.1368)
Local adapation with distilling: 0.0001
training loss: tensor(0.2550) feature loss: tensor(0.1312)
Local adapation with distilling: 0.0001
training loss: tensor(0.2726) feature loss: tensor(0.1317)
Local adapation with distilling: 0.0001
training loss: tensor(0.2619) feature loss: tensor(0.1326)
Local adapation with distilling: 0.0001
training loss: tensor(0.2139) feature loss: tensor(0.1369)
Local adapation with distilling: 0.0001
training loss: tensor(0.2779) feature loss: tensor(0.1383)
Local adapation with distilling: 0.0001
training loss: tensor(0.2536) feature loss: tensor(0.1322)
Local adapation with distilling: 0.0001
training loss: tensor(0.2722) feature loss: tensor(0.1380)
Local adapation with distilling: 0.0001
training loss: tensor(0.2667) feature loss: tensor(0.1368)
Local adapation with distilling: 0.0001
training loss: tensor(0.2360) feature loss: tensor(0.1455)
Global Model Acc on global data: 0.6626 length of data: 10000
-------------Round number:  98  -------------
selected users: [11, 48, 97, 14, 22, 36, 99, 47, 33, 81]
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([479, 16, 32, 32]) torch.Size([479])
random features: torch.Size([239, 16, 32, 32]) torch.Size([239])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([489, 16, 32, 32]) torch.Size([489])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([251, 16, 32, 32]) torch.Size([251])
K 2 torch.Size([530, 16, 32, 32]) torch.Size([530])
random features: torch.Size([265, 16, 32, 32]) torch.Size([265])
all data: 2505
Local adapation with distilling: 0.0001
training loss: tensor(0.4248) feature loss: tensor(0.1812)
Local adapation with distilling: 0.0001
training loss: tensor(0.3065) feature loss: tensor(0.1704)
Local adapation with distilling: 0.0001
training loss: tensor(0.3233) feature loss: tensor(0.1893)
Local adapation with distilling: 0.0001
training loss: tensor(0.3518) feature loss: tensor(0.1869)
Local adapation with distilling: 0.0001
training loss: tensor(0.3134) feature loss: tensor(0.1759)
Local adapation with distilling: 0.0001
training loss: tensor(0.3153) feature loss: tensor(0.1709)
Local adapation with distilling: 0.0001
training loss: tensor(0.3373) feature loss: tensor(0.1804)
Local adapation with distilling: 0.0001
training loss: tensor(0.3803) feature loss: tensor(0.1786)
Local adapation with distilling: 0.0001
training loss: tensor(0.3219) feature loss: tensor(0.1971)
Local adapation with distilling: 0.0001
training loss: tensor(0.2932) feature loss: tensor(0.1815)
Global Model Acc on global data: 0.6635 length of data: 10000
-------------Round number:  99  -------------
selected users: [14, 34, 30, 78, 16, 15, 91, 38, 10, 85]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([248, 16, 32, 32]) torch.Size([248])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([233, 16, 32, 32]) torch.Size([233])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([243, 16, 32, 32]) torch.Size([243])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([259, 16, 32, 32]) torch.Size([259])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([242, 16, 32, 32]) torch.Size([242])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([266, 16, 32, 32]) torch.Size([266])
K 2 torch.Size([494, 16, 32, 32]) torch.Size([494])
random features: torch.Size([247, 16, 32, 32]) torch.Size([247])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([253, 16, 32, 32]) torch.Size([253])
K 2 torch.Size([488, 16, 32, 32]) torch.Size([488])
random features: torch.Size([244, 16, 32, 32]) torch.Size([244])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([249, 16, 32, 32]) torch.Size([249])
all data: 2484
Local adapation with distilling: 0.0001
training loss: tensor(0.2361) feature loss: tensor(0.1342)
Local adapation with distilling: 0.0001
training loss: tensor(0.2531) feature loss: tensor(0.1269)
Local adapation with distilling: 0.0001
training loss: tensor(0.2378) feature loss: tensor(0.1332)
Local adapation with distilling: 0.0001
training loss: tensor(0.2589) feature loss: tensor(0.1298)
Local adapation with distilling: 0.0001
training loss: tensor(0.2468) feature loss: tensor(0.1305)
Local adapation with distilling: 0.0001
training loss: tensor(0.2443) feature loss: tensor(0.1288)
Local adapation with distilling: 0.0001
training loss: tensor(0.2382) feature loss: tensor(0.1303)
Local adapation with distilling: 0.0001
training loss: tensor(0.2291) feature loss: tensor(0.1317)
Local adapation with distilling: 0.0001
training loss: tensor(0.2590) feature loss: tensor(0.1281)
Local adapation with distilling: 0.0001
training loss: tensor(0.2105) feature loss: tensor(0.1264)
Global Model Acc on global data: 0.6657 length of data: 10000
