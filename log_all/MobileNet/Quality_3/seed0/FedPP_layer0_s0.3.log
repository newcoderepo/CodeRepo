nohup: ignoring input
================================================================================
Summary of training process:
Dataset:                 Cifar10
Batch size:              64
Learing rate :           0.001
personal learning rate : 0.001
Number of total clients: 100
Split parameter        : 3.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 0
Feature reduction      : 64
Local training loss    : CE_KL2
Loss of beta           : 1.0
Algorithm              : FedPP
Modelname              : MOBNET
Mode                   : training
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,0.298,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.327,0.00,496
Client   1,0.00,0.321,0.00,0.00,0.00,0.358,0.00,0.00,0.00,0.321,520
Client   2,0.307,0.346,0.346,0.00,0.00,0.00,0.00,0.00,0.00,0.00,482
Client   3,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client   4,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client   5,0.00,0.00,0.327,0.00,0.308,0.365,0.00,0.00,0.00,0.00,510
Client   6,0.00,0.00,0.319,0.00,0.300,0.00,0.382,0.00,0.00,0.00,524
Client   7,0.00,0.00,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.351,476
Client   8,0.00,0.347,0.00,0.00,0.00,0.00,0.00,0.316,0.337,0.00,481
Client   9,0.286,0.00,0.00,0.00,0.00,0.00,0.389,0.00,0.00,0.325,514
Client  10,0.315,0.00,0.00,0.00,0.00,0.00,0.00,0.326,0.00,0.358,466
Client  11,0.00,0.313,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.313,534
Client  12,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  13,0.00,0.329,0.00,0.352,0.00,0.00,0.00,0.00,0.319,0.00,508
Client  14,0.00,0.00,0.00,0.359,0.315,0.00,0.00,0.00,0.325,0.00,498
Client  15,0.00,0.00,0.00,0.00,0.00,0.361,0.00,0.00,0.315,0.324,515
Client  16,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client  17,0.00,0.00,0.00,0.00,0.00,0.346,0.372,0.283,0.00,0.00,538
Client  18,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.00,0.327,0.337,496
Client  19,0.00,0.00,0.00,0.356,0.312,0.00,0.00,0.00,0.00,0.332,503
Client  20,0.309,0.351,0.00,0.00,0.00,0.00,0.00,0.00,0.340,0.00,476
Client  21,0.312,0.355,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.00,471
Client  22,0.00,0.00,0.326,0.349,0.00,0.00,0.00,0.00,0.00,0.326,513
Client  23,0.298,0.00,0.339,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  24,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client  25,0.00,0.00,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.331,504
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,0.378,0.00,0.306,0.316,529
Client  27,0.00,0.00,0.00,0.368,0.320,0.00,0.00,0.312,0.00,0.00,487
Client  28,0.00,0.00,0.00,0.00,0.00,0.360,0.00,0.00,0.315,0.325,514
Client  29,0.00,0.00,0.00,0.328,0.00,0.00,0.366,0.00,0.00,0.306,546
Client  30,0.309,0.00,0.352,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  31,0.00,0.344,0.00,0.00,0.00,0.00,0.00,0.313,0.00,0.344,486
Client  32,0.00,0.00,0.335,0.359,0.00,0.00,0.00,0.305,0.00,0.00,498
Client  33,0.302,0.00,0.00,0.368,0.00,0.00,0.00,0.00,0.331,0.00,487
Client  34,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  35,0.00,0.315,0.00,0.337,0.00,0.348,0.00,0.00,0.00,0.00,531
Client  36,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  37,0.00,0.00,0.00,0.00,0.307,0.00,0.394,0.299,0.00,0.00,508
Client  38,0.00,0.00,0.00,0.00,0.00,0.339,0.366,0.00,0.295,0.00,546
Client  39,0.00,0.00,0.322,0.00,0.00,0.356,0.00,0.00,0.00,0.322,519
Client  40,0.320,0.00,0.00,0.00,0.00,0.00,0.00,0.330,0.350,0.00,460
Client  41,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  42,0.00,0.00,0.352,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  43,0.298,0.00,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.339,493
Client  44,0.313,0.00,0.355,0.00,0.332,0.00,0.00,0.00,0.00,0.00,470
Client  45,0.00,0.331,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.00,504
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,0.385,0.293,0.00,0.322,519
Client  47,0.00,0.00,0.00,0.00,0.333,0.00,0.00,0.323,0.344,0.00,468
Client  48,0.309,0.352,0.00,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  49,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.325,0.337,495
Client  50,0.298,0.339,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  51,0.00,0.344,0.344,0.00,0.00,0.00,0.00,0.311,0.00,0.00,485
Client  52,0.286,0.00,0.325,0.00,0.00,0.00,0.389,0.00,0.00,0.00,514
Client  53,0.00,0.00,0.326,0.350,0.00,0.00,0.00,0.00,0.00,0.324,512
Client  54,0.00,0.00,0.319,0.00,0.298,0.00,0.382,0.00,0.00,0.00,523
Client  55,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  56,0.00,0.303,0.00,0.00,0.00,0.335,0.362,0.00,0.00,0.00,552
Client  57,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  58,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  59,0.00,0.322,0.00,0.00,0.00,0.357,0.00,0.00,0.00,0.320,518
Client  60,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  61,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  62,0.316,0.00,0.359,0.00,0.00,0.00,0.00,0.325,0.00,0.00,465
Client  63,0.00,0.00,0.00,0.354,0.00,0.00,0.00,0.00,0.318,0.328,506
Client  64,0.00,0.00,0.00,0.00,0.317,0.376,0.00,0.307,0.00,0.00,492
Client  65,0.295,0.00,0.00,0.00,0.00,0.371,0.00,0.00,0.00,0.333,498
Client  66,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  67,0.00,0.351,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.00,473
Client  68,0.00,0.00,0.00,0.00,0.302,0.00,0.387,0.00,0.311,0.00,517
Client  69,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.327,0.337,493
Client  70,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  71,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  72,0.00,0.00,0.324,0.00,0.00,0.361,0.00,0.00,0.314,0.00,512
Client  73,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  74,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  75,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  76,0.00,0.00,0.00,0.333,0.292,0.00,0.375,0.00,0.00,0.00,534
Client  77,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  78,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  79,0.00,0.333,0.333,0.00,0.00,0.00,0.00,0.00,0.00,0.333,498
Client  80,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  81,0.287,0.324,0.00,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  82,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  83,0.00,0.00,0.329,0.352,0.00,0.00,0.00,0.00,0.319,0.00,505
Client  84,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  85,0.00,0.00,0.00,0.00,0.311,0.369,0.00,0.00,0.321,0.00,502
Client  86,0.00,0.00,0.312,0.00,0.00,0.00,0.376,0.00,0.00,0.312,532
Client  87,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  88,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  89,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  90,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  91,0.00,0.314,0.00,0.336,0.00,0.350,0.00,0.00,0.00,0.00,529
Client  92,0.313,0.00,0.354,0.00,0.333,0.00,0.00,0.00,0.00,0.00,469
Client  93,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  94,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  95,0.00,0.331,0.00,0.00,0.00,0.369,0.00,0.301,0.00,0.00,502
Client  96,0.287,0.00,0.324,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  97,0.00,0.00,0.347,0.00,0.00,0.00,0.00,0.316,0.337,0.00,478
Client  98,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  99,0.313,0.00,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.354,469
0 [0 5 8] [0 5 8] [1 2 3 4 6 7 9]
0 training: Counter({5: 186, 8: 162, 0: 148}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000})
1 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
1 training: Counter({5: 186, 1: 167, 9: 167}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
2 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
2 training: Counter({1: 167, 2: 167, 0: 148}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
3 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
3 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
4 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
4 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
5 [2 4 5] [2 4 5] [0 1 3 6 7 8 9]
5 training: Counter({5: 186, 2: 167, 4: 157}) testing iid: Counter({5: 1000, 4: 1000, 2: 1000})
6 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
6 training: Counter({6: 200, 2: 167, 4: 157}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
7 [4 7 9] [4 7 9] [0 1 2 3 5 6 8]
7 training: Counter({9: 167, 4: 157, 7: 152}) testing iid: Counter({9: 1000, 7: 1000, 4: 1000})
8 [1 7 8] [1 7 8] [0 2 3 4 5 6 9]
8 training: Counter({1: 167, 8: 162, 7: 152}) testing iid: Counter({8: 1000, 1: 1000, 7: 1000})
9 [0 6 9] [0 6 9] [1 2 3 4 5 7 8]
9 training: Counter({6: 200, 9: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000})
10 [0 7 9] [0 7 9] [1 2 3 4 5 6 8]
10 training: Counter({9: 167, 7: 152, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 7: 1000})
11 [1 6 9] [1 6 9] [0 2 3 4 5 7 8]
11 training: Counter({6: 200, 1: 167, 9: 167}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000})
12 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
12 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
13 [1 3 8] [1 3 8] [0 2 4 5 6 7 9]
13 training: Counter({3: 179, 1: 167, 8: 162}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000})
14 [3 4 8] [3 4 8] [0 1 2 5 6 7 9]
14 training: Counter({3: 179, 8: 162, 4: 157}) testing iid: Counter({3: 1000, 8: 1000, 4: 1000})
15 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
15 training: Counter({5: 186, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
16 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
16 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
17 [5 6 7] [5 6 7] [0 1 2 3 4 8 9]
17 training: Counter({6: 200, 5: 186, 7: 152}) testing iid: Counter({6: 1000, 5: 1000, 7: 1000})
18 [1 8 9] [1 8 9] [0 2 3 4 5 6 7]
18 training: Counter({1: 167, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000})
19 [3 4 9] [3 4 9] [0 1 2 5 6 7 8]
19 training: Counter({3: 179, 9: 167, 4: 157}) testing iid: Counter({3: 1000, 9: 1000, 4: 1000})
20 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
20 training: Counter({1: 167, 8: 162, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
21 [0 1 4] [0 1 4] [2 3 5 6 7 8 9]
21 training: Counter({1: 167, 4: 157, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 4: 1000})
22 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
22 training: Counter({3: 179, 2: 167, 9: 167}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
23 [0 2 3] [0 2 3] [1 4 5 6 7 8 9]
23 training: Counter({3: 179, 2: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 2: 1000})
24 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
24 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
25 [5 7 9] [5 7 9] [0 1 2 3 4 6 8]
25 training: Counter({5: 185, 9: 167, 7: 152}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000})
26 [6 8 9] [6 8 9] [0 1 2 3 4 5 7]
26 training: Counter({6: 200, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000})
27 [3 4 7] [3 4 7] [0 1 2 5 6 8 9]
27 training: Counter({3: 179, 4: 156, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 4: 1000})
28 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
28 training: Counter({5: 185, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
29 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
29 training: Counter({6: 200, 3: 179, 9: 167}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
30 [0 2 8] [0 2 8] [1 3 4 5 6 7 9]
30 training: Counter({2: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 2: 1000})
31 [1 7 9] [1 7 9] [0 2 3 4 5 6 8]
31 training: Counter({1: 167, 9: 167, 7: 152}) testing iid: Counter({1: 1000, 9: 1000, 7: 1000})
32 [2 3 7] [2 3 7] [0 1 4 5 6 8 9]
32 training: Counter({3: 179, 2: 167, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 2: 1000})
33 [0 3 8] [0 3 8] [1 2 4 5 6 7 9]
33 training: Counter({3: 179, 8: 161, 0: 147}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000})
34 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
34 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
35 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
35 training: Counter({5: 185, 3: 179, 1: 167}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
36 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
36 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
37 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
37 training: Counter({6: 200, 4: 156, 7: 152}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
38 [5 6 8] [5 6 8] [0 1 2 3 4 7 9]
38 training: Counter({6: 200, 5: 185, 8: 161}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000})
39 [2 5 9] [2 5 9] [0 1 3 4 6 7 8]
39 training: Counter({5: 185, 2: 167, 9: 167}) testing iid: Counter({9: 1000, 5: 1000, 2: 1000})
40 [0 7 8] [0 7 8] [1 2 3 4 5 6 9]
40 training: Counter({8: 161, 7: 152, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 7: 1000})
41 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
41 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
42 [2 4 7] [2 4 7] [0 1 3 5 6 8 9]
42 training: Counter({2: 167, 4: 156, 7: 152}) testing iid: Counter({7: 1000, 4: 1000, 2: 1000})
43 [0 3 9] [0 3 9] [1 2 4 5 6 7 8]
43 training: Counter({3: 179, 9: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000})
44 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
44 training: Counter({2: 167, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
45 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
45 training: Counter({5: 185, 1: 167, 7: 152}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
46 [6 7 9] [6 7 9] [0 1 2 3 4 5 8]
46 training: Counter({6: 200, 9: 167, 7: 152}) testing iid: Counter({6: 1000, 9: 1000, 7: 1000})
47 [4 7 8] [4 7 8] [0 1 2 3 5 6 9]
47 training: Counter({8: 161, 4: 156, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 4: 1000})
48 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
48 training: Counter({1: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
49 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
49 training: Counter({2: 167, 9: 167, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
50 [0 1 3] [0 1 3] [2 4 5 6 7 8 9]
50 training: Counter({3: 179, 1: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000})
51 [1 2 7] [1 2 7] [0 3 4 5 6 8 9]
51 training: Counter({1: 167, 2: 167, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 2: 1000})
52 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
52 training: Counter({6: 200, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
53 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
53 training: Counter({3: 179, 2: 167, 9: 166}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
54 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
54 training: Counter({6: 200, 2: 167, 4: 156}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
55 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
55 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
56 [1 5 6] [1 5 6] [0 2 3 4 7 8 9]
56 training: Counter({6: 200, 5: 185, 1: 167}) testing iid: Counter({6: 1000, 1: 1000, 5: 1000})
57 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
57 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
58 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
58 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
59 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
59 training: Counter({5: 185, 1: 167, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
60 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
60 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
61 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
61 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
62 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
62 training: Counter({2: 167, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
63 [3 8 9] [3 8 9] [0 1 2 4 5 6 7]
63 training: Counter({3: 179, 9: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 9: 1000})
64 [4 5 7] [4 5 7] [0 1 2 3 6 8 9]
64 training: Counter({5: 185, 4: 156, 7: 151}) testing iid: Counter({5: 1000, 7: 1000, 4: 1000})
65 [0 5 9] [0 5 9] [1 2 3 4 6 7 8]
65 training: Counter({5: 185, 9: 166, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 5: 1000})
66 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
66 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
67 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
67 training: Counter({1: 166, 4: 156, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
68 [4 6 8] [4 6 8] [0 1 2 3 5 7 9]
68 training: Counter({6: 200, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 6: 1000, 4: 1000})
69 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
69 training: Counter({2: 166, 9: 166, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
70 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
70 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
71 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
71 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
72 [2 5 8] [2 5 8] [0 1 3 4 6 7 9]
72 training: Counter({5: 185, 2: 166, 8: 161}) testing iid: Counter({8: 1000, 5: 1000, 2: 1000})
73 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
73 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
74 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
74 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
75 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
75 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
76 [3 4 6] [3 4 6] [0 1 2 5 7 8 9]
76 training: Counter({6: 200, 3: 178, 4: 156}) testing iid: Counter({3: 1000, 6: 1000, 4: 1000})
77 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
77 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
78 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
78 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
79 [1 2 9] [1 2 9] [0 3 4 5 6 7 8]
79 training: Counter({1: 166, 2: 166, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 2: 1000})
80 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
80 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
81 [0 1 6] [0 1 6] [2 3 4 5 7 8 9]
81 training: Counter({6: 200, 1: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000})
82 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
82 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
83 [2 3 8] [2 3 8] [0 1 4 5 6 7 9]
83 training: Counter({3: 178, 2: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 2: 1000})
84 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
84 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
85 [4 5 8] [4 5 8] [0 1 2 3 6 7 9]
85 training: Counter({5: 185, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 5: 1000, 4: 1000})
86 [2 6 9] [2 6 9] [0 1 3 4 5 7 8]
86 training: Counter({6: 200, 2: 166, 9: 166}) testing iid: Counter({6: 1000, 9: 1000, 2: 1000})
87 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
87 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
88 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
88 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
89 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
89 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
90 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
90 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
91 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
91 training: Counter({5: 185, 3: 178, 1: 166}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
92 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
92 training: Counter({2: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
93 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
93 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
94 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
94 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
95 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
95 training: Counter({5: 185, 1: 166, 7: 151}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
96 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
96 training: Counter({6: 200, 2: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
97 [2 7 8] [2 7 8] [0 1 3 4 5 6 9]
97 training: Counter({2: 166, 8: 161, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 2: 1000})
98 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
98 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
99 [0 4 9] [0 4 9] [1 2 3 5 6 7 8]
99 training: Counter({9: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 4: 1000})
Num_samples of Training set per client: [496, 520, 482, 531, 491, 510, 524, 476, 481, 514, 466, 534, 481, 508, 498, 515, 531, 538, 496, 503, 476, 471, 513, 493, 491, 504, 529, 487, 514, 546, 475, 486, 498, 487, 475, 531, 508, 508, 546, 519, 460, 475, 475, 493, 470, 504, 519, 468, 475, 495, 493, 485, 514, 512, 523, 483, 552, 507, 508, 518, 481, 507, 465, 506, 492, 498, 544, 473, 517, 493, 483, 507, 512, 524, 483, 483, 534, 464, 524, 498, 481, 513, 464, 505, 481, 502, 532, 476, 483, 544, 476, 529, 469, 524, 507, 502, 513, 478, 483, 469]
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:04<07:19,  4.44s/it]  2%|▏         | 2/100 [00:05<05:27,  3.34s/it]  3%|▎         | 3/100 [00:05<04:08,  2.57s/it]  4%|▍         | 4/100 [00:06<03:14,  2.02s/it]  5%|▌         | 5/100 [00:07<02:36,  1.65s/it]  6%|▌         | 6/100 [00:08<02:10,  1.38s/it]  7%|▋         | 7/100 [00:09<01:51,  1.20s/it]  8%|▊         | 8/100 [00:09<01:38,  1.07s/it]  9%|▉         | 9/100 [00:10<01:27,  1.03it/s] 10%|█         | 10/100 [00:11<01:20,  1.12it/s] 11%|█         | 11/100 [00:11<01:14,  1.19it/s] 12%|█▏        | 12/100 [00:12<01:10,  1.25it/s] 13%|█▎        | 13/100 [00:13<01:07,  1.29it/s] 14%|█▍        | 14/100 [00:14<01:04,  1.33it/s] 15%|█▌        | 15/100 [00:14<01:03,  1.34it/s] 16%|█▌        | 16/100 [00:15<01:02,  1.35it/s] 17%|█▋        | 17/100 [00:16<01:00,  1.36it/s] 18%|█▊        | 18/100 [00:16<00:59,  1.37it/s] 19%|█▉        | 19/100 [00:17<00:58,  1.38it/s] 20%|██        | 20/100 [00:18<00:57,  1.38it/s] 21%|██        | 21/100 [00:19<00:57,  1.38it/s] 22%|██▏       | 22/100 [00:19<00:56,  1.39it/s] 23%|██▎       | 23/100 [00:20<00:55,  1.40it/s] 24%|██▍       | 24/100 [00:21<00:55,  1.38it/s] 25%|██▌       | 25/100 [00:22<00:54,  1.38it/s] 26%|██▌       | 26/100 [00:22<00:53,  1.38it/s] 27%|██▋       | 27/100 [00:23<00:52,  1.38it/s] 28%|██▊       | 28/100 [00:24<00:52,  1.37it/s] 29%|██▉       | 29/100 [00:24<00:51,  1.38it/s] 30%|███       | 30/100 [00:25<00:50,  1.38it/s] 31%|███       | 31/100 [00:26<00:49,  1.39it/s] 32%|███▏      | 32/100 [00:27<00:48,  1.39it/s] 33%|███▎      | 33/100 [00:27<00:48,  1.38it/s] 34%|███▍      | 34/100 [00:28<00:47,  1.40it/s] 35%|███▌      | 35/100 [00:29<00:46,  1.41it/s] 36%|███▌      | 36/100 [00:33<01:48,  1.70s/it] 37%|███▋      | 37/100 [00:33<01:27,  1.40s/it] 38%|███▊      | 38/100 [00:34<01:13,  1.18s/it] 39%|███▉      | 39/100 [00:35<01:03,  1.04s/it] 40%|████      | 40/100 [00:35<00:55,  1.08it/s] 41%|████      | 41/100 [00:36<00:50,  1.17it/s] 42%|████▏     | 42/100 [00:37<00:46,  1.25it/s] 43%|████▎     | 43/100 [00:37<00:43,  1.32it/s] 44%|████▍     | 44/100 [00:38<00:41,  1.37it/s] 45%|████▌     | 45/100 [00:39<00:39,  1.40it/s] 46%|████▌     | 46/100 [00:40<00:38,  1.41it/s] 47%|████▋     | 47/100 [00:40<00:37,  1.42it/s] 48%|████▊     | 48/100 [00:41<00:36,  1.43it/s] 49%|████▉     | 49/100 [00:42<00:35,  1.42it/s] 50%|█████     | 50/100 [00:42<00:35,  1.43it/s] 51%|█████     | 51/100 [00:43<00:34,  1.42it/s] 52%|█████▏    | 52/100 [00:44<00:33,  1.43it/s] 53%|█████▎    | 53/100 [00:44<00:33,  1.41it/s] 54%|█████▍    | 54/100 [00:45<00:32,  1.40it/s] 55%|█████▌    | 55/100 [00:46<00:32,  1.40it/s] 56%|█████▌    | 56/100 [00:47<00:31,  1.41it/s] 57%|█████▋    | 57/100 [00:47<00:30,  1.41it/s] 58%|█████▊    | 58/100 [00:48<00:29,  1.43it/s] 59%|█████▉    | 59/100 [00:49<00:28,  1.45it/s] 60%|██████    | 60/100 [00:49<00:27,  1.47it/s] 61%|██████    | 61/100 [00:50<00:26,  1.47it/s] 62%|██████▏   | 62/100 [00:51<00:26,  1.45it/s] 63%|██████▎   | 63/100 [00:51<00:25,  1.45it/s] 64%|██████▍   | 64/100 [00:52<00:24,  1.46it/s] 65%|██████▌   | 65/100 [00:53<00:24,  1.45it/s] 66%|██████▌   | 66/100 [00:53<00:23,  1.44it/s] 67%|██████▋   | 67/100 [00:54<00:23,  1.43it/s] 68%|██████▊   | 68/100 [00:55<00:22,  1.45it/s] 69%|██████▉   | 69/100 [00:56<00:21,  1.44it/s] 70%|███████   | 70/100 [00:56<00:20,  1.44it/s] 71%|███████   | 71/100 [00:57<00:20,  1.44it/s] 72%|███████▏  | 72/100 [00:58<00:19,  1.45it/s] 73%|███████▎  | 73/100 [01:02<00:46,  1.71s/it] 74%|███████▍  | 74/100 [01:02<00:36,  1.42s/it] 75%|███████▌  | 75/100 [01:03<00:30,  1.21s/it] 76%|███████▌  | 76/100 [01:04<00:25,  1.06s/it] 77%|███████▋  | 77/100 [01:05<00:21,  1.05it/s] 78%|███████▊  | 78/100 [01:05<00:19,  1.14it/s] 79%|███████▉  | 79/100 [01:06<00:17,  1.20it/s] 80%|████████  | 80/100 [01:07<00:15,  1.26it/s] 81%|████████  | 81/100 [01:07<00:14,  1.31it/s] 82%|████████▏ | 82/100 [01:08<00:13,  1.35it/s] 83%|████████▎ | 83/100 [01:09<00:12,  1.37it/s] 84%|████████▍ | 84/100 [01:09<00:11,  1.38it/s] 85%|████████▌ | 85/100 [01:10<00:10,  1.39it/s] 86%|████████▌ | 86/100 [01:11<00:10,  1.39it/s] 87%|████████▋ | 87/100 [01:12<00:09,  1.39it/s] 88%|████████▊ | 88/100 [01:12<00:08,  1.40it/s] 89%|████████▉ | 89/100 [01:13<00:07,  1.38it/s] 90%|█████████ | 90/100 [01:14<00:07,  1.39it/s] 91%|█████████ | 91/100 [01:15<00:06,  1.39it/s] 92%|█████████▏| 92/100 [01:15<00:05,  1.39it/s] 93%|█████████▎| 93/100 [01:16<00:05,  1.39it/s] 94%|█████████▍| 94/100 [01:17<00:04,  1.40it/s] 95%|█████████▌| 95/100 [01:17<00:03,  1.41it/s] 96%|█████████▌| 96/100 [01:18<00:02,  1.41it/s] 97%|█████████▋| 97/100 [01:19<00:02,  1.42it/s] 98%|█████████▊| 98/100 [01:19<00:01,  1.41it/s] 99%|█████████▉| 99/100 [01:20<00:00,  1.41it/s]100%|██████████| 100/100 [01:21<00:00,  1.40it/s]100%|██████████| 100/100 [01:21<00:00,  1.23it/s]
Number of users per round / total users: 10  /  100
Finished creating FedAvg server.
=== FedPP ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.001
training loss: tensor(2.2406) feature loss: tensor(0.5343)
Local adapation with distilling: 0.001
training loss: tensor(2.2784) feature loss: tensor(0.5257)
Local adapation with distilling: 0.001
training loss: tensor(2.3760) feature loss: tensor(0.5432)
Local adapation with distilling: 0.001
training loss: tensor(2.3180) feature loss: tensor(0.5377)
Local adapation with distilling: 0.001
training loss: tensor(2.2727) feature loss: tensor(0.5739)
Local adapation with distilling: 0.001
training loss: tensor(2.3165) feature loss: tensor(0.5838)
Local adapation with distilling: 0.001
training loss: tensor(2.3957) feature loss: tensor(0.5796)
Local adapation with distilling: 0.001
training loss: tensor(2.3115) feature loss: tensor(0.5594)
Local adapation with distilling: 0.001
training loss: tensor(2.5556) feature loss: tensor(0.5666)
Local adapation with distilling: 0.001
training loss: tensor(2.3014) feature loss: tensor(0.5788)
         GM acc on global data: 0.1679 length of data: 10000
save a model
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 494
Local adapation with distilling: 0.000982
training loss: tensor(1.8351) feature loss: tensor(0.5620)
Local adapation with distilling: 0.000982
training loss: tensor(1.8886) feature loss: tensor(0.6117)
Local adapation with distilling: 0.000982
training loss: tensor(1.7417) feature loss: tensor(0.5937)
Local adapation with distilling: 0.000982
training loss: tensor(1.8736) feature loss: tensor(0.5706)
Local adapation with distilling: 0.000982
training loss: tensor(1.8216) feature loss: tensor(0.5943)
Local adapation with distilling: 0.000982
training loss: tensor(1.9223) feature loss: tensor(0.5893)
Local adapation with distilling: 0.000982
training loss: tensor(1.7336) feature loss: tensor(0.5761)
Local adapation with distilling: 0.000982
training loss: tensor(1.9132) feature loss: tensor(0.6121)
Local adapation with distilling: 0.000982
training loss: tensor(1.8725) feature loss: tensor(0.5719)
Local adapation with distilling: 0.000982
training loss: tensor(1.7631) feature loss: tensor(0.5887)
         GM acc on global data: 0.2288 length of data: 10000
save a model
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 500
Local adapation with distilling: 0.000964
training loss: tensor(1.5130) feature loss: tensor(0.5278)
Local adapation with distilling: 0.000964
training loss: tensor(1.5363) feature loss: tensor(0.5213)
Local adapation with distilling: 0.000964
training loss: tensor(1.4488) feature loss: tensor(0.5090)
Local adapation with distilling: 0.000964
training loss: tensor(1.6438) feature loss: tensor(0.5352)
Local adapation with distilling: 0.000964
training loss: tensor(1.6271) feature loss: tensor(0.5235)
Local adapation with distilling: 0.000964
training loss: tensor(1.5553) feature loss: tensor(0.5173)
Local adapation with distilling: 0.000964
training loss: tensor(1.5021) feature loss: tensor(0.5448)
Local adapation with distilling: 0.000964
training loss: tensor(1.6946) feature loss: tensor(0.5435)
Local adapation with distilling: 0.000964
training loss: tensor(1.6402) feature loss: tensor(0.5223)
Local adapation with distilling: 0.000964
training loss: tensor(1.4718) feature loss: tensor(0.5178)
         GM acc on global data: 0.1853 length of data: 10000
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 497
Local adapation with distilling: 0.000946
training loss: tensor(1.3499) feature loss: tensor(0.4842)
Local adapation with distilling: 0.000946
training loss: tensor(1.4972) feature loss: tensor(0.4907)
Local adapation with distilling: 0.000946
training loss: tensor(1.4775) feature loss: tensor(0.4855)
Local adapation with distilling: 0.000946
training loss: tensor(1.5297) feature loss: tensor(0.5024)
Local adapation with distilling: 0.000946
training loss: tensor(1.5660) feature loss: tensor(0.4698)
Local adapation with distilling: 0.000946
training loss: tensor(1.2830) feature loss: tensor(0.4671)
Local adapation with distilling: 0.000946
training loss: tensor(1.3505) feature loss: tensor(0.4848)
Local adapation with distilling: 0.000946
training loss: tensor(1.5160) feature loss: tensor(0.4860)
Local adapation with distilling: 0.000946
training loss: tensor(1.4037) feature loss: tensor(0.4966)
Local adapation with distilling: 0.000946
training loss: tensor(1.5078) feature loss: tensor(0.4822)
         GM acc on global data: 0.2066 length of data: 10000
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 493
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4450) feature loss: tensor(0.4714)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3861) feature loss: tensor(0.4716)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4369) feature loss: tensor(0.4608)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3024) feature loss: tensor(0.4589)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2309) feature loss: tensor(0.4594)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2700) feature loss: tensor(0.4537)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1918) feature loss: tensor(0.4585)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2257) feature loss: tensor(0.4573)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2871) feature loss: tensor(0.4525)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2460) feature loss: tensor(0.4517)
         GM acc on global data: 0.1992 length of data: 10000
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 501
Local adapation with distilling: 0.00091
training loss: tensor(1.2567) feature loss: tensor(0.5019)
Local adapation with distilling: 0.00091
training loss: tensor(1.2946) feature loss: tensor(0.4889)
Local adapation with distilling: 0.00091
training loss: tensor(1.2319) feature loss: tensor(0.4999)
Local adapation with distilling: 0.00091
training loss: tensor(1.5142) feature loss: tensor(0.5017)
Local adapation with distilling: 0.00091
training loss: tensor(1.2681) feature loss: tensor(0.4863)
Local adapation with distilling: 0.00091
training loss: tensor(1.3195) feature loss: tensor(0.4773)
Local adapation with distilling: 0.00091
training loss: tensor(1.3089) feature loss: tensor(0.4859)
Local adapation with distilling: 0.00091
training loss: tensor(1.3725) feature loss: tensor(0.4902)
Local adapation with distilling: 0.00091
training loss: tensor(1.2476) feature loss: tensor(0.5085)
Local adapation with distilling: 0.00091
training loss: tensor(1.3001) feature loss: tensor(0.5101)
         GM acc on global data: 0.2745 length of data: 10000
save a model
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 491
Local adapation with distilling: 0.000892
training loss: tensor(1.0796) feature loss: tensor(0.4566)
Local adapation with distilling: 0.000892
training loss: tensor(1.1366) feature loss: tensor(0.4529)
Local adapation with distilling: 0.000892
training loss: tensor(1.1683) feature loss: tensor(0.4587)
Local adapation with distilling: 0.000892
training loss: tensor(1.1087) feature loss: tensor(0.4574)
Local adapation with distilling: 0.000892
training loss: tensor(1.1932) feature loss: tensor(0.4495)
Local adapation with distilling: 0.000892
training loss: tensor(1.0845) feature loss: tensor(0.4547)
Local adapation with distilling: 0.000892
training loss: tensor(1.1987) feature loss: tensor(0.4501)
Local adapation with distilling: 0.000892
training loss: tensor(1.1144) feature loss: tensor(0.4554)
Local adapation with distilling: 0.000892
training loss: tensor(1.2330) feature loss: tensor(0.4555)
Local adapation with distilling: 0.000892
training loss: tensor(1.3182) feature loss: tensor(0.4653)
         GM acc on global data: 0.3162 length of data: 10000
save a model
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 512
Local adapation with distilling: 0.000874
training loss: tensor(1.1447) feature loss: tensor(0.4673)
Local adapation with distilling: 0.000874
training loss: tensor(1.1011) feature loss: tensor(0.4795)
Local adapation with distilling: 0.000874
training loss: tensor(1.1214) feature loss: tensor(0.4934)
Local adapation with distilling: 0.000874
training loss: tensor(1.1566) feature loss: tensor(0.4933)
Local adapation with distilling: 0.000874
training loss: tensor(1.1093) feature loss: tensor(0.4881)
Local adapation with distilling: 0.000874
training loss: tensor(1.2413) feature loss: tensor(0.4920)
Local adapation with distilling: 0.000874
training loss: tensor(1.1193) feature loss: tensor(0.5010)
Local adapation with distilling: 0.000874
training loss: tensor(1.1198) feature loss: tensor(0.4791)
Local adapation with distilling: 0.000874
training loss: tensor(1.0492) feature loss: tensor(0.4732)
Local adapation with distilling: 0.000874
training loss: tensor(1.3014) feature loss: tensor(0.4941)
         GM acc on global data: 0.2912 length of data: 10000
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 496
Local adapation with distilling: 0.000856
training loss: tensor(1.0532) feature loss: tensor(0.4350)
Local adapation with distilling: 0.000856
training loss: tensor(1.0975) feature loss: tensor(0.4434)
Local adapation with distilling: 0.000856
training loss: tensor(1.1614) feature loss: tensor(0.4336)
Local adapation with distilling: 0.000856
training loss: tensor(1.1472) feature loss: tensor(0.4350)
Local adapation with distilling: 0.000856
training loss: tensor(1.1183) feature loss: tensor(0.4360)
Local adapation with distilling: 0.000856
training loss: tensor(1.1433) feature loss: tensor(0.4408)
Local adapation with distilling: 0.000856
training loss: tensor(1.0007) feature loss: tensor(0.4391)
Local adapation with distilling: 0.000856
training loss: tensor(1.0539) feature loss: tensor(0.4345)
Local adapation with distilling: 0.000856
training loss: tensor(1.1469) feature loss: tensor(0.4374)
Local adapation with distilling: 0.000856
training loss: tensor(1.1253) feature loss: tensor(0.4314)
         GM acc on global data: 0.3182 length of data: 10000
save a model
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 497
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0271) feature loss: tensor(0.4188)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0627) feature loss: tensor(0.4175)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9854) feature loss: tensor(0.4224)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0623) feature loss: tensor(0.4225)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0562) feature loss: tensor(0.4264)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0448) feature loss: tensor(0.4242)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9870) feature loss: tensor(0.4148)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0882) feature loss: tensor(0.4111)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9971) feature loss: tensor(0.4192)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0359) feature loss: tensor(0.4272)
         GM acc on global data: 0.3266 length of data: 10000
save a model
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 506
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0202) feature loss: tensor(0.4467)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0083) feature loss: tensor(0.4493)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0031) feature loss: tensor(0.4466)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0161) feature loss: tensor(0.4437)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9804) feature loss: tensor(0.4544)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9803) feature loss: tensor(0.4456)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.1503) feature loss: tensor(0.4381)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0636) feature loss: tensor(0.4411)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9479) feature loss: tensor(0.4533)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9716) feature loss: tensor(0.4476)
         GM acc on global data: 0.3356 length of data: 10000
save a model
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9460) feature loss: tensor(0.4288)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9844) feature loss: tensor(0.4288)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.1300) feature loss: tensor(0.4313)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9821) feature loss: tensor(0.4265)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0305) feature loss: tensor(0.4283)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0750) feature loss: tensor(0.4269)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0197) feature loss: tensor(0.4335)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9521) feature loss: tensor(0.4315)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0592) feature loss: tensor(0.4254)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0809) feature loss: tensor(0.4313)
         GM acc on global data: 0.3569 length of data: 10000
save a model
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0016) feature loss: tensor(0.4427)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9641) feature loss: tensor(0.4463)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0198) feature loss: tensor(0.4402)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9414) feature loss: tensor(0.4490)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9545) feature loss: tensor(0.4479)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.1363) feature loss: tensor(0.4419)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9458) feature loss: tensor(0.4472)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0571) feature loss: tensor(0.4465)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0554) feature loss: tensor(0.4358)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0466) feature loss: tensor(0.4361)
         GM acc on global data: 0.3627 length of data: 10000
save a model
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 489
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9219) feature loss: tensor(0.4219)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9391) feature loss: tensor(0.4290)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9447) feature loss: tensor(0.4355)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8985) feature loss: tensor(0.4272)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9447) feature loss: tensor(0.4331)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.0146) feature loss: tensor(0.4284)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9572) feature loss: tensor(0.4231)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.0532) feature loss: tensor(0.4241)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9113) feature loss: tensor(0.4316)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9438) feature loss: tensor(0.4313)
         GM acc on global data: 0.3448 length of data: 10000
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 489
Local adapation with distilling: 0.000748
training loss: tensor(1.0387) feature loss: tensor(0.5362)
Local adapation with distilling: 0.000748
training loss: tensor(1.1717) feature loss: tensor(0.5414)
Local adapation with distilling: 0.000748
training loss: tensor(1.2449) feature loss: tensor(0.5392)
Local adapation with distilling: 0.000748
training loss: tensor(1.0201) feature loss: tensor(0.5365)
Local adapation with distilling: 0.000748
training loss: tensor(1.1750) feature loss: tensor(0.5394)
Local adapation with distilling: 0.000748
training loss: tensor(1.1449) feature loss: tensor(0.5336)
Local adapation with distilling: 0.000748
training loss: tensor(1.0982) feature loss: tensor(0.5368)
Local adapation with distilling: 0.000748
training loss: tensor(1.1471) feature loss: tensor(0.5322)
Local adapation with distilling: 0.000748
training loss: tensor(1.2126) feature loss: tensor(0.5401)
Local adapation with distilling: 0.000748
training loss: tensor(1.1070) feature loss: tensor(0.5376)
         GM acc on global data: 0.3017 length of data: 10000
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 504
Local adapation with distilling: 0.00073
training loss: tensor(1.0254) feature loss: tensor(0.4419)
Local adapation with distilling: 0.00073
training loss: tensor(1.0089) feature loss: tensor(0.4486)
Local adapation with distilling: 0.00073
training loss: tensor(0.9833) feature loss: tensor(0.4362)
Local adapation with distilling: 0.00073
training loss: tensor(1.0018) feature loss: tensor(0.4389)
Local adapation with distilling: 0.00073
training loss: tensor(0.9378) feature loss: tensor(0.4492)
Local adapation with distilling: 0.00073
training loss: tensor(1.0456) feature loss: tensor(0.4431)
Local adapation with distilling: 0.00073
training loss: tensor(1.1148) feature loss: tensor(0.4458)
Local adapation with distilling: 0.00073
training loss: tensor(0.9640) feature loss: tensor(0.4468)
Local adapation with distilling: 0.00073
training loss: tensor(1.0655) feature loss: tensor(0.4493)
Local adapation with distilling: 0.00073
training loss: tensor(1.1379) feature loss: tensor(0.4408)
         GM acc on global data: 0.3591 length of data: 10000
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 492
Local adapation with distilling: 0.000712
training loss: tensor(0.9668) feature loss: tensor(0.4191)
Local adapation with distilling: 0.000712
training loss: tensor(0.9470) feature loss: tensor(0.4237)
Local adapation with distilling: 0.000712
training loss: tensor(0.9294) feature loss: tensor(0.4227)
Local adapation with distilling: 0.000712
training loss: tensor(0.9684) feature loss: tensor(0.4183)
Local adapation with distilling: 0.000712
training loss: tensor(0.9008) feature loss: tensor(0.4259)
Local adapation with distilling: 0.000712
training loss: tensor(0.9251) feature loss: tensor(0.4228)
Local adapation with distilling: 0.000712
training loss: tensor(0.9582) feature loss: tensor(0.4207)
Local adapation with distilling: 0.000712
training loss: tensor(1.0220) feature loss: tensor(0.4155)
Local adapation with distilling: 0.000712
training loss: tensor(1.0001) feature loss: tensor(0.4222)
Local adapation with distilling: 0.000712
training loss: tensor(1.0582) feature loss: tensor(0.4229)
         GM acc on global data: 0.3915 length of data: 10000
save a model
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 492
Local adapation with distilling: 0.000694
training loss: tensor(0.7903) feature loss: tensor(0.3473)
Local adapation with distilling: 0.000694
training loss: tensor(1.0427) feature loss: tensor(0.3451)
Local adapation with distilling: 0.000694
training loss: tensor(1.0077) feature loss: tensor(0.3504)
Local adapation with distilling: 0.000694
training loss: tensor(0.8394) feature loss: tensor(0.3513)
Local adapation with distilling: 0.000694
training loss: tensor(0.9039) feature loss: tensor(0.3517)
Local adapation with distilling: 0.000694
training loss: tensor(0.8342) feature loss: tensor(0.3396)
Local adapation with distilling: 0.000694
training loss: tensor(0.8249) feature loss: tensor(0.3482)
Local adapation with distilling: 0.000694
training loss: tensor(0.8745) feature loss: tensor(0.3445)
Local adapation with distilling: 0.000694
training loss: tensor(0.7809) feature loss: tensor(0.3437)
Local adapation with distilling: 0.000694
training loss: tensor(0.7837) feature loss: tensor(0.3474)
         GM acc on global data: 0.3663 length of data: 10000
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 495
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0128) feature loss: tensor(0.4684)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8908) feature loss: tensor(0.4530)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9916) feature loss: tensor(0.4631)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0189) feature loss: tensor(0.4591)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0192) feature loss: tensor(0.4583)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.1403) feature loss: tensor(0.4544)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9997) feature loss: tensor(0.4608)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.1207) feature loss: tensor(0.4562)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9695) feature loss: tensor(0.4555)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0287) feature loss: tensor(0.4589)
         GM acc on global data: 0.354 length of data: 10000
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 505
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9595) feature loss: tensor(0.4407)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9564) feature loss: tensor(0.4509)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.0507) feature loss: tensor(0.4503)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.1296) feature loss: tensor(0.4418)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.0137) feature loss: tensor(0.4416)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9223) feature loss: tensor(0.4546)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.0502) feature loss: tensor(0.4468)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9695) feature loss: tensor(0.4448)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9646) feature loss: tensor(0.4423)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9963) feature loss: tensor(0.4432)
         GM acc on global data: 0.3531 length of data: 10000
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 489
Local adapation with distilling: 0.00064
training loss: tensor(0.9425) feature loss: tensor(0.3846)
Local adapation with distilling: 0.00064
training loss: tensor(0.8842) feature loss: tensor(0.3837)
Local adapation with distilling: 0.00064
training loss: tensor(0.8756) feature loss: tensor(0.3842)
Local adapation with distilling: 0.00064
training loss: tensor(0.8516) feature loss: tensor(0.3841)
Local adapation with distilling: 0.00064
training loss: tensor(0.8605) feature loss: tensor(0.3891)
Local adapation with distilling: 0.00064
training loss: tensor(0.8957) feature loss: tensor(0.3766)
Local adapation with distilling: 0.00064
training loss: tensor(0.8927) feature loss: tensor(0.3875)
Local adapation with distilling: 0.00064
training loss: tensor(0.8176) feature loss: tensor(0.3864)
Local adapation with distilling: 0.00064
training loss: tensor(0.8322) feature loss: tensor(0.3845)
Local adapation with distilling: 0.00064
training loss: tensor(0.8836) feature loss: tensor(0.3855)
         GM acc on global data: 0.3451 length of data: 10000
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 494
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0571) feature loss: tensor(0.4651)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2540) feature loss: tensor(0.4651)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9934) feature loss: tensor(0.4573)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0309) feature loss: tensor(0.4570)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0507) feature loss: tensor(0.4629)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0009) feature loss: tensor(0.4546)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0829) feature loss: tensor(0.4547)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2300) feature loss: tensor(0.4630)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0713) feature loss: tensor(0.4663)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0113) feature loss: tensor(0.4646)
         GM acc on global data: 0.412 length of data: 10000
save a model
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 479
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8261) feature loss: tensor(0.3901)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8617) feature loss: tensor(0.3901)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.9239) feature loss: tensor(0.3795)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.9892) feature loss: tensor(0.3868)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8709) feature loss: tensor(0.3826)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8644) feature loss: tensor(0.3830)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.0119) feature loss: tensor(0.3860)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8926) feature loss: tensor(0.3792)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8970) feature loss: tensor(0.3824)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8635) feature loss: tensor(0.3873)
         GM acc on global data: 0.3889 length of data: 10000
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 494
Local adapation with distilling: 0.000586
training loss: tensor(0.8870) feature loss: tensor(0.3594)
Local adapation with distilling: 0.000586
training loss: tensor(0.9746) feature loss: tensor(0.3556)
Local adapation with distilling: 0.000586
training loss: tensor(0.8516) feature loss: tensor(0.3500)
Local adapation with distilling: 0.000586
training loss: tensor(0.8251) feature loss: tensor(0.3583)
Local adapation with distilling: 0.000586
training loss: tensor(0.8516) feature loss: tensor(0.3545)
Local adapation with distilling: 0.000586
training loss: tensor(0.8109) feature loss: tensor(0.3540)
Local adapation with distilling: 0.000586
training loss: tensor(1.0602) feature loss: tensor(0.3576)
Local adapation with distilling: 0.000586
training loss: tensor(0.9308) feature loss: tensor(0.3571)
Local adapation with distilling: 0.000586
training loss: tensor(0.8778) feature loss: tensor(0.3611)
Local adapation with distilling: 0.000586
training loss: tensor(0.9209) feature loss: tensor(0.3609)
         GM acc on global data: 0.3765 length of data: 10000
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 497
Local adapation with distilling: 0.000568
training loss: tensor(0.8292) feature loss: tensor(0.4082)
Local adapation with distilling: 0.000568
training loss: tensor(1.0268) feature loss: tensor(0.3999)
Local adapation with distilling: 0.000568
training loss: tensor(0.7966) feature loss: tensor(0.4032)
Local adapation with distilling: 0.000568
training loss: tensor(0.8852) feature loss: tensor(0.4066)
Local adapation with distilling: 0.000568
training loss: tensor(1.0350) feature loss: tensor(0.3998)
Local adapation with distilling: 0.000568
training loss: tensor(0.9274) feature loss: tensor(0.4029)
Local adapation with distilling: 0.000568
training loss: tensor(0.8994) feature loss: tensor(0.4038)
Local adapation with distilling: 0.000568
training loss: tensor(0.9290) feature loss: tensor(0.4055)
Local adapation with distilling: 0.000568
training loss: tensor(0.9208) feature loss: tensor(0.4106)
Local adapation with distilling: 0.000568
training loss: tensor(0.9362) feature loss: tensor(0.4071)
         GM acc on global data: 0.4027 length of data: 10000
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 497
Local adapation with distilling: 0.00055
training loss: tensor(0.8526) feature loss: tensor(0.3741)
Local adapation with distilling: 0.00055
training loss: tensor(0.9382) feature loss: tensor(0.3684)
Local adapation with distilling: 0.00055
training loss: tensor(0.9238) feature loss: tensor(0.3717)
Local adapation with distilling: 0.00055
training loss: tensor(0.9596) feature loss: tensor(0.3741)
Local adapation with distilling: 0.00055
training loss: tensor(0.8467) feature loss: tensor(0.3722)
Local adapation with distilling: 0.00055
training loss: tensor(0.8875) feature loss: tensor(0.3718)
Local adapation with distilling: 0.00055
training loss: tensor(0.8293) feature loss: tensor(0.3774)
Local adapation with distilling: 0.00055
training loss: tensor(0.9281) feature loss: tensor(0.3726)
Local adapation with distilling: 0.00055
training loss: tensor(0.9917) feature loss: tensor(0.3726)
Local adapation with distilling: 0.00055
training loss: tensor(0.8574) feature loss: tensor(0.3760)
         GM acc on global data: 0.4228 length of data: 10000
save a model
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 489
Local adapation with distilling: 0.000532
training loss: tensor(1.0131) feature loss: tensor(0.4666)
Local adapation with distilling: 0.000532
training loss: tensor(1.0227) feature loss: tensor(0.4627)
Local adapation with distilling: 0.000532
training loss: tensor(1.0524) feature loss: tensor(0.4610)
Local adapation with distilling: 0.000532
training loss: tensor(0.9387) feature loss: tensor(0.4656)
Local adapation with distilling: 0.000532
training loss: tensor(1.1091) feature loss: tensor(0.4678)
Local adapation with distilling: 0.000532
training loss: tensor(1.1793) feature loss: tensor(0.4617)
Local adapation with distilling: 0.000532
training loss: tensor(1.0280) feature loss: tensor(0.4593)
Local adapation with distilling: 0.000532
training loss: tensor(1.1029) feature loss: tensor(0.4643)
Local adapation with distilling: 0.000532
training loss: tensor(0.9443) feature loss: tensor(0.4643)
Local adapation with distilling: 0.000532
training loss: tensor(1.0459) feature loss: tensor(0.4638)
         GM acc on global data: 0.4059 length of data: 10000
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 495
Local adapation with distilling: 0.000514
training loss: tensor(0.9100) feature loss: tensor(0.4009)
Local adapation with distilling: 0.000514
training loss: tensor(0.8548) feature loss: tensor(0.4073)
Local adapation with distilling: 0.000514
training loss: tensor(0.9141) feature loss: tensor(0.4097)
Local adapation with distilling: 0.000514
training loss: tensor(0.9234) feature loss: tensor(0.4085)
Local adapation with distilling: 0.000514
training loss: tensor(0.9118) feature loss: tensor(0.4086)
Local adapation with distilling: 0.000514
training loss: tensor(0.9205) feature loss: tensor(0.4037)
Local adapation with distilling: 0.000514
training loss: tensor(1.1077) feature loss: tensor(0.4003)
Local adapation with distilling: 0.000514
training loss: tensor(0.8711) feature loss: tensor(0.3992)
Local adapation with distilling: 0.000514
training loss: tensor(1.2876) feature loss: tensor(0.4111)
Local adapation with distilling: 0.000514
training loss: tensor(0.8978) feature loss: tensor(0.3984)
         GM acc on global data: 0.3927 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 495
Local adapation with distilling: 0.000496
training loss: tensor(0.8642) feature loss: tensor(0.3510)
Local adapation with distilling: 0.000496
training loss: tensor(0.8166) feature loss: tensor(0.3592)
Local adapation with distilling: 0.000496
training loss: tensor(0.8577) feature loss: tensor(0.3543)
Local adapation with distilling: 0.000496
training loss: tensor(0.8327) feature loss: tensor(0.3597)
Local adapation with distilling: 0.000496
training loss: tensor(0.8846) feature loss: tensor(0.3569)
Local adapation with distilling: 0.000496
training loss: tensor(1.0402) feature loss: tensor(0.3556)
Local adapation with distilling: 0.000496
training loss: tensor(0.8670) feature loss: tensor(0.3578)
Local adapation with distilling: 0.000496
training loss: tensor(0.7877) feature loss: tensor(0.3591)
Local adapation with distilling: 0.000496
training loss: tensor(0.9939) feature loss: tensor(0.3619)
Local adapation with distilling: 0.000496
training loss: tensor(0.8546) feature loss: tensor(0.3606)
         GM acc on global data: 0.407 length of data: 10000
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.0484) feature loss: tensor(0.4284)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9246) feature loss: tensor(0.4265)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.0369) feature loss: tensor(0.4250)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.0295) feature loss: tensor(0.4176)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.0150) feature loss: tensor(0.4174)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9326) feature loss: tensor(0.4183)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9430) feature loss: tensor(0.4198)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9870) feature loss: tensor(0.4208)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.8805) feature loss: tensor(0.4235)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9168) feature loss: tensor(0.4264)
         GM acc on global data: 0.3985 length of data: 10000
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 490
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8545) feature loss: tensor(0.3615)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9343) feature loss: tensor(0.3702)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8075) feature loss: tensor(0.3587)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9666) feature loss: tensor(0.3669)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8154) feature loss: tensor(0.3688)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8003) feature loss: tensor(0.3667)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8208) feature loss: tensor(0.3616)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.7956) feature loss: tensor(0.3607)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9219) feature loss: tensor(0.3584)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.8082) feature loss: tensor(0.3631)
         GM acc on global data: 0.4058 length of data: 10000
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 504
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.9623) feature loss: tensor(0.3516)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8116) feature loss: tensor(0.3563)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.9408) feature loss: tensor(0.3483)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.9973) feature loss: tensor(0.3532)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8284) feature loss: tensor(0.3538)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8044) feature loss: tensor(0.3569)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8249) feature loss: tensor(0.3517)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7579) feature loss: tensor(0.3588)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8509) feature loss: tensor(0.3532)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8048) feature loss: tensor(0.3519)
         GM acc on global data: 0.415 length of data: 10000
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 492
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.4491) feature loss: tensor(0.4046)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0882) feature loss: tensor(0.4057)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9112) feature loss: tensor(0.4028)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0117) feature loss: tensor(0.4021)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0171) feature loss: tensor(0.4012)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8685) feature loss: tensor(0.4065)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9441) feature loss: tensor(0.4040)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9085) feature loss: tensor(0.3971)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0672) feature loss: tensor(0.3947)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.1031) feature loss: tensor(0.4042)
         GM acc on global data: 0.4071 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 495
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8091) feature loss: tensor(0.3782)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9343) feature loss: tensor(0.3764)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8498) feature loss: tensor(0.3791)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8454) feature loss: tensor(0.3736)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8121) feature loss: tensor(0.3775)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8244) feature loss: tensor(0.3752)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8614) feature loss: tensor(0.3727)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.0590) feature loss: tensor(0.3824)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8057) feature loss: tensor(0.3759)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8532) feature loss: tensor(0.3823)
         GM acc on global data: 0.3574 length of data: 10000
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
all data: 501
Local adapation with distilling: 0.000388
training loss: tensor(0.9941) feature loss: tensor(0.4357)
Local adapation with distilling: 0.000388
training loss: tensor(0.9452) feature loss: tensor(0.4311)
Local adapation with distilling: 0.000388
training loss: tensor(1.1958) feature loss: tensor(0.4392)
Local adapation with distilling: 0.000388
training loss: tensor(1.0857) feature loss: tensor(0.4297)
Local adapation with distilling: 0.000388
training loss: tensor(1.2078) feature loss: tensor(0.4278)
Local adapation with distilling: 0.000388
training loss: tensor(1.2026) feature loss: tensor(0.4301)
Local adapation with distilling: 0.000388
training loss: tensor(0.9943) feature loss: tensor(0.4352)
Local adapation with distilling: 0.000388
training loss: tensor(1.1462) feature loss: tensor(0.4293)
Local adapation with distilling: 0.000388
training loss: tensor(0.9602) feature loss: tensor(0.4345)
Local adapation with distilling: 0.000388
training loss: tensor(1.0823) feature loss: tensor(0.4363)
         GM acc on global data: 0.4189 length of data: 10000
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 484
Local adapation with distilling: 0.00037
training loss: tensor(0.9032) feature loss: tensor(0.3946)
Local adapation with distilling: 0.00037
training loss: tensor(0.8020) feature loss: tensor(0.3945)
Local adapation with distilling: 0.00037
training loss: tensor(0.8328) feature loss: tensor(0.3946)
Local adapation with distilling: 0.00037
training loss: tensor(0.9586) feature loss: tensor(0.3908)
Local adapation with distilling: 0.00037
training loss: tensor(0.8365) feature loss: tensor(0.3975)
Local adapation with distilling: 0.00037
training loss: tensor(0.9653) feature loss: tensor(0.3959)
Local adapation with distilling: 0.00037
training loss: tensor(0.8865) feature loss: tensor(0.3966)
Local adapation with distilling: 0.00037
training loss: tensor(0.9135) feature loss: tensor(0.3891)
Local adapation with distilling: 0.00037
training loss: tensor(0.8814) feature loss: tensor(0.3957)
Local adapation with distilling: 0.00037
training loss: tensor(0.9721) feature loss: tensor(0.3956)
         GM acc on global data: 0.4144 length of data: 10000
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 493
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8914) feature loss: tensor(0.3120)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8567) feature loss: tensor(0.3033)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7476) feature loss: tensor(0.3134)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8547) feature loss: tensor(0.3063)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.1569) feature loss: tensor(0.3148)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8585) feature loss: tensor(0.3066)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8207) feature loss: tensor(0.3118)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7816) feature loss: tensor(0.3126)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8619) feature loss: tensor(0.3137)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7426) feature loss: tensor(0.3131)
         GM acc on global data: 0.4195 length of data: 10000
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 507
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8816) feature loss: tensor(0.3302)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8622) feature loss: tensor(0.3349)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8339) feature loss: tensor(0.3412)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.9337) feature loss: tensor(0.3389)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.9808) feature loss: tensor(0.3256)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8579) feature loss: tensor(0.3461)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.9752) feature loss: tensor(0.3433)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8599) feature loss: tensor(0.3355)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8591) feature loss: tensor(0.3407)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.9859) feature loss: tensor(0.3321)
         GM acc on global data: 0.3954 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 512
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8823) feature loss: tensor(0.3415)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9265) feature loss: tensor(0.3408)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8253) feature loss: tensor(0.3392)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9326) feature loss: tensor(0.3343)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.1133) feature loss: tensor(0.3281)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.0026) feature loss: tensor(0.3425)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8664) feature loss: tensor(0.3368)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9091) feature loss: tensor(0.3422)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8444) feature loss: tensor(0.3418)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9210) feature loss: tensor(0.3392)
         GM acc on global data: 0.3886 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 503
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.2126) feature loss: tensor(0.3255)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8657) feature loss: tensor(0.3202)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.9502) feature loss: tensor(0.3219)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.9007) feature loss: tensor(0.3173)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.9390) feature loss: tensor(0.3205)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8090) feature loss: tensor(0.3246)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8476) feature loss: tensor(0.3240)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8722) feature loss: tensor(0.3223)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8326) feature loss: tensor(0.3191)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.9554) feature loss: tensor(0.3167)
         GM acc on global data: 0.4243 length of data: 10000
save a model
-------------Round number:  40  -------------
selected users: [79, 75, 63, 15, 38, 11, 40, 45, 39, 62]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 498
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8446) feature loss: tensor(0.3308)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8751) feature loss: tensor(0.3321)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8273) feature loss: tensor(0.3323)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.9351) feature loss: tensor(0.3384)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7924) feature loss: tensor(0.3376)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8514) feature loss: tensor(0.3334)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8306) feature loss: tensor(0.3323)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8794) feature loss: tensor(0.3353)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8747) feature loss: tensor(0.3361)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8864) feature loss: tensor(0.3320)
         GM acc on global data: 0.4284 length of data: 10000
save a model
-------------Round number:  41  -------------
selected users: [42, 94, 37, 6, 79, 32, 24, 0, 33, 93]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 495
Local adapation with distilling: 0.000262
training loss: tensor(0.9167) feature loss: tensor(0.2948)
Local adapation with distilling: 0.000262
training loss: tensor(0.9787) feature loss: tensor(0.2875)
Local adapation with distilling: 0.000262
training loss: tensor(0.8846) feature loss: tensor(0.2906)
Local adapation with distilling: 0.000262
training loss: tensor(0.8962) feature loss: tensor(0.2958)
Local adapation with distilling: 0.000262
training loss: tensor(0.8282) feature loss: tensor(0.2955)
Local adapation with distilling: 0.000262
training loss: tensor(1.0430) feature loss: tensor(0.2914)
Local adapation with distilling: 0.000262
training loss: tensor(0.8790) feature loss: tensor(0.2983)
Local adapation with distilling: 0.000262
training loss: tensor(0.8366) feature loss: tensor(0.2949)
Local adapation with distilling: 0.000262
training loss: tensor(0.8366) feature loss: tensor(0.3015)
Local adapation with distilling: 0.000262
training loss: tensor(0.9610) feature loss: tensor(0.2954)
         GM acc on global data: 0.4461 length of data: 10000
save a model
-------------Round number:  42  -------------
selected users: [83, 53, 70, 45, 44, 39, 22, 80, 10, 0]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 497
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8981) feature loss: tensor(0.3216)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8154) feature loss: tensor(0.3280)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8397) feature loss: tensor(0.3288)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8990) feature loss: tensor(0.3236)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8592) feature loss: tensor(0.3210)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8592) feature loss: tensor(0.3284)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(1.2646) feature loss: tensor(0.3255)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8861) feature loss: tensor(0.3229)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.8922) feature loss: tensor(0.3271)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.7911) feature loss: tensor(0.3289)
         GM acc on global data: 0.4113 length of data: 10000
-------------Round number:  43  -------------
selected users: [20, 2, 15, 22, 57, 91, 69, 55, 11, 79]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 498
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.9216) feature loss: tensor(0.3243)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8000) feature loss: tensor(0.3217)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8791) feature loss: tensor(0.3307)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.0825) feature loss: tensor(0.3240)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8928) feature loss: tensor(0.3168)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8517) feature loss: tensor(0.3220)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.7970) feature loss: tensor(0.3202)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8795) feature loss: tensor(0.3201)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.8679) feature loss: tensor(0.3214)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.7979) feature loss: tensor(0.3228)
         GM acc on global data: 0.4253 length of data: 10000
-------------Round number:  44  -------------
selected users: [42, 54, 27, 93, 39, 65, 7, 26, 24, 60]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 495
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8956) feature loss: tensor(0.2861)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9285) feature loss: tensor(0.2826)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9814) feature loss: tensor(0.2863)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9226) feature loss: tensor(0.2936)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.7816) feature loss: tensor(0.2951)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8315) feature loss: tensor(0.2905)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9355) feature loss: tensor(0.2901)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.7914) feature loss: tensor(0.2975)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8316) feature loss: tensor(0.2910)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8313) feature loss: tensor(0.2919)
         GM acc on global data: 0.4169 length of data: 10000
-------------Round number:  45  -------------
selected users: [0, 1, 62, 76, 37, 99, 78, 38, 2, 84]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 498
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.7847) feature loss: tensor(0.2952)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.9494) feature loss: tensor(0.2824)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.9099) feature loss: tensor(0.2857)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.9978) feature loss: tensor(0.2859)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.8567) feature loss: tensor(0.2888)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.8645) feature loss: tensor(0.2848)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.9672) feature loss: tensor(0.2859)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.7888) feature loss: tensor(0.2931)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.8060) feature loss: tensor(0.2932)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.9249) feature loss: tensor(0.2828)
         GM acc on global data: 0.4257 length of data: 10000
-------------Round number:  46  -------------
selected users: [71, 33, 37, 10, 44, 34, 24, 98, 73, 95]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 487
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7808) feature loss: tensor(0.2934)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7881) feature loss: tensor(0.2959)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7694) feature loss: tensor(0.2887)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8597) feature loss: tensor(0.2873)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8284) feature loss: tensor(0.2907)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8823) feature loss: tensor(0.2947)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8058) feature loss: tensor(0.2848)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7886) feature loss: tensor(0.2963)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8576) feature loss: tensor(0.2901)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8525) feature loss: tensor(0.2897)
         GM acc on global data: 0.4273 length of data: 10000
-------------Round number:  47  -------------
selected users: [17, 90, 94, 86, 63, 5, 38, 14, 40, 47]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 499
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9290) feature loss: tensor(0.2696)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9648) feature loss: tensor(0.2668)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9327) feature loss: tensor(0.2610)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8482) feature loss: tensor(0.2756)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8534) feature loss: tensor(0.2717)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9913) feature loss: tensor(0.2589)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.7559) feature loss: tensor(0.2816)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8338) feature loss: tensor(0.2714)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8425) feature loss: tensor(0.2725)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8797) feature loss: tensor(0.2670)
         GM acc on global data: 0.4039 length of data: 10000
-------------Round number:  48  -------------
selected users: [93, 5, 71, 9, 11, 79, 69, 8, 59, 63]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 504
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9289) feature loss: tensor(0.2920)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.0094) feature loss: tensor(0.2878)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.8644) feature loss: tensor(0.2970)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.1093) feature loss: tensor(0.2909)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9345) feature loss: tensor(0.2954)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9214) feature loss: tensor(0.2967)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9102) feature loss: tensor(0.2967)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9712) feature loss: tensor(0.2901)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.1536) feature loss: tensor(0.2923)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.8800) feature loss: tensor(0.2936)
         GM acc on global data: 0.3952 length of data: 10000
-------------Round number:  49  -------------
selected users: [76, 25, 28, 75, 81, 47, 41, 22, 29, 1]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 503
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.0222) feature loss: tensor(0.2652)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9804) feature loss: tensor(0.2715)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.0574) feature loss: tensor(0.2788)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9835) feature loss: tensor(0.2731)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.1123) feature loss: tensor(0.2773)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9316) feature loss: tensor(0.2705)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9508) feature loss: tensor(0.2686)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.1788) feature loss: tensor(0.2816)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9011) feature loss: tensor(0.2766)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9458) feature loss: tensor(0.2753)
         GM acc on global data: 0.4097 length of data: 10000
-------------Round number:  50  -------------
selected users: [80, 79, 25, 15, 39, 40, 53, 17, 57, 50]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 504
Local adapation with distilling: 0.0001
training loss: tensor(1.0277) feature loss: tensor(0.2679)
Local adapation with distilling: 0.0001
training loss: tensor(0.9113) feature loss: tensor(0.2781)
Local adapation with distilling: 0.0001
training loss: tensor(0.9658) feature loss: tensor(0.2713)
Local adapation with distilling: 0.0001
training loss: tensor(0.9340) feature loss: tensor(0.2806)
Local adapation with distilling: 0.0001
training loss: tensor(0.9518) feature loss: tensor(0.2811)
Local adapation with distilling: 0.0001
training loss: tensor(0.9786) feature loss: tensor(0.2751)
Local adapation with distilling: 0.0001
training loss: tensor(0.9553) feature loss: tensor(0.2825)
Local adapation with distilling: 0.0001
training loss: tensor(0.9854) feature loss: tensor(0.2748)
Local adapation with distilling: 0.0001
training loss: tensor(0.9911) feature loss: tensor(0.2658)
Local adapation with distilling: 0.0001
training loss: tensor(1.0631) feature loss: tensor(0.2696)
         GM acc on global data: 0.4135 length of data: 10000
-------------Round number:  51  -------------
selected users: [71, 43, 11, 83, 78, 19, 80, 4, 79, 75]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.8416) feature loss: tensor(0.2894)
Local adapation with distilling: 0.0001
training loss: tensor(0.9399) feature loss: tensor(0.2799)
Local adapation with distilling: 0.0001
training loss: tensor(0.8569) feature loss: tensor(0.2852)
Local adapation with distilling: 0.0001
training loss: tensor(1.0313) feature loss: tensor(0.2814)
Local adapation with distilling: 0.0001
training loss: tensor(0.9487) feature loss: tensor(0.2804)
Local adapation with distilling: 0.0001
training loss: tensor(1.0027) feature loss: tensor(0.2739)
Local adapation with distilling: 0.0001
training loss: tensor(0.8989) feature loss: tensor(0.2813)
Local adapation with distilling: 0.0001
training loss: tensor(1.0025) feature loss: tensor(0.2748)
Local adapation with distilling: 0.0001
training loss: tensor(0.8015) feature loss: tensor(0.2911)
Local adapation with distilling: 0.0001
training loss: tensor(0.9007) feature loss: tensor(0.2815)
         GM acc on global data: 0.4014 length of data: 10000
-------------Round number:  52  -------------
selected users: [82, 8, 44, 19, 2, 73, 37, 89, 67, 18]
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(1.0831) feature loss: tensor(0.2799)
Local adapation with distilling: 0.0001
training loss: tensor(0.9966) feature loss: tensor(0.2952)
Local adapation with distilling: 0.0001
training loss: tensor(1.0280) feature loss: tensor(0.2824)
Local adapation with distilling: 0.0001
training loss: tensor(0.9565) feature loss: tensor(0.2767)
Local adapation with distilling: 0.0001
training loss: tensor(0.9296) feature loss: tensor(0.2898)
Local adapation with distilling: 0.0001
training loss: tensor(0.9364) feature loss: tensor(0.2898)
Local adapation with distilling: 0.0001
training loss: tensor(0.9514) feature loss: tensor(0.2843)
Local adapation with distilling: 0.0001
training loss: tensor(0.9654) feature loss: tensor(0.2863)
Local adapation with distilling: 0.0001
training loss: tensor(1.0538) feature loss: tensor(0.2771)
Local adapation with distilling: 0.0001
training loss: tensor(1.1724) feature loss: tensor(0.2767)
         GM acc on global data: 0.4193 length of data: 10000
-------------Round number:  53  -------------
selected users: [19, 78, 64, 3, 71, 32, 68, 42, 55, 97]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.9375) feature loss: tensor(0.3057)
Local adapation with distilling: 0.0001
training loss: tensor(0.9644) feature loss: tensor(0.3214)
Local adapation with distilling: 0.0001
training loss: tensor(1.2888) feature loss: tensor(0.2953)
Local adapation with distilling: 0.0001
training loss: tensor(1.1446) feature loss: tensor(0.3024)
Local adapation with distilling: 0.0001
training loss: tensor(0.8767) feature loss: tensor(0.3198)
Local adapation with distilling: 0.0001
training loss: tensor(1.2243) feature loss: tensor(0.3063)
Local adapation with distilling: 0.0001
training loss: tensor(0.9706) feature loss: tensor(0.3178)
Local adapation with distilling: 0.0001
training loss: tensor(1.0332) feature loss: tensor(0.3028)
Local adapation with distilling: 0.0001
training loss: tensor(1.0458) feature loss: tensor(0.3036)
Local adapation with distilling: 0.0001
training loss: tensor(1.1202) feature loss: tensor(0.3075)
         GM acc on global data: 0.397 length of data: 10000
-------------Round number:  54  -------------
selected users: [36, 70, 48, 94, 81, 46, 38, 29, 34, 22]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.9069) feature loss: tensor(0.2745)
Local adapation with distilling: 0.0001
training loss: tensor(0.8552) feature loss: tensor(0.2791)
Local adapation with distilling: 0.0001
training loss: tensor(1.0634) feature loss: tensor(0.2671)
Local adapation with distilling: 0.0001
training loss: tensor(0.8895) feature loss: tensor(0.2678)
Local adapation with distilling: 0.0001
training loss: tensor(1.0123) feature loss: tensor(0.2813)
Local adapation with distilling: 0.0001
training loss: tensor(0.9037) feature loss: tensor(0.2804)
Local adapation with distilling: 0.0001
training loss: tensor(0.7788) feature loss: tensor(0.2844)
Local adapation with distilling: 0.0001
training loss: tensor(0.8346) feature loss: tensor(0.2813)
Local adapation with distilling: 0.0001
training loss: tensor(0.8571) feature loss: tensor(0.2770)
Local adapation with distilling: 0.0001
training loss: tensor(1.0851) feature loss: tensor(0.2813)
         GM acc on global data: 0.4235 length of data: 10000
-------------Round number:  55  -------------
selected users: [28, 92, 98, 95, 84, 34, 38, 76, 17, 78]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 502
Local adapation with distilling: 0.0001
training loss: tensor(0.9952) feature loss: tensor(0.2579)
Local adapation with distilling: 0.0001
training loss: tensor(1.0702) feature loss: tensor(0.2387)
Local adapation with distilling: 0.0001
training loss: tensor(0.8303) feature loss: tensor(0.2560)
Local adapation with distilling: 0.0001
training loss: tensor(0.8558) feature loss: tensor(0.2530)
Local adapation with distilling: 0.0001
training loss: tensor(0.9373) feature loss: tensor(0.2440)
Local adapation with distilling: 0.0001
training loss: tensor(0.8185) feature loss: tensor(0.2572)
Local adapation with distilling: 0.0001
training loss: tensor(0.7166) feature loss: tensor(0.2665)
Local adapation with distilling: 0.0001
training loss: tensor(0.8767) feature loss: tensor(0.2506)
Local adapation with distilling: 0.0001
training loss: tensor(0.8333) feature loss: tensor(0.2536)
Local adapation with distilling: 0.0001
training loss: tensor(0.8373) feature loss: tensor(0.2561)
         GM acc on global data: 0.4014 length of data: 10000
-------------Round number:  56  -------------
selected users: [92, 79, 23, 68, 52, 38, 73, 9, 59, 27]
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 502
Local adapation with distilling: 0.0001
training loss: tensor(1.0767) feature loss: tensor(0.2734)
Local adapation with distilling: 0.0001
training loss: tensor(0.9210) feature loss: tensor(0.2876)
Local adapation with distilling: 0.0001
training loss: tensor(1.2758) feature loss: tensor(0.2740)
Local adapation with distilling: 0.0001
training loss: tensor(0.8947) feature loss: tensor(0.2820)
Local adapation with distilling: 0.0001
training loss: tensor(1.1918) feature loss: tensor(0.2812)
Local adapation with distilling: 0.0001
training loss: tensor(0.7504) feature loss: tensor(0.2997)
Local adapation with distilling: 0.0001
training loss: tensor(0.9872) feature loss: tensor(0.2868)
Local adapation with distilling: 0.0001
training loss: tensor(1.2604) feature loss: tensor(0.2841)
Local adapation with distilling: 0.0001
training loss: tensor(0.9728) feature loss: tensor(0.2836)
Local adapation with distilling: 0.0001
training loss: tensor(1.0349) feature loss: tensor(0.2730)
         GM acc on global data: 0.4002 length of data: 10000
-------------Round number:  57  -------------
selected users: [52, 17, 41, 3, 8, 98, 59, 20, 67, 7]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 492
Local adapation with distilling: 0.0001
training loss: tensor(1.0150) feature loss: tensor(0.3000)
Local adapation with distilling: 0.0001
training loss: tensor(0.8649) feature loss: tensor(0.3023)
Local adapation with distilling: 0.0001
training loss: tensor(0.9322) feature loss: tensor(0.2975)
Local adapation with distilling: 0.0001
training loss: tensor(0.9953) feature loss: tensor(0.2925)
Local adapation with distilling: 0.0001
training loss: tensor(0.9038) feature loss: tensor(0.3067)
Local adapation with distilling: 0.0001
training loss: tensor(0.8228) feature loss: tensor(0.3045)
Local adapation with distilling: 0.0001
training loss: tensor(0.9051) feature loss: tensor(0.3058)
Local adapation with distilling: 0.0001
training loss: tensor(1.0231) feature loss: tensor(0.2951)
Local adapation with distilling: 0.0001
training loss: tensor(0.9456) feature loss: tensor(0.3034)
Local adapation with distilling: 0.0001
training loss: tensor(1.0218) feature loss: tensor(0.2946)
         GM acc on global data: 0.424 length of data: 10000
-------------Round number:  58  -------------
selected users: [43, 58, 8, 31, 70, 45, 69, 95, 50, 4]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 490
Local adapation with distilling: 0.0001
training loss: tensor(1.0175) feature loss: tensor(0.3054)
Local adapation with distilling: 0.0001
training loss: tensor(0.8861) feature loss: tensor(0.3091)
Local adapation with distilling: 0.0001
training loss: tensor(0.8381) feature loss: tensor(0.3107)
Local adapation with distilling: 0.0001
training loss: tensor(1.0163) feature loss: tensor(0.3038)
Local adapation with distilling: 0.0001
training loss: tensor(0.9334) feature loss: tensor(0.3061)
Local adapation with distilling: 0.0001
training loss: tensor(0.8949) feature loss: tensor(0.3060)
Local adapation with distilling: 0.0001
training loss: tensor(0.9633) feature loss: tensor(0.3078)
Local adapation with distilling: 0.0001
training loss: tensor(0.8823) feature loss: tensor(0.3108)
Local adapation with distilling: 0.0001
training loss: tensor(0.9909) feature loss: tensor(0.3053)
Local adapation with distilling: 0.0001
training loss: tensor(1.0670) feature loss: tensor(0.3002)
         GM acc on global data: 0.4083 length of data: 10000
-------------Round number:  59  -------------
selected users: [38, 46, 24, 87, 30, 85, 16, 96, 18, 99]
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.7913) feature loss: tensor(0.3182)
Local adapation with distilling: 0.0001
training loss: tensor(0.8719) feature loss: tensor(0.3085)
Local adapation with distilling: 0.0001
training loss: tensor(0.9569) feature loss: tensor(0.3051)
Local adapation with distilling: 0.0001
training loss: tensor(0.9802) feature loss: tensor(0.2994)
Local adapation with distilling: 0.0001
training loss: tensor(1.0737) feature loss: tensor(0.3038)
Local adapation with distilling: 0.0001
training loss: tensor(0.9614) feature loss: tensor(0.3052)
Local adapation with distilling: 0.0001
training loss: tensor(1.0925) feature loss: tensor(0.2923)
Local adapation with distilling: 0.0001
training loss: tensor(1.1881) feature loss: tensor(0.2988)
Local adapation with distilling: 0.0001
training loss: tensor(1.0068) feature loss: tensor(0.3063)
Local adapation with distilling: 0.0001
training loss: tensor(0.9754) feature loss: tensor(0.3050)
         GM acc on global data: 0.4312 length of data: 10000
-------------Round number:  60  -------------
selected users: [88, 4, 79, 14, 55, 3, 19, 28, 94, 25]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.9749) feature loss: tensor(0.2822)
Local adapation with distilling: 0.0001
training loss: tensor(0.9361) feature loss: tensor(0.2810)
Local adapation with distilling: 0.0001
training loss: tensor(0.8362) feature loss: tensor(0.2892)
Local adapation with distilling: 0.0001
training loss: tensor(0.9410) feature loss: tensor(0.2826)
Local adapation with distilling: 0.0001
training loss: tensor(0.9783) feature loss: tensor(0.2740)
Local adapation with distilling: 0.0001
training loss: tensor(0.9476) feature loss: tensor(0.2789)
Local adapation with distilling: 0.0001
training loss: tensor(0.9253) feature loss: tensor(0.2809)
Local adapation with distilling: 0.0001
training loss: tensor(1.1493) feature loss: tensor(0.2859)
Local adapation with distilling: 0.0001
training loss: tensor(0.9587) feature loss: tensor(0.2723)
Local adapation with distilling: 0.0001
training loss: tensor(0.9388) feature loss: tensor(0.2829)
         GM acc on global data: 0.4177 length of data: 10000
-------------Round number:  61  -------------
selected users: [83, 1, 55, 9, 31, 28, 96, 29, 86, 63]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.0001
training loss: tensor(0.9777) feature loss: tensor(0.2899)
Local adapation with distilling: 0.0001
training loss: tensor(0.8854) feature loss: tensor(0.2921)
Local adapation with distilling: 0.0001
training loss: tensor(0.8651) feature loss: tensor(0.2910)
Local adapation with distilling: 0.0001
training loss: tensor(1.0840) feature loss: tensor(0.2919)
Local adapation with distilling: 0.0001
training loss: tensor(0.9266) feature loss: tensor(0.2888)
Local adapation with distilling: 0.0001
training loss: tensor(1.0898) feature loss: tensor(0.3008)
Local adapation with distilling: 0.0001
training loss: tensor(1.1222) feature loss: tensor(0.2858)
Local adapation with distilling: 0.0001
training loss: tensor(0.8024) feature loss: tensor(0.2955)
Local adapation with distilling: 0.0001
training loss: tensor(0.8643) feature loss: tensor(0.2904)
Local adapation with distilling: 0.0001
training loss: tensor(0.8150) feature loss: tensor(0.2959)
         GM acc on global data: 0.4162 length of data: 10000
-------------Round number:  62  -------------
selected users: [76, 48, 62, 80, 29, 99, 60, 89, 39, 69]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.9622) feature loss: tensor(0.3049)
Local adapation with distilling: 0.0001
training loss: tensor(1.0945) feature loss: tensor(0.3064)
Local adapation with distilling: 0.0001
training loss: tensor(1.1160) feature loss: tensor(0.3024)
Local adapation with distilling: 0.0001
training loss: tensor(0.9628) feature loss: tensor(0.3087)
Local adapation with distilling: 0.0001
training loss: tensor(0.8030) feature loss: tensor(0.3180)
Local adapation with distilling: 0.0001
training loss: tensor(0.9430) feature loss: tensor(0.3097)
Local adapation with distilling: 0.0001
training loss: tensor(1.0583) feature loss: tensor(0.3103)
Local adapation with distilling: 0.0001
training loss: tensor(0.8586) feature loss: tensor(0.3148)
Local adapation with distilling: 0.0001
training loss: tensor(0.9091) feature loss: tensor(0.3167)
Local adapation with distilling: 0.0001
training loss: tensor(0.8891) feature loss: tensor(0.3136)
         GM acc on global data: 0.4115 length of data: 10000
-------------Round number:  63  -------------
selected users: [64, 59, 63, 2, 80, 20, 18, 48, 72, 51]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0001
training loss: tensor(1.3158) feature loss: tensor(0.3272)
Local adapation with distilling: 0.0001
training loss: tensor(0.8949) feature loss: tensor(0.3532)
Local adapation with distilling: 0.0001
training loss: tensor(0.8804) feature loss: tensor(0.3476)
Local adapation with distilling: 0.0001
training loss: tensor(0.9144) feature loss: tensor(0.3498)
Local adapation with distilling: 0.0001
training loss: tensor(0.8967) feature loss: tensor(0.3465)
Local adapation with distilling: 0.0001
training loss: tensor(1.0048) feature loss: tensor(0.3444)
Local adapation with distilling: 0.0001
training loss: tensor(1.0350) feature loss: tensor(0.3399)
Local adapation with distilling: 0.0001
training loss: tensor(0.9945) feature loss: tensor(0.3457)
Local adapation with distilling: 0.0001
training loss: tensor(1.0534) feature loss: tensor(0.3466)
Local adapation with distilling: 0.0001
training loss: tensor(1.1173) feature loss: tensor(0.3434)
         GM acc on global data: 0.4305 length of data: 10000
-------------Round number:  64  -------------
selected users: [17, 22, 60, 92, 23, 19, 71, 94, 40, 49]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 492
Local adapation with distilling: 0.0001
training loss: tensor(0.9752) feature loss: tensor(0.3189)
Local adapation with distilling: 0.0001
training loss: tensor(1.1624) feature loss: tensor(0.3273)
Local adapation with distilling: 0.0001
training loss: tensor(0.9212) feature loss: tensor(0.3208)
Local adapation with distilling: 0.0001
training loss: tensor(1.0521) feature loss: tensor(0.3117)
Local adapation with distilling: 0.0001
training loss: tensor(1.1210) feature loss: tensor(0.3109)
Local adapation with distilling: 0.0001
training loss: tensor(0.9464) feature loss: tensor(0.3197)
Local adapation with distilling: 0.0001
training loss: tensor(0.8903) feature loss: tensor(0.3236)
Local adapation with distilling: 0.0001
training loss: tensor(1.0461) feature loss: tensor(0.3095)
Local adapation with distilling: 0.0001
training loss: tensor(0.9545) feature loss: tensor(0.3207)
Local adapation with distilling: 0.0001
training loss: tensor(0.9716) feature loss: tensor(0.3193)
         GM acc on global data: 0.4337 length of data: 10000
-------------Round number:  65  -------------
selected users: [37, 81, 39, 61, 76, 90, 27, 86, 28, 69]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.8789) feature loss: tensor(0.2775)
Local adapation with distilling: 0.0001
training loss: tensor(1.0370) feature loss: tensor(0.2802)
Local adapation with distilling: 0.0001
training loss: tensor(0.8306) feature loss: tensor(0.2860)
Local adapation with distilling: 0.0001
training loss: tensor(0.9585) feature loss: tensor(0.2720)
Local adapation with distilling: 0.0001
training loss: tensor(0.8746) feature loss: tensor(0.2800)
Local adapation with distilling: 0.0001
training loss: tensor(1.0034) feature loss: tensor(0.2706)
Local adapation with distilling: 0.0001
training loss: tensor(0.9971) feature loss: tensor(0.2740)
Local adapation with distilling: 0.0001
training loss: tensor(0.8430) feature loss: tensor(0.2850)
Local adapation with distilling: 0.0001
training loss: tensor(1.0358) feature loss: tensor(0.2895)
Local adapation with distilling: 0.0001
training loss: tensor(0.8162) feature loss: tensor(0.2863)
         GM acc on global data: 0.4444 length of data: 10000
-------------Round number:  66  -------------
selected users: [8, 93, 4, 5, 52, 41, 0, 73, 88, 68]
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.9156) feature loss: tensor(0.2949)
Local adapation with distilling: 0.0001
training loss: tensor(1.0055) feature loss: tensor(0.2912)
Local adapation with distilling: 0.0001
training loss: tensor(0.9013) feature loss: tensor(0.2883)
Local adapation with distilling: 0.0001
training loss: tensor(1.0797) feature loss: tensor(0.2858)
Local adapation with distilling: 0.0001
training loss: tensor(1.1114) feature loss: tensor(0.2886)
Local adapation with distilling: 0.0001
training loss: tensor(0.9452) feature loss: tensor(0.2900)
Local adapation with distilling: 0.0001
training loss: tensor(0.9112) feature loss: tensor(0.2916)
Local adapation with distilling: 0.0001
training loss: tensor(0.9502) feature loss: tensor(0.2948)
Local adapation with distilling: 0.0001
training loss: tensor(0.9333) feature loss: tensor(0.2939)
Local adapation with distilling: 0.0001
training loss: tensor(0.9627) feature loss: tensor(0.2940)
         GM acc on global data: 0.4285 length of data: 10000
-------------Round number:  67  -------------
selected users: [17, 24, 64, 93, 97, 29, 3, 70, 82, 11]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 504
Local adapation with distilling: 0.0001
training loss: tensor(0.8087) feature loss: tensor(0.3068)
Local adapation with distilling: 0.0001
training loss: tensor(0.8701) feature loss: tensor(0.2976)
Local adapation with distilling: 0.0001
training loss: tensor(1.0346) feature loss: tensor(0.2878)
Local adapation with distilling: 0.0001
training loss: tensor(0.8470) feature loss: tensor(0.3075)
Local adapation with distilling: 0.0001
training loss: tensor(0.9883) feature loss: tensor(0.3021)
Local adapation with distilling: 0.0001
training loss: tensor(0.8112) feature loss: tensor(0.3079)
Local adapation with distilling: 0.0001
training loss: tensor(0.9322) feature loss: tensor(0.2987)
Local adapation with distilling: 0.0001
training loss: tensor(0.8935) feature loss: tensor(0.3010)
Local adapation with distilling: 0.0001
training loss: tensor(0.9761) feature loss: tensor(0.3021)
Local adapation with distilling: 0.0001
training loss: tensor(0.8386) feature loss: tensor(0.3061)
         GM acc on global data: 0.4409 length of data: 10000
-------------Round number:  68  -------------
selected users: [29, 30, 16, 5, 38, 71, 76, 94, 99, 95]
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.0001
training loss: tensor(0.7176) feature loss: tensor(0.2769)
Local adapation with distilling: 0.0001
training loss: tensor(0.9779) feature loss: tensor(0.2560)
Local adapation with distilling: 0.0001
training loss: tensor(0.8887) feature loss: tensor(0.2601)
Local adapation with distilling: 0.0001
training loss: tensor(0.9124) feature loss: tensor(0.2603)
Local adapation with distilling: 0.0001
training loss: tensor(0.6989) feature loss: tensor(0.2784)
Local adapation with distilling: 0.0001
training loss: tensor(0.7645) feature loss: tensor(0.2712)
Local adapation with distilling: 0.0001
training loss: tensor(0.7921) feature loss: tensor(0.2678)
Local adapation with distilling: 0.0001
training loss: tensor(0.7842) feature loss: tensor(0.2704)
Local adapation with distilling: 0.0001
training loss: tensor(0.8618) feature loss: tensor(0.2628)
Local adapation with distilling: 0.0001
training loss: tensor(0.8111) feature loss: tensor(0.2670)
         GM acc on global data: 0.44 length of data: 10000
-------------Round number:  69  -------------
selected users: [72, 31, 13, 83, 33, 8, 26, 89, 64, 97]
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.9008) feature loss: tensor(0.3036)
Local adapation with distilling: 0.0001
training loss: tensor(0.9505) feature loss: tensor(0.2963)
Local adapation with distilling: 0.0001
training loss: tensor(0.9385) feature loss: tensor(0.2969)
Local adapation with distilling: 0.0001
training loss: tensor(0.9741) feature loss: tensor(0.2963)
Local adapation with distilling: 0.0001
training loss: tensor(0.9138) feature loss: tensor(0.2969)
Local adapation with distilling: 0.0001
training loss: tensor(0.8454) feature loss: tensor(0.3051)
Local adapation with distilling: 0.0001
training loss: tensor(0.8341) feature loss: tensor(0.3036)
Local adapation with distilling: 0.0001
training loss: tensor(0.8112) feature loss: tensor(0.3015)
Local adapation with distilling: 0.0001
training loss: tensor(0.9635) feature loss: tensor(0.2864)
Local adapation with distilling: 0.0001
training loss: tensor(0.9739) feature loss: tensor(0.2964)
         GM acc on global data: 0.4326 length of data: 10000
-------------Round number:  70  -------------
selected users: [81, 43, 88, 32, 50, 71, 73, 55, 42, 2]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(1.0064) feature loss: tensor(0.3264)
Local adapation with distilling: 0.0001
training loss: tensor(0.9354) feature loss: tensor(0.3191)
Local adapation with distilling: 0.0001
training loss: tensor(0.8592) feature loss: tensor(0.3248)
Local adapation with distilling: 0.0001
training loss: tensor(1.1025) feature loss: tensor(0.3100)
Local adapation with distilling: 0.0001
training loss: tensor(0.9214) feature loss: tensor(0.3248)
Local adapation with distilling: 0.0001
training loss: tensor(0.8280) feature loss: tensor(0.3281)
Local adapation with distilling: 0.0001
training loss: tensor(0.8372) feature loss: tensor(0.3266)
Local adapation with distilling: 0.0001
training loss: tensor(0.9078) feature loss: tensor(0.3247)
Local adapation with distilling: 0.0001
training loss: tensor(1.0223) feature loss: tensor(0.3148)
Local adapation with distilling: 0.0001
training loss: tensor(0.8712) feature loss: tensor(0.3291)
         GM acc on global data: 0.4245 length of data: 10000
-------------Round number:  71  -------------
selected users: [41, 84, 98, 42, 75, 25, 60, 19, 52, 29]
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(0.8705) feature loss: tensor(0.3020)
Local adapation with distilling: 0.0001
training loss: tensor(0.9540) feature loss: tensor(0.2942)
Local adapation with distilling: 0.0001
training loss: tensor(0.8511) feature loss: tensor(0.3055)
Local adapation with distilling: 0.0001
training loss: tensor(0.9604) feature loss: tensor(0.2989)
Local adapation with distilling: 0.0001
training loss: tensor(0.8902) feature loss: tensor(0.3045)
Local adapation with distilling: 0.0001
training loss: tensor(0.9608) feature loss: tensor(0.3024)
Local adapation with distilling: 0.0001
training loss: tensor(0.8634) feature loss: tensor(0.3009)
Local adapation with distilling: 0.0001
training loss: tensor(0.8852) feature loss: tensor(0.3016)
Local adapation with distilling: 0.0001
training loss: tensor(0.9965) feature loss: tensor(0.2975)
Local adapation with distilling: 0.0001
training loss: tensor(0.8052) feature loss: tensor(0.3082)
         GM acc on global data: 0.4358 length of data: 10000
-------------Round number:  72  -------------
selected users: [76, 82, 43, 16, 84, 95, 78, 91, 30, 22]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 501
Local adapation with distilling: 0.0001
training loss: tensor(0.8466) feature loss: tensor(0.2917)
Local adapation with distilling: 0.0001
training loss: tensor(0.9195) feature loss: tensor(0.2921)
Local adapation with distilling: 0.0001
training loss: tensor(0.8660) feature loss: tensor(0.2952)
Local adapation with distilling: 0.0001
training loss: tensor(0.9183) feature loss: tensor(0.2912)
Local adapation with distilling: 0.0001
training loss: tensor(0.9090) feature loss: tensor(0.2822)
Local adapation with distilling: 0.0001
training loss: tensor(0.8576) feature loss: tensor(0.2923)
Local adapation with distilling: 0.0001
training loss: tensor(0.9232) feature loss: tensor(0.2975)
Local adapation with distilling: 0.0001
training loss: tensor(0.9252) feature loss: tensor(0.2880)
Local adapation with distilling: 0.0001
training loss: tensor(0.9927) feature loss: tensor(0.2861)
Local adapation with distilling: 0.0001
training loss: tensor(1.1047) feature loss: tensor(0.2995)
         GM acc on global data: 0.4171 length of data: 10000
-------------Round number:  73  -------------
selected users: [49, 14, 34, 70, 90, 35, 68, 76, 80, 9]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.9194) feature loss: tensor(0.2818)
Local adapation with distilling: 0.0001
training loss: tensor(0.8518) feature loss: tensor(0.2834)
Local adapation with distilling: 0.0001
training loss: tensor(0.8897) feature loss: tensor(0.2821)
Local adapation with distilling: 0.0001
training loss: tensor(0.8508) feature loss: tensor(0.2784)
Local adapation with distilling: 0.0001
training loss: tensor(0.9189) feature loss: tensor(0.2706)
Local adapation with distilling: 0.0001
training loss: tensor(1.0047) feature loss: tensor(0.2716)
Local adapation with distilling: 0.0001
training loss: tensor(0.9185) feature loss: tensor(0.2827)
Local adapation with distilling: 0.0001
training loss: tensor(0.7721) feature loss: tensor(0.2824)
Local adapation with distilling: 0.0001
training loss: tensor(0.8026) feature loss: tensor(0.2794)
Local adapation with distilling: 0.0001
training loss: tensor(1.0175) feature loss: tensor(0.2770)
         GM acc on global data: 0.4402 length of data: 10000
-------------Round number:  74  -------------
selected users: [85, 64, 63, 80, 6, 12, 43, 17, 7, 8]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0001
training loss: tensor(0.9440) feature loss: tensor(0.2990)
Local adapation with distilling: 0.0001
training loss: tensor(1.0102) feature loss: tensor(0.2936)
Local adapation with distilling: 0.0001
training loss: tensor(0.8694) feature loss: tensor(0.3068)
Local adapation with distilling: 0.0001
training loss: tensor(0.8141) feature loss: tensor(0.3058)
Local adapation with distilling: 0.0001
training loss: tensor(1.1011) feature loss: tensor(0.2878)
Local adapation with distilling: 0.0001
training loss: tensor(1.0317) feature loss: tensor(0.2967)
Local adapation with distilling: 0.0001
training loss: tensor(0.8543) feature loss: tensor(0.3072)
Local adapation with distilling: 0.0001
training loss: tensor(0.9065) feature loss: tensor(0.3058)
Local adapation with distilling: 0.0001
training loss: tensor(1.0149) feature loss: tensor(0.2944)
Local adapation with distilling: 0.0001
training loss: tensor(0.9002) feature loss: tensor(0.3060)
         GM acc on global data: 0.4525 length of data: 10000
save a model
-------------Round number:  75  -------------
selected users: [36, 7, 6, 45, 56, 54, 22, 37, 53, 68]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 515
Local adapation with distilling: 0.0001
training loss: tensor(1.0149) feature loss: tensor(0.3996)
Local adapation with distilling: 0.0001
training loss: tensor(1.1198) feature loss: tensor(0.4230)
Local adapation with distilling: 0.0001
training loss: tensor(1.0169) feature loss: tensor(0.3951)
Local adapation with distilling: 0.0001
training loss: tensor(1.0002) feature loss: tensor(0.3833)
Local adapation with distilling: 0.0001
training loss: tensor(0.9828) feature loss: tensor(0.4060)
Local adapation with distilling: 0.0001
training loss: tensor(1.1403) feature loss: tensor(0.3544)
Local adapation with distilling: 0.0001
training loss: tensor(1.2245) feature loss: tensor(0.4076)
Local adapation with distilling: 0.0001
training loss: tensor(0.8034) feature loss: tensor(0.3247)
Local adapation with distilling: 0.0001
training loss: tensor(1.0035) feature loss: tensor(0.4075)
Local adapation with distilling: 0.0001
training loss: tensor(0.9399) feature loss: tensor(0.4039)
         GM acc on global data: 0.47 length of data: 10000
save a model
-------------Round number:  76  -------------
selected users: [38, 37, 32, 50, 10, 94, 19, 44, 86, 23]
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.7551) feature loss: tensor(0.2998)
Local adapation with distilling: 0.0001
training loss: tensor(0.7809) feature loss: tensor(0.2905)
Local adapation with distilling: 0.0001
training loss: tensor(1.0369) feature loss: tensor(0.2846)
Local adapation with distilling: 0.0001
training loss: tensor(0.9076) feature loss: tensor(0.2886)
Local adapation with distilling: 0.0001
training loss: tensor(0.9331) feature loss: tensor(0.2861)
Local adapation with distilling: 0.0001
training loss: tensor(0.8139) feature loss: tensor(0.2895)
Local adapation with distilling: 0.0001
training loss: tensor(0.8373) feature loss: tensor(0.2904)
Local adapation with distilling: 0.0001
training loss: tensor(0.9820) feature loss: tensor(0.2835)
Local adapation with distilling: 0.0001
training loss: tensor(0.8125) feature loss: tensor(0.2915)
Local adapation with distilling: 0.0001
training loss: tensor(1.0634) feature loss: tensor(0.2833)
         GM acc on global data: 0.4661 length of data: 10000
-------------Round number:  77  -------------
selected users: [5, 93, 41, 96, 16, 42, 81, 91, 50, 58]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.9614) feature loss: tensor(0.2853)
Local adapation with distilling: 0.0001
training loss: tensor(0.9041) feature loss: tensor(0.2967)
Local adapation with distilling: 0.0001
training loss: tensor(0.8348) feature loss: tensor(0.2957)
Local adapation with distilling: 0.0001
training loss: tensor(0.9981) feature loss: tensor(0.2918)
Local adapation with distilling: 0.0001
training loss: tensor(0.8612) feature loss: tensor(0.2933)
Local adapation with distilling: 0.0001
training loss: tensor(0.8856) feature loss: tensor(0.2863)
Local adapation with distilling: 0.0001
training loss: tensor(0.9537) feature loss: tensor(0.3039)
Local adapation with distilling: 0.0001
training loss: tensor(0.8885) feature loss: tensor(0.2970)
Local adapation with distilling: 0.0001
training loss: tensor(0.8249) feature loss: tensor(0.2965)
Local adapation with distilling: 0.0001
training loss: tensor(0.8319) feature loss: tensor(0.2920)
         GM acc on global data: 0.4314 length of data: 10000
-------------Round number:  78  -------------
selected users: [9, 46, 7, 63, 15, 2, 74, 31, 5, 36]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.9565) feature loss: tensor(0.3153)
Local adapation with distilling: 0.0001
training loss: tensor(0.8424) feature loss: tensor(0.3155)
Local adapation with distilling: 0.0001
training loss: tensor(0.9173) feature loss: tensor(0.3069)
Local adapation with distilling: 0.0001
training loss: tensor(0.8458) feature loss: tensor(0.3179)
Local adapation with distilling: 0.0001
training loss: tensor(0.9858) feature loss: tensor(0.3201)
Local adapation with distilling: 0.0001
training loss: tensor(0.8418) feature loss: tensor(0.3142)
Local adapation with distilling: 0.0001
training loss: tensor(0.8722) feature loss: tensor(0.3103)
Local adapation with distilling: 0.0001
training loss: tensor(0.9635) feature loss: tensor(0.3085)
Local adapation with distilling: 0.0001
training loss: tensor(0.9144) feature loss: tensor(0.3050)
Local adapation with distilling: 0.0001
training loss: tensor(0.8186) feature loss: tensor(0.3119)
         GM acc on global data: 0.476 length of data: 10000
save a model
-------------Round number:  79  -------------
selected users: [68, 18, 86, 60, 56, 32, 30, 24, 45, 92]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.7948) feature loss: tensor(0.3228)
Local adapation with distilling: 0.0001
training loss: tensor(0.9626) feature loss: tensor(0.3134)
Local adapation with distilling: 0.0001
training loss: tensor(0.7958) feature loss: tensor(0.3262)
Local adapation with distilling: 0.0001
training loss: tensor(0.8947) feature loss: tensor(0.3165)
Local adapation with distilling: 0.0001
training loss: tensor(0.8607) feature loss: tensor(0.3190)
Local adapation with distilling: 0.0001
training loss: tensor(1.0478) feature loss: tensor(0.3131)
Local adapation with distilling: 0.0001
training loss: tensor(0.9389) feature loss: tensor(0.3191)
Local adapation with distilling: 0.0001
training loss: tensor(0.8781) feature loss: tensor(0.3153)
Local adapation with distilling: 0.0001
training loss: tensor(0.8987) feature loss: tensor(0.3189)
Local adapation with distilling: 0.0001
training loss: tensor(0.9747) feature loss: tensor(0.3102)
         GM acc on global data: 0.4861 length of data: 10000
save a model
-------------Round number:  80  -------------
selected users: [37, 65, 95, 53, 66, 30, 73, 85, 45, 36]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 509
Local adapation with distilling: 0.0001
training loss: tensor(0.8641) feature loss: tensor(0.2978)
Local adapation with distilling: 0.0001
training loss: tensor(0.9645) feature loss: tensor(0.2975)
Local adapation with distilling: 0.0001
training loss: tensor(0.8782) feature loss: tensor(0.3020)
Local adapation with distilling: 0.0001
training loss: tensor(0.8898) feature loss: tensor(0.3047)
Local adapation with distilling: 0.0001
training loss: tensor(0.9807) feature loss: tensor(0.2935)
Local adapation with distilling: 0.0001
training loss: tensor(0.8909) feature loss: tensor(0.2990)
Local adapation with distilling: 0.0001
training loss: tensor(0.9077) feature loss: tensor(0.3062)
Local adapation with distilling: 0.0001
training loss: tensor(0.9119) feature loss: tensor(0.2988)
Local adapation with distilling: 0.0001
training loss: tensor(0.8735) feature loss: tensor(0.3030)
Local adapation with distilling: 0.0001
training loss: tensor(0.8431) feature loss: tensor(0.2999)
         GM acc on global data: 0.4749 length of data: 10000
-------------Round number:  81  -------------
selected users: [73, 89, 41, 78, 51, 21, 30, 69, 8, 5]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.8159) feature loss: tensor(0.3324)
Local adapation with distilling: 0.0001
training loss: tensor(0.8582) feature loss: tensor(0.3233)
Local adapation with distilling: 0.0001
training loss: tensor(0.8745) feature loss: tensor(0.3239)
Local adapation with distilling: 0.0001
training loss: tensor(0.8713) feature loss: tensor(0.3266)
Local adapation with distilling: 0.0001
training loss: tensor(0.9824) feature loss: tensor(0.3193)
Local adapation with distilling: 0.0001
training loss: tensor(0.9681) feature loss: tensor(0.3177)
Local adapation with distilling: 0.0001
training loss: tensor(0.8701) feature loss: tensor(0.3281)
Local adapation with distilling: 0.0001
training loss: tensor(0.8625) feature loss: tensor(0.3322)
Local adapation with distilling: 0.0001
training loss: tensor(0.8343) feature loss: tensor(0.3288)
Local adapation with distilling: 0.0001
training loss: tensor(0.9224) feature loss: tensor(0.3209)
         GM acc on global data: 0.4588 length of data: 10000
-------------Round number:  82  -------------
selected users: [72, 33, 58, 2, 55, 84, 54, 75, 28, 40]
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.8473) feature loss: tensor(0.3071)
Local adapation with distilling: 0.0001
training loss: tensor(0.8359) feature loss: tensor(0.3058)
Local adapation with distilling: 0.0001
training loss: tensor(0.8080) feature loss: tensor(0.3053)
Local adapation with distilling: 0.0001
training loss: tensor(0.8045) feature loss: tensor(0.3068)
Local adapation with distilling: 0.0001
training loss: tensor(0.8794) feature loss: tensor(0.3027)
Local adapation with distilling: 0.0001
training loss: tensor(0.9073) feature loss: tensor(0.2954)
Local adapation with distilling: 0.0001
training loss: tensor(0.9941) feature loss: tensor(0.2890)
Local adapation with distilling: 0.0001
training loss: tensor(0.8901) feature loss: tensor(0.3019)
Local adapation with distilling: 0.0001
training loss: tensor(1.0439) feature loss: tensor(0.3062)
Local adapation with distilling: 0.0001
training loss: tensor(0.8622) feature loss: tensor(0.3036)
         GM acc on global data: 0.4242 length of data: 10000
-------------Round number:  83  -------------
selected users: [6, 65, 95, 84, 61, 12, 30, 69, 35, 1]
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.9506) feature loss: tensor(0.3014)
Local adapation with distilling: 0.0001
training loss: tensor(0.8819) feature loss: tensor(0.3147)
Local adapation with distilling: 0.0001
training loss: tensor(0.8302) feature loss: tensor(0.3164)
Local adapation with distilling: 0.0001
training loss: tensor(0.8774) feature loss: tensor(0.3083)
Local adapation with distilling: 0.0001
training loss: tensor(0.9333) feature loss: tensor(0.3101)
Local adapation with distilling: 0.0001
training loss: tensor(0.9100) feature loss: tensor(0.3089)
Local adapation with distilling: 0.0001
training loss: tensor(0.8021) feature loss: tensor(0.3169)
Local adapation with distilling: 0.0001
training loss: tensor(0.8443) feature loss: tensor(0.3171)
Local adapation with distilling: 0.0001
training loss: tensor(1.0055) feature loss: tensor(0.3061)
Local adapation with distilling: 0.0001
training loss: tensor(0.9540) feature loss: tensor(0.3163)
         GM acc on global data: 0.4059 length of data: 10000
-------------Round number:  84  -------------
selected users: [94, 55, 80, 1, 90, 11, 32, 8, 6, 82]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 493
Local adapation with distilling: 0.0001
training loss: tensor(0.9546) feature loss: tensor(0.2926)
Local adapation with distilling: 0.0001
training loss: tensor(0.8677) feature loss: tensor(0.2993)
Local adapation with distilling: 0.0001
training loss: tensor(0.8811) feature loss: tensor(0.2959)
Local adapation with distilling: 0.0001
training loss: tensor(0.8814) feature loss: tensor(0.2986)
Local adapation with distilling: 0.0001
training loss: tensor(0.9938) feature loss: tensor(0.2959)
Local adapation with distilling: 0.0001
training loss: tensor(0.8632) feature loss: tensor(0.3029)
Local adapation with distilling: 0.0001
training loss: tensor(1.0573) feature loss: tensor(0.2889)
Local adapation with distilling: 0.0001
training loss: tensor(0.8457) feature loss: tensor(0.3042)
Local adapation with distilling: 0.0001
training loss: tensor(0.9094) feature loss: tensor(0.2952)
Local adapation with distilling: 0.0001
training loss: tensor(0.9413) feature loss: tensor(0.2984)
         GM acc on global data: 0.4346 length of data: 10000
-------------Round number:  85  -------------
selected users: [81, 25, 40, 87, 41, 23, 10, 89, 50, 54]
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(0.8995) feature loss: tensor(0.2787)
Local adapation with distilling: 0.0001
training loss: tensor(0.8355) feature loss: tensor(0.2700)
Local adapation with distilling: 0.0001
training loss: tensor(0.8225) feature loss: tensor(0.2736)
Local adapation with distilling: 0.0001
training loss: tensor(0.8740) feature loss: tensor(0.2680)
Local adapation with distilling: 0.0001
training loss: tensor(0.7466) feature loss: tensor(0.2767)
Local adapation with distilling: 0.0001
training loss: tensor(0.9209) feature loss: tensor(0.2653)
Local adapation with distilling: 0.0001
training loss: tensor(0.8658) feature loss: tensor(0.2719)
Local adapation with distilling: 0.0001
training loss: tensor(0.7873) feature loss: tensor(0.2749)
Local adapation with distilling: 0.0001
training loss: tensor(0.7656) feature loss: tensor(0.2784)
Local adapation with distilling: 0.0001
training loss: tensor(0.8867) feature loss: tensor(0.2659)
         GM acc on global data: 0.4234 length of data: 10000
-------------Round number:  86  -------------
selected users: [69, 74, 34, 68, 42, 0, 32, 88, 8, 3]
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 489
Local adapation with distilling: 0.0001
training loss: tensor(0.8083) feature loss: tensor(0.3076)
Local adapation with distilling: 0.0001
training loss: tensor(0.8228) feature loss: tensor(0.3047)
Local adapation with distilling: 0.0001
training loss: tensor(0.8054) feature loss: tensor(0.3031)
Local adapation with distilling: 0.0001
training loss: tensor(0.7739) feature loss: tensor(0.3113)
Local adapation with distilling: 0.0001
training loss: tensor(0.8737) feature loss: tensor(0.2979)
Local adapation with distilling: 0.0001
training loss: tensor(0.8446) feature loss: tensor(0.3003)
Local adapation with distilling: 0.0001
training loss: tensor(0.8636) feature loss: tensor(0.3018)
Local adapation with distilling: 0.0001
training loss: tensor(0.8249) feature loss: tensor(0.3063)
Local adapation with distilling: 0.0001
training loss: tensor(0.7444) feature loss: tensor(0.3111)
Local adapation with distilling: 0.0001
training loss: tensor(0.8631) feature loss: tensor(0.2984)
         GM acc on global data: 0.4673 length of data: 10000
-------------Round number:  87  -------------
selected users: [16, 81, 85, 32, 39, 25, 26, 29, 65, 7]
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 506
Local adapation with distilling: 0.0001
training loss: tensor(0.9020) feature loss: tensor(0.3001)
Local adapation with distilling: 0.0001
training loss: tensor(0.9993) feature loss: tensor(0.3092)
Local adapation with distilling: 0.0001
training loss: tensor(0.8801) feature loss: tensor(0.2982)
Local adapation with distilling: 0.0001
training loss: tensor(0.8972) feature loss: tensor(0.2983)
Local adapation with distilling: 0.0001
training loss: tensor(1.0244) feature loss: tensor(0.3008)
Local adapation with distilling: 0.0001
training loss: tensor(0.9121) feature loss: tensor(0.3026)
Local adapation with distilling: 0.0001
training loss: tensor(0.8611) feature loss: tensor(0.3028)
Local adapation with distilling: 0.0001
training loss: tensor(0.8334) feature loss: tensor(0.3067)
Local adapation with distilling: 0.0001
training loss: tensor(0.9267) feature loss: tensor(0.2997)
Local adapation with distilling: 0.0001
training loss: tensor(0.8962) feature loss: tensor(0.2948)
         GM acc on global data: 0.4857 length of data: 10000
-------------Round number:  88  -------------
selected users: [95, 53, 43, 84, 2, 74, 55, 31, 54, 97]
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.8180) feature loss: tensor(0.3012)
Local adapation with distilling: 0.0001
training loss: tensor(0.8334) feature loss: tensor(0.2986)
Local adapation with distilling: 0.0001
training loss: tensor(0.8426) feature loss: tensor(0.2926)
Local adapation with distilling: 0.0001
training loss: tensor(0.8873) feature loss: tensor(0.2904)
Local adapation with distilling: 0.0001
training loss: tensor(0.8567) feature loss: tensor(0.3016)
Local adapation with distilling: 0.0001
