nohup: ignoring input
================================================================================
Summary of training process:
Dataset:                 Cifar10
Batch size:              64
Learing rate :           0.001
personal learning rate : 0.001
Number of total clients: 100
Split parameter        : 3.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 0
Feature reduction      : 64
Local training loss    : CE_KL2
Loss of beta           : 1.0
Algorithm              : FedPP
Modelname              : MOBNET
Mode                   : training
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,0.298,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.327,0.00,496
Client   1,0.00,0.321,0.00,0.00,0.00,0.358,0.00,0.00,0.00,0.321,520
Client   2,0.307,0.346,0.346,0.00,0.00,0.00,0.00,0.00,0.00,0.00,482
Client   3,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client   4,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client   5,0.00,0.00,0.327,0.00,0.308,0.365,0.00,0.00,0.00,0.00,510
Client   6,0.00,0.00,0.319,0.00,0.300,0.00,0.382,0.00,0.00,0.00,524
Client   7,0.00,0.00,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.351,476
Client   8,0.00,0.347,0.00,0.00,0.00,0.00,0.00,0.316,0.337,0.00,481
Client   9,0.286,0.00,0.00,0.00,0.00,0.00,0.389,0.00,0.00,0.325,514
Client  10,0.315,0.00,0.00,0.00,0.00,0.00,0.00,0.326,0.00,0.358,466
Client  11,0.00,0.313,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.313,534
Client  12,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  13,0.00,0.329,0.00,0.352,0.00,0.00,0.00,0.00,0.319,0.00,508
Client  14,0.00,0.00,0.00,0.359,0.315,0.00,0.00,0.00,0.325,0.00,498
Client  15,0.00,0.00,0.00,0.00,0.00,0.361,0.00,0.00,0.315,0.324,515
Client  16,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client  17,0.00,0.00,0.00,0.00,0.00,0.346,0.372,0.283,0.00,0.00,538
Client  18,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.00,0.327,0.337,496
Client  19,0.00,0.00,0.00,0.356,0.312,0.00,0.00,0.00,0.00,0.332,503
Client  20,0.309,0.351,0.00,0.00,0.00,0.00,0.00,0.00,0.340,0.00,476
Client  21,0.312,0.355,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.00,471
Client  22,0.00,0.00,0.326,0.349,0.00,0.00,0.00,0.00,0.00,0.326,513
Client  23,0.298,0.00,0.339,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  24,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client  25,0.00,0.00,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.331,504
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,0.378,0.00,0.306,0.316,529
Client  27,0.00,0.00,0.00,0.368,0.320,0.00,0.00,0.312,0.00,0.00,487
Client  28,0.00,0.00,0.00,0.00,0.00,0.360,0.00,0.00,0.315,0.325,514
Client  29,0.00,0.00,0.00,0.328,0.00,0.00,0.366,0.00,0.00,0.306,546
Client  30,0.309,0.00,0.352,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  31,0.00,0.344,0.00,0.00,0.00,0.00,0.00,0.313,0.00,0.344,486
Client  32,0.00,0.00,0.335,0.359,0.00,0.00,0.00,0.305,0.00,0.00,498
Client  33,0.302,0.00,0.00,0.368,0.00,0.00,0.00,0.00,0.331,0.00,487
Client  34,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  35,0.00,0.315,0.00,0.337,0.00,0.348,0.00,0.00,0.00,0.00,531
Client  36,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  37,0.00,0.00,0.00,0.00,0.307,0.00,0.394,0.299,0.00,0.00,508
Client  38,0.00,0.00,0.00,0.00,0.00,0.339,0.366,0.00,0.295,0.00,546
Client  39,0.00,0.00,0.322,0.00,0.00,0.356,0.00,0.00,0.00,0.322,519
Client  40,0.320,0.00,0.00,0.00,0.00,0.00,0.00,0.330,0.350,0.00,460
Client  41,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  42,0.00,0.00,0.352,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  43,0.298,0.00,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.339,493
Client  44,0.313,0.00,0.355,0.00,0.332,0.00,0.00,0.00,0.00,0.00,470
Client  45,0.00,0.331,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.00,504
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,0.385,0.293,0.00,0.322,519
Client  47,0.00,0.00,0.00,0.00,0.333,0.00,0.00,0.323,0.344,0.00,468
Client  48,0.309,0.352,0.00,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  49,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.325,0.337,495
Client  50,0.298,0.339,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  51,0.00,0.344,0.344,0.00,0.00,0.00,0.00,0.311,0.00,0.00,485
Client  52,0.286,0.00,0.325,0.00,0.00,0.00,0.389,0.00,0.00,0.00,514
Client  53,0.00,0.00,0.326,0.350,0.00,0.00,0.00,0.00,0.00,0.324,512
Client  54,0.00,0.00,0.319,0.00,0.298,0.00,0.382,0.00,0.00,0.00,523
Client  55,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  56,0.00,0.303,0.00,0.00,0.00,0.335,0.362,0.00,0.00,0.00,552
Client  57,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  58,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  59,0.00,0.322,0.00,0.00,0.00,0.357,0.00,0.00,0.00,0.320,518
Client  60,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  61,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  62,0.316,0.00,0.359,0.00,0.00,0.00,0.00,0.325,0.00,0.00,465
Client  63,0.00,0.00,0.00,0.354,0.00,0.00,0.00,0.00,0.318,0.328,506
Client  64,0.00,0.00,0.00,0.00,0.317,0.376,0.00,0.307,0.00,0.00,492
Client  65,0.295,0.00,0.00,0.00,0.00,0.371,0.00,0.00,0.00,0.333,498
Client  66,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  67,0.00,0.351,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.00,473
Client  68,0.00,0.00,0.00,0.00,0.302,0.00,0.387,0.00,0.311,0.00,517
Client  69,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.327,0.337,493
Client  70,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  71,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  72,0.00,0.00,0.324,0.00,0.00,0.361,0.00,0.00,0.314,0.00,512
Client  73,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  74,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  75,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  76,0.00,0.00,0.00,0.333,0.292,0.00,0.375,0.00,0.00,0.00,534
Client  77,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  78,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  79,0.00,0.333,0.333,0.00,0.00,0.00,0.00,0.00,0.00,0.333,498
Client  80,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  81,0.287,0.324,0.00,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  82,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  83,0.00,0.00,0.329,0.352,0.00,0.00,0.00,0.00,0.319,0.00,505
Client  84,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  85,0.00,0.00,0.00,0.00,0.311,0.369,0.00,0.00,0.321,0.00,502
Client  86,0.00,0.00,0.312,0.00,0.00,0.00,0.376,0.00,0.00,0.312,532
Client  87,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  88,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  89,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  90,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  91,0.00,0.314,0.00,0.336,0.00,0.350,0.00,0.00,0.00,0.00,529
Client  92,0.313,0.00,0.354,0.00,0.333,0.00,0.00,0.00,0.00,0.00,469
Client  93,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  94,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  95,0.00,0.331,0.00,0.00,0.00,0.369,0.00,0.301,0.00,0.00,502
Client  96,0.287,0.00,0.324,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  97,0.00,0.00,0.347,0.00,0.00,0.00,0.00,0.316,0.337,0.00,478
Client  98,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  99,0.313,0.00,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.354,469
0 [0 5 8] [0 5 8] [1 2 3 4 6 7 9]
0 training: Counter({5: 186, 8: 162, 0: 148}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000})
1 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
1 training: Counter({5: 186, 1: 167, 9: 167}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
2 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
2 training: Counter({1: 167, 2: 167, 0: 148}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
3 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
3 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
4 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
4 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
5 [2 4 5] [2 4 5] [0 1 3 6 7 8 9]
5 training: Counter({5: 186, 2: 167, 4: 157}) testing iid: Counter({5: 1000, 4: 1000, 2: 1000})
6 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
6 training: Counter({6: 200, 2: 167, 4: 157}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
7 [4 7 9] [4 7 9] [0 1 2 3 5 6 8]
7 training: Counter({9: 167, 4: 157, 7: 152}) testing iid: Counter({9: 1000, 7: 1000, 4: 1000})
8 [1 7 8] [1 7 8] [0 2 3 4 5 6 9]
8 training: Counter({1: 167, 8: 162, 7: 152}) testing iid: Counter({8: 1000, 1: 1000, 7: 1000})
9 [0 6 9] [0 6 9] [1 2 3 4 5 7 8]
9 training: Counter({6: 200, 9: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000})
10 [0 7 9] [0 7 9] [1 2 3 4 5 6 8]
10 training: Counter({9: 167, 7: 152, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 7: 1000})
11 [1 6 9] [1 6 9] [0 2 3 4 5 7 8]
11 training: Counter({6: 200, 1: 167, 9: 167}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000})
12 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
12 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
13 [1 3 8] [1 3 8] [0 2 4 5 6 7 9]
13 training: Counter({3: 179, 1: 167, 8: 162}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000})
14 [3 4 8] [3 4 8] [0 1 2 5 6 7 9]
14 training: Counter({3: 179, 8: 162, 4: 157}) testing iid: Counter({3: 1000, 8: 1000, 4: 1000})
15 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
15 training: Counter({5: 186, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
16 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
16 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
17 [5 6 7] [5 6 7] [0 1 2 3 4 8 9]
17 training: Counter({6: 200, 5: 186, 7: 152}) testing iid: Counter({6: 1000, 5: 1000, 7: 1000})
18 [1 8 9] [1 8 9] [0 2 3 4 5 6 7]
18 training: Counter({1: 167, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000})
19 [3 4 9] [3 4 9] [0 1 2 5 6 7 8]
19 training: Counter({3: 179, 9: 167, 4: 157}) testing iid: Counter({3: 1000, 9: 1000, 4: 1000})
20 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
20 training: Counter({1: 167, 8: 162, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
21 [0 1 4] [0 1 4] [2 3 5 6 7 8 9]
21 training: Counter({1: 167, 4: 157, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 4: 1000})
22 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
22 training: Counter({3: 179, 2: 167, 9: 167}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
23 [0 2 3] [0 2 3] [1 4 5 6 7 8 9]
23 training: Counter({3: 179, 2: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 2: 1000})
24 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
24 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
25 [5 7 9] [5 7 9] [0 1 2 3 4 6 8]
25 training: Counter({5: 185, 9: 167, 7: 152}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000})
26 [6 8 9] [6 8 9] [0 1 2 3 4 5 7]
26 training: Counter({6: 200, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000})
27 [3 4 7] [3 4 7] [0 1 2 5 6 8 9]
27 training: Counter({3: 179, 4: 156, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 4: 1000})
28 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
28 training: Counter({5: 185, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
29 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
29 training: Counter({6: 200, 3: 179, 9: 167}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
30 [0 2 8] [0 2 8] [1 3 4 5 6 7 9]
30 training: Counter({2: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 2: 1000})
31 [1 7 9] [1 7 9] [0 2 3 4 5 6 8]
31 training: Counter({1: 167, 9: 167, 7: 152}) testing iid: Counter({1: 1000, 9: 1000, 7: 1000})
32 [2 3 7] [2 3 7] [0 1 4 5 6 8 9]
32 training: Counter({3: 179, 2: 167, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 2: 1000})
33 [0 3 8] [0 3 8] [1 2 4 5 6 7 9]
33 training: Counter({3: 179, 8: 161, 0: 147}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000})
34 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
34 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
35 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
35 training: Counter({5: 185, 3: 179, 1: 167}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
36 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
36 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
37 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
37 training: Counter({6: 200, 4: 156, 7: 152}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
38 [5 6 8] [5 6 8] [0 1 2 3 4 7 9]
38 training: Counter({6: 200, 5: 185, 8: 161}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000})
39 [2 5 9] [2 5 9] [0 1 3 4 6 7 8]
39 training: Counter({5: 185, 2: 167, 9: 167}) testing iid: Counter({9: 1000, 5: 1000, 2: 1000})
40 [0 7 8] [0 7 8] [1 2 3 4 5 6 9]
40 training: Counter({8: 161, 7: 152, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 7: 1000})
41 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
41 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
42 [2 4 7] [2 4 7] [0 1 3 5 6 8 9]
42 training: Counter({2: 167, 4: 156, 7: 152}) testing iid: Counter({7: 1000, 4: 1000, 2: 1000})
43 [0 3 9] [0 3 9] [1 2 4 5 6 7 8]
43 training: Counter({3: 179, 9: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000})
44 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
44 training: Counter({2: 167, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
45 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
45 training: Counter({5: 185, 1: 167, 7: 152}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
46 [6 7 9] [6 7 9] [0 1 2 3 4 5 8]
46 training: Counter({6: 200, 9: 167, 7: 152}) testing iid: Counter({6: 1000, 9: 1000, 7: 1000})
47 [4 7 8] [4 7 8] [0 1 2 3 5 6 9]
47 training: Counter({8: 161, 4: 156, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 4: 1000})
48 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
48 training: Counter({1: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
49 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
49 training: Counter({2: 167, 9: 167, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
50 [0 1 3] [0 1 3] [2 4 5 6 7 8 9]
50 training: Counter({3: 179, 1: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000})
51 [1 2 7] [1 2 7] [0 3 4 5 6 8 9]
51 training: Counter({1: 167, 2: 167, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 2: 1000})
52 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
52 training: Counter({6: 200, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
53 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
53 training: Counter({3: 179, 2: 167, 9: 166}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
54 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
54 training: Counter({6: 200, 2: 167, 4: 156}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
55 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
55 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
56 [1 5 6] [1 5 6] [0 2 3 4 7 8 9]
56 training: Counter({6: 200, 5: 185, 1: 167}) testing iid: Counter({6: 1000, 1: 1000, 5: 1000})
57 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
57 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
58 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
58 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
59 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
59 training: Counter({5: 185, 1: 167, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
60 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
60 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
61 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
61 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
62 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
62 training: Counter({2: 167, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
63 [3 8 9] [3 8 9] [0 1 2 4 5 6 7]
63 training: Counter({3: 179, 9: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 9: 1000})
64 [4 5 7] [4 5 7] [0 1 2 3 6 8 9]
64 training: Counter({5: 185, 4: 156, 7: 151}) testing iid: Counter({5: 1000, 7: 1000, 4: 1000})
65 [0 5 9] [0 5 9] [1 2 3 4 6 7 8]
65 training: Counter({5: 185, 9: 166, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 5: 1000})
66 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
66 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
67 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
67 training: Counter({1: 166, 4: 156, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
68 [4 6 8] [4 6 8] [0 1 2 3 5 7 9]
68 training: Counter({6: 200, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 6: 1000, 4: 1000})
69 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
69 training: Counter({2: 166, 9: 166, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
70 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
70 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
71 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
71 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
72 [2 5 8] [2 5 8] [0 1 3 4 6 7 9]
72 training: Counter({5: 185, 2: 166, 8: 161}) testing iid: Counter({8: 1000, 5: 1000, 2: 1000})
73 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
73 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
74 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
74 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
75 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
75 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
76 [3 4 6] [3 4 6] [0 1 2 5 7 8 9]
76 training: Counter({6: 200, 3: 178, 4: 156}) testing iid: Counter({3: 1000, 6: 1000, 4: 1000})
77 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
77 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
78 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
78 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
79 [1 2 9] [1 2 9] [0 3 4 5 6 7 8]
79 training: Counter({1: 166, 2: 166, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 2: 1000})
80 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
80 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
81 [0 1 6] [0 1 6] [2 3 4 5 7 8 9]
81 training: Counter({6: 200, 1: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000})
82 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
82 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
83 [2 3 8] [2 3 8] [0 1 4 5 6 7 9]
83 training: Counter({3: 178, 2: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 2: 1000})
84 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
84 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
85 [4 5 8] [4 5 8] [0 1 2 3 6 7 9]
85 training: Counter({5: 185, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 5: 1000, 4: 1000})
86 [2 6 9] [2 6 9] [0 1 3 4 5 7 8]
86 training: Counter({6: 200, 2: 166, 9: 166}) testing iid: Counter({6: 1000, 9: 1000, 2: 1000})
87 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
87 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
88 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
88 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
89 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
89 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
90 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
90 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
91 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
91 training: Counter({5: 185, 3: 178, 1: 166}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
92 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
92 training: Counter({2: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
93 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
93 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
94 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
94 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
95 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
95 training: Counter({5: 185, 1: 166, 7: 151}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
96 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
96 training: Counter({6: 200, 2: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
97 [2 7 8] [2 7 8] [0 1 3 4 5 6 9]
97 training: Counter({2: 166, 8: 161, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 2: 1000})
98 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
98 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
99 [0 4 9] [0 4 9] [1 2 3 5 6 7 8]
99 training: Counter({9: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 4: 1000})
Num_samples of Training set per client: [496, 520, 482, 531, 491, 510, 524, 476, 481, 514, 466, 534, 481, 508, 498, 515, 531, 538, 496, 503, 476, 471, 513, 493, 491, 504, 529, 487, 514, 546, 475, 486, 498, 487, 475, 531, 508, 508, 546, 519, 460, 475, 475, 493, 470, 504, 519, 468, 475, 495, 493, 485, 514, 512, 523, 483, 552, 507, 508, 518, 481, 507, 465, 506, 492, 498, 544, 473, 517, 493, 483, 507, 512, 524, 483, 483, 534, 464, 524, 498, 481, 513, 464, 505, 481, 502, 532, 476, 483, 544, 476, 529, 469, 524, 507, 502, 513, 478, 483, 469]
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:00<01:08,  1.44it/s]  2%|▏         | 2/100 [00:01<01:06,  1.46it/s]  3%|▎         | 3/100 [00:02<01:05,  1.48it/s]  4%|▍         | 4/100 [00:05<02:36,  1.64s/it]  5%|▌         | 5/100 [00:06<02:08,  1.35s/it]  6%|▌         | 6/100 [00:07<01:48,  1.15s/it]  7%|▋         | 7/100 [00:07<01:33,  1.00s/it]  8%|▊         | 8/100 [00:08<01:22,  1.12it/s]  9%|▉         | 9/100 [00:09<01:15,  1.21it/s] 10%|█         | 10/100 [00:09<01:10,  1.28it/s] 11%|█         | 11/100 [00:10<01:06,  1.33it/s] 12%|█▏        | 12/100 [00:11<01:04,  1.37it/s] 13%|█▎        | 13/100 [00:11<01:02,  1.40it/s] 14%|█▍        | 14/100 [00:12<01:01,  1.41it/s] 15%|█▌        | 15/100 [00:13<00:58,  1.44it/s] 16%|█▌        | 16/100 [00:13<00:57,  1.46it/s] 17%|█▋        | 17/100 [00:14<00:57,  1.44it/s] 18%|█▊        | 18/100 [00:15<00:57,  1.42it/s] 19%|█▉        | 19/100 [00:16<00:57,  1.40it/s] 20%|██        | 20/100 [00:16<00:56,  1.42it/s] 21%|██        | 21/100 [00:17<00:54,  1.44it/s] 22%|██▏       | 22/100 [00:18<00:53,  1.45it/s] 23%|██▎       | 23/100 [00:18<00:52,  1.47it/s] 24%|██▍       | 24/100 [00:19<00:51,  1.47it/s] 25%|██▌       | 25/100 [00:20<00:51,  1.47it/s] 26%|██▌       | 26/100 [00:20<00:50,  1.46it/s] 27%|██▋       | 27/100 [00:21<00:49,  1.47it/s] 28%|██▊       | 28/100 [00:22<00:48,  1.48it/s] 29%|██▉       | 29/100 [00:22<00:47,  1.48it/s] 30%|███       | 30/100 [00:23<00:47,  1.47it/s] 31%|███       | 31/100 [00:24<00:46,  1.49it/s] 32%|███▏      | 32/100 [00:24<00:45,  1.50it/s] 33%|███▎      | 33/100 [00:25<00:44,  1.52it/s] 34%|███▍      | 34/100 [00:26<00:44,  1.49it/s] 35%|███▌      | 35/100 [00:26<00:43,  1.50it/s] 36%|███▌      | 36/100 [00:27<00:42,  1.51it/s] 37%|███▋      | 37/100 [00:28<00:41,  1.52it/s] 38%|███▊      | 38/100 [00:28<00:40,  1.53it/s] 39%|███▉      | 39/100 [00:32<01:37,  1.60s/it] 40%|████      | 40/100 [00:33<01:18,  1.32s/it] 41%|████      | 41/100 [00:33<01:06,  1.12s/it] 42%|████▏     | 42/100 [00:34<00:57,  1.01it/s] 43%|████▎     | 43/100 [00:35<00:51,  1.11it/s] 44%|████▍     | 44/100 [00:36<00:46,  1.20it/s] 45%|████▌     | 45/100 [00:36<00:43,  1.26it/s] 46%|████▌     | 46/100 [00:37<00:40,  1.33it/s] 47%|████▋     | 47/100 [00:38<00:38,  1.36it/s] 48%|████▊     | 48/100 [00:38<00:37,  1.40it/s] 49%|████▉     | 49/100 [00:39<00:35,  1.43it/s] 50%|█████     | 50/100 [00:40<00:34,  1.44it/s] 51%|█████     | 51/100 [00:40<00:33,  1.45it/s] 52%|█████▏    | 52/100 [00:41<00:32,  1.46it/s] 53%|█████▎    | 53/100 [00:42<00:32,  1.45it/s] 54%|█████▍    | 54/100 [00:42<00:32,  1.42it/s] 55%|█████▌    | 55/100 [00:43<00:32,  1.40it/s] 56%|█████▌    | 56/100 [00:44<00:31,  1.39it/s] 57%|█████▋    | 57/100 [00:45<00:31,  1.39it/s] 58%|█████▊    | 58/100 [00:45<00:29,  1.42it/s] 59%|█████▉    | 59/100 [00:46<00:28,  1.43it/s] 60%|██████    | 60/100 [00:47<00:27,  1.45it/s] 61%|██████    | 61/100 [00:47<00:26,  1.46it/s] 62%|██████▏   | 62/100 [00:48<00:25,  1.48it/s] 63%|██████▎   | 63/100 [00:49<00:24,  1.50it/s] 64%|██████▍   | 64/100 [00:49<00:23,  1.52it/s] 65%|██████▌   | 65/100 [00:50<00:22,  1.52it/s] 66%|██████▌   | 66/100 [00:51<00:22,  1.52it/s] 67%|██████▋   | 67/100 [00:51<00:22,  1.50it/s] 68%|██████▊   | 68/100 [00:52<00:21,  1.51it/s] 69%|██████▉   | 69/100 [00:53<00:20,  1.51it/s] 70%|███████   | 70/100 [00:53<00:19,  1.51it/s] 71%|███████   | 71/100 [00:54<00:19,  1.52it/s] 72%|███████▏  | 72/100 [00:54<00:18,  1.52it/s] 73%|███████▎  | 73/100 [00:55<00:17,  1.52it/s] 74%|███████▍  | 74/100 [00:56<00:17,  1.53it/s] 75%|███████▌  | 75/100 [00:56<00:16,  1.53it/s] 76%|███████▌  | 76/100 [01:00<00:39,  1.66s/it] 77%|███████▋  | 77/100 [01:01<00:31,  1.37s/it] 78%|███████▊  | 78/100 [01:02<00:25,  1.16s/it] 79%|███████▉  | 79/100 [01:02<00:21,  1.01s/it] 80%|████████  | 80/100 [01:03<00:18,  1.11it/s] 81%|████████  | 81/100 [01:04<00:15,  1.20it/s] 82%|████████▏ | 82/100 [01:04<00:14,  1.28it/s] 83%|████████▎ | 83/100 [01:05<00:12,  1.34it/s] 84%|████████▍ | 84/100 [01:06<00:11,  1.39it/s] 85%|████████▌ | 85/100 [01:06<00:10,  1.41it/s] 86%|████████▌ | 86/100 [01:07<00:09,  1.43it/s] 87%|████████▋ | 87/100 [01:08<00:09,  1.44it/s] 88%|████████▊ | 88/100 [01:08<00:08,  1.45it/s] 89%|████████▉ | 89/100 [01:09<00:07,  1.46it/s] 90%|█████████ | 90/100 [01:10<00:06,  1.45it/s] 91%|█████████ | 91/100 [01:11<00:06,  1.42it/s] 92%|█████████▏| 92/100 [01:11<00:05,  1.39it/s] 93%|█████████▎| 93/100 [01:12<00:05,  1.35it/s] 94%|█████████▍| 94/100 [01:13<00:04,  1.34it/s] 95%|█████████▌| 95/100 [01:14<00:03,  1.34it/s] 96%|█████████▌| 96/100 [01:14<00:02,  1.34it/s] 97%|█████████▋| 97/100 [01:15<00:02,  1.34it/s] 98%|█████████▊| 98/100 [01:16<00:01,  1.32it/s] 99%|█████████▉| 99/100 [01:17<00:00,  1.32it/s]100%|██████████| 100/100 [01:17<00:00,  1.33it/s]100%|██████████| 100/100 [01:17<00:00,  1.28it/s]
Number of users per round / total users: 10  /  100
Finished creating FedAvg server.
=== FedPP ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([1017, 16, 32, 32]) torch.Size([1017])
random features: torch.Size([508, 16, 32, 32]) torch.Size([508])
Local adapation with distilling: 0.001
training loss: tensor(2.2063) feature loss: tensor(0.5115)
Local adapation with distilling: 0.001
training loss: tensor(2.2257) feature loss: tensor(0.5332)
Local adapation with distilling: 0.001
training loss: tensor(2.2842) feature loss: tensor(0.5538)
Local adapation with distilling: 0.001
training loss: tensor(2.2860) feature loss: tensor(0.5633)
Local adapation with distilling: 0.001
training loss: tensor(2.2330) feature loss: tensor(0.5419)
Local adapation with distilling: 0.001
training loss: tensor(2.1804) feature loss: tensor(0.5399)
Local adapation with distilling: 0.001
training loss: tensor(2.3113) feature loss: tensor(0.5814)
Local adapation with distilling: 0.001
training loss: tensor(2.1561) feature loss: tensor(0.5014)
Local adapation with distilling: 0.001
training loss: tensor(2.4248) feature loss: tensor(0.5501)
Local adapation with distilling: 0.001
training loss: tensor(2.1919) feature loss: tensor(0.4841)
         GM acc on global data: 0.1191 length of data: 10000
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([992, 16, 32, 32]) torch.Size([992])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.000982
training loss: tensor(1.7582) feature loss: tensor(0.5665)
Local adapation with distilling: 0.000982
training loss: tensor(1.7211) feature loss: tensor(0.5959)
Local adapation with distilling: 0.000982
training loss: tensor(1.6801) feature loss: tensor(0.6089)
Local adapation with distilling: 0.000982
training loss: tensor(1.8500) feature loss: tensor(0.5983)
Local adapation with distilling: 0.000982
training loss: tensor(1.6930) feature loss: tensor(0.5380)
Local adapation with distilling: 0.000982
training loss: tensor(1.6905) feature loss: tensor(0.5431)
Local adapation with distilling: 0.000982
training loss: tensor(1.7179) feature loss: tensor(0.5854)
Local adapation with distilling: 0.000982
training loss: tensor(1.8312) feature loss: tensor(0.6210)
Local adapation with distilling: 0.000982
training loss: tensor(1.7369) feature loss: tensor(0.5949)
Local adapation with distilling: 0.000982
training loss: tensor(1.6623) feature loss: tensor(0.5867)
         GM acc on global data: 0.1964 length of data: 10000
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1004, 16, 32, 32]) torch.Size([1004])
random features: torch.Size([502, 16, 32, 32]) torch.Size([502])
Local adapation with distilling: 0.000964
training loss: tensor(1.3490) feature loss: tensor(0.4892)
Local adapation with distilling: 0.000964
training loss: tensor(1.3800) feature loss: tensor(0.4823)
Local adapation with distilling: 0.000964
training loss: tensor(1.3423) feature loss: tensor(0.4742)
Local adapation with distilling: 0.000964
training loss: tensor(1.5014) feature loss: tensor(0.5019)
Local adapation with distilling: 0.000964
training loss: tensor(1.4464) feature loss: tensor(0.5065)
Local adapation with distilling: 0.000964
training loss: tensor(1.3848) feature loss: tensor(0.5206)
Local adapation with distilling: 0.000964
training loss: tensor(1.3809) feature loss: tensor(0.5236)
Local adapation with distilling: 0.000964
training loss: tensor(1.4292) feature loss: tensor(0.4573)
Local adapation with distilling: 0.000964
training loss: tensor(1.5608) feature loss: tensor(0.4696)
Local adapation with distilling: 0.000964
training loss: tensor(1.3222) feature loss: tensor(0.4768)
         GM acc on global data: 0.2524 length of data: 10000
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.000946
training loss: tensor(1.2117) feature loss: tensor(0.4745)
Local adapation with distilling: 0.000946
training loss: tensor(1.3239) feature loss: tensor(0.5099)
Local adapation with distilling: 0.000946
training loss: tensor(1.2896) feature loss: tensor(0.4857)
Local adapation with distilling: 0.000946
training loss: tensor(1.3437) feature loss: tensor(0.5572)
Local adapation with distilling: 0.000946
training loss: tensor(1.4052) feature loss: tensor(0.4747)
Local adapation with distilling: 0.000946
training loss: tensor(1.1683) feature loss: tensor(0.4823)
Local adapation with distilling: 0.000946
training loss: tensor(1.2620) feature loss: tensor(0.5150)
Local adapation with distilling: 0.000946
training loss: tensor(1.2929) feature loss: tensor(0.4463)
Local adapation with distilling: 0.000946
training loss: tensor(1.2881) feature loss: tensor(0.4810)
Local adapation with distilling: 0.000946
training loss: tensor(1.3422) feature loss: tensor(0.5041)
         GM acc on global data: 0.2427 length of data: 10000
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([993, 16, 32, 32]) torch.Size([993])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4169) feature loss: tensor(0.5871)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3647) feature loss: tensor(0.6369)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4591) feature loss: tensor(0.5773)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2603) feature loss: tensor(0.5847)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1879) feature loss: tensor(0.5726)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1782) feature loss: tensor(0.5129)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1138) feature loss: tensor(0.5695)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1592) feature loss: tensor(0.5219)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2241) feature loss: tensor(0.5419)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1591) feature loss: tensor(0.5327)
         GM acc on global data: 0.2926 length of data: 10000
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([1007, 16, 32, 32]) torch.Size([1007])
random features: torch.Size([503, 16, 32, 32]) torch.Size([503])
Local adapation with distilling: 0.00091
training loss: tensor(1.2185) feature loss: tensor(0.6317)
Local adapation with distilling: 0.00091
training loss: tensor(1.2225) feature loss: tensor(0.5760)
Local adapation with distilling: 0.00091
training loss: tensor(1.2266) feature loss: tensor(0.5915)
Local adapation with distilling: 0.00091
training loss: tensor(1.4441) feature loss: tensor(0.6153)
Local adapation with distilling: 0.00091
training loss: tensor(1.1756) feature loss: tensor(0.5499)
Local adapation with distilling: 0.00091
training loss: tensor(1.1553) feature loss: tensor(0.5528)
Local adapation with distilling: 0.00091
training loss: tensor(1.2820) feature loss: tensor(0.5528)
Local adapation with distilling: 0.00091
training loss: tensor(1.3999) feature loss: tensor(0.6395)
Local adapation with distilling: 0.00091
training loss: tensor(1.1785) feature loss: tensor(0.6178)
Local adapation with distilling: 0.00091
training loss: tensor(1.1829) feature loss: tensor(0.5402)
         GM acc on global data: 0.3764 length of data: 10000
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([987, 16, 32, 32]) torch.Size([987])
random features: torch.Size([493, 16, 32, 32]) torch.Size([493])
Local adapation with distilling: 0.000892
training loss: tensor(0.9940) feature loss: tensor(0.5348)
Local adapation with distilling: 0.000892
training loss: tensor(1.0660) feature loss: tensor(0.5321)
Local adapation with distilling: 0.000892
training loss: tensor(1.1271) feature loss: tensor(0.5767)
Local adapation with distilling: 0.000892
training loss: tensor(1.0642) feature loss: tensor(0.5044)
Local adapation with distilling: 0.000892
training loss: tensor(1.1019) feature loss: tensor(0.5012)
Local adapation with distilling: 0.000892
training loss: tensor(1.0712) feature loss: tensor(0.5126)
Local adapation with distilling: 0.000892
training loss: tensor(1.0882) feature loss: tensor(0.4742)
Local adapation with distilling: 0.000892
training loss: tensor(1.0075) feature loss: tensor(0.5081)
Local adapation with distilling: 0.000892
training loss: tensor(1.0832) feature loss: tensor(0.4549)
Local adapation with distilling: 0.000892
training loss: tensor(1.2724) feature loss: tensor(0.5155)
         GM acc on global data: 0.3806 length of data: 10000
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([1030, 16, 32, 32]) torch.Size([1030])
random features: torch.Size([515, 16, 32, 32]) torch.Size([515])
Local adapation with distilling: 0.000874
training loss: tensor(1.2899) feature loss: tensor(0.5670)
Local adapation with distilling: 0.000874
training loss: tensor(1.1679) feature loss: tensor(0.5830)
Local adapation with distilling: 0.000874
training loss: tensor(1.1509) feature loss: tensor(0.6256)
Local adapation with distilling: 0.000874
training loss: tensor(1.1998) feature loss: tensor(0.6800)
Local adapation with distilling: 0.000874
training loss: tensor(1.3171) feature loss: tensor(0.6961)
Local adapation with distilling: 0.000874
training loss: tensor(1.3020) feature loss: tensor(0.7244)
Local adapation with distilling: 0.000874
training loss: tensor(1.1917) feature loss: tensor(0.6743)
Local adapation with distilling: 0.000874
training loss: tensor(1.1903) feature loss: tensor(0.5778)
Local adapation with distilling: 0.000874
training loss: tensor(1.3305) feature loss: tensor(0.7568)
Local adapation with distilling: 0.000874
training loss: tensor(1.4153) feature loss: tensor(0.6984)
         GM acc on global data: 0.382 length of data: 10000
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.000856
training loss: tensor(0.8935) feature loss: tensor(0.4716)
Local adapation with distilling: 0.000856
training loss: tensor(0.9358) feature loss: tensor(0.4718)
Local adapation with distilling: 0.000856
training loss: tensor(1.0585) feature loss: tensor(0.5042)
Local adapation with distilling: 0.000856
training loss: tensor(0.9683) feature loss: tensor(0.4936)
Local adapation with distilling: 0.000856
training loss: tensor(1.0695) feature loss: tensor(0.4790)
Local adapation with distilling: 0.000856
training loss: tensor(1.0184) feature loss: tensor(0.4832)
Local adapation with distilling: 0.000856
training loss: tensor(0.8689) feature loss: tensor(0.5027)
Local adapation with distilling: 0.000856
training loss: tensor(0.9134) feature loss: tensor(0.5093)
Local adapation with distilling: 0.000856
training loss: tensor(1.1310) feature loss: tensor(0.4900)
Local adapation with distilling: 0.000856
training loss: tensor(0.9465) feature loss: tensor(0.4702)
         GM acc on global data: 0.397 length of data: 10000
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0102) feature loss: tensor(0.4084)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0122) feature loss: tensor(0.3885)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0201) feature loss: tensor(0.4099)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.8717) feature loss: tensor(0.3879)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0018) feature loss: tensor(0.4489)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9125) feature loss: tensor(0.3984)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.8306) feature loss: tensor(0.3992)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1037) feature loss: tensor(0.4530)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9948) feature loss: tensor(0.3915)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9215) feature loss: tensor(0.3942)
         GM acc on global data: 0.4251 length of data: 10000
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([1018, 16, 32, 32]) torch.Size([1018])
random features: torch.Size([509, 16, 32, 32]) torch.Size([509])
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8320) feature loss: tensor(0.3865)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8022) feature loss: tensor(0.3962)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8820) feature loss: tensor(0.3998)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8599) feature loss: tensor(0.3870)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.7730) feature loss: tensor(0.4066)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8222) feature loss: tensor(0.3906)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0163) feature loss: tensor(0.3901)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9705) feature loss: tensor(0.3854)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.7480) feature loss: tensor(0.4388)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8636) feature loss: tensor(0.3923)
         GM acc on global data: 0.4148 length of data: 10000
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([990, 16, 32, 32]) torch.Size([990])
random features: torch.Size([495, 16, 32, 32]) torch.Size([495])
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8720) feature loss: tensor(0.4059)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8510) feature loss: tensor(0.3853)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.1644) feature loss: tensor(0.4267)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8447) feature loss: tensor(0.4229)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8925) feature loss: tensor(0.4106)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8902) feature loss: tensor(0.3801)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8794) feature loss: tensor(0.4616)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.7444) feature loss: tensor(0.3925)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9190) feature loss: tensor(0.4282)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9754) feature loss: tensor(0.4354)
         GM acc on global data: 0.4367 length of data: 10000
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([995, 16, 32, 32]) torch.Size([995])
random features: torch.Size([497, 16, 32, 32]) torch.Size([497])
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8144) feature loss: tensor(0.4355)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7714) feature loss: tensor(0.3295)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7506) feature loss: tensor(0.3293)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.6396) feature loss: tensor(0.3541)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7075) feature loss: tensor(0.3366)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0316) feature loss: tensor(0.3376)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7326) feature loss: tensor(0.3755)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8370) feature loss: tensor(0.3423)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7721) feature loss: tensor(0.3590)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7961) feature loss: tensor(0.3381)
         GM acc on global data: 0.4448 length of data: 10000
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([984, 16, 32, 32]) torch.Size([984])
random features: torch.Size([492, 16, 32, 32]) torch.Size([492])
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7178) feature loss: tensor(0.3464)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7855) feature loss: tensor(0.3592)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7344) feature loss: tensor(0.3816)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.6375) feature loss: tensor(0.3434)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7673) feature loss: tensor(0.3798)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9566) feature loss: tensor(0.4092)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7746) feature loss: tensor(0.3598)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9463) feature loss: tensor(0.3757)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7824) feature loss: tensor(0.3535)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8068) feature loss: tensor(0.4058)
         GM acc on global data: 0.46 length of data: 10000
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([981, 16, 32, 32]) torch.Size([981])
random features: torch.Size([490, 16, 32, 32]) torch.Size([490])
Local adapation with distilling: 0.000748
training loss: tensor(0.8226) feature loss: tensor(0.4715)
Local adapation with distilling: 0.000748
training loss: tensor(0.9396) feature loss: tensor(0.5396)
Local adapation with distilling: 0.000748
training loss: tensor(0.9856) feature loss: tensor(0.4498)
Local adapation with distilling: 0.000748
training loss: tensor(0.8230) feature loss: tensor(0.4512)
Local adapation with distilling: 0.000748
training loss: tensor(0.9873) feature loss: tensor(0.5013)
Local adapation with distilling: 0.000748
training loss: tensor(0.9650) feature loss: tensor(0.4552)
Local adapation with distilling: 0.000748
training loss: tensor(0.9207) feature loss: tensor(0.5055)
Local adapation with distilling: 0.000748
training loss: tensor(0.9685) feature loss: tensor(0.4529)
Local adapation with distilling: 0.000748
training loss: tensor(0.9890) feature loss: tensor(0.4481)
Local adapation with distilling: 0.000748
training loss: tensor(0.9079) feature loss: tensor(0.4568)
         GM acc on global data: 0.4487 length of data: 10000
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([1014, 16, 32, 32]) torch.Size([1014])
random features: torch.Size([507, 16, 32, 32]) torch.Size([507])
Local adapation with distilling: 0.00073
training loss: tensor(0.7169) feature loss: tensor(0.3487)
Local adapation with distilling: 0.00073
training loss: tensor(0.7587) feature loss: tensor(0.3589)
Local adapation with distilling: 0.00073
training loss: tensor(0.7804) feature loss: tensor(0.3896)
Local adapation with distilling: 0.00073
training loss: tensor(0.7483) feature loss: tensor(0.3474)
Local adapation with distilling: 0.00073
training loss: tensor(0.7478) feature loss: tensor(0.3493)
Local adapation with distilling: 0.00073
training loss: tensor(0.7165) feature loss: tensor(0.3511)
Local adapation with distilling: 0.00073
training loss: tensor(0.7595) feature loss: tensor(0.3404)
Local adapation with distilling: 0.00073
training loss: tensor(0.6723) feature loss: tensor(0.3750)
Local adapation with distilling: 0.00073
training loss: tensor(0.9159) feature loss: tensor(0.3498)
Local adapation with distilling: 0.00073
training loss: tensor(0.9103) feature loss: tensor(0.3548)
         GM acc on global data: 0.4861 length of data: 10000
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([990, 16, 32, 32]) torch.Size([990])
random features: torch.Size([495, 16, 32, 32]) torch.Size([495])
Local adapation with distilling: 0.000712
training loss: tensor(0.7306) feature loss: tensor(0.2953)
Local adapation with distilling: 0.000712
training loss: tensor(0.6925) feature loss: tensor(0.3029)
Local adapation with distilling: 0.000712
training loss: tensor(0.6090) feature loss: tensor(0.2910)
Local adapation with distilling: 0.000712
training loss: tensor(0.7270) feature loss: tensor(0.3048)
Local adapation with distilling: 0.000712
training loss: tensor(0.6666) feature loss: tensor(0.2861)
Local adapation with distilling: 0.000712
training loss: tensor(0.5928) feature loss: tensor(0.3021)
Local adapation with distilling: 0.000712
training loss: tensor(0.6663) feature loss: tensor(0.3196)
Local adapation with distilling: 0.000712
training loss: tensor(0.6619) feature loss: tensor(0.2952)
Local adapation with distilling: 0.000712
training loss: tensor(0.6852) feature loss: tensor(0.2981)
Local adapation with distilling: 0.000712
training loss: tensor(0.8577) feature loss: tensor(0.3088)
         GM acc on global data: 0.4768 length of data: 10000
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([990, 16, 32, 32]) torch.Size([990])
random features: torch.Size([495, 16, 32, 32]) torch.Size([495])
Local adapation with distilling: 0.000694
training loss: tensor(0.6045) feature loss: tensor(0.3546)
Local adapation with distilling: 0.000694
training loss: tensor(0.6590) feature loss: tensor(0.3190)
Local adapation with distilling: 0.000694
training loss: tensor(0.7776) feature loss: tensor(0.3340)
Local adapation with distilling: 0.000694
training loss: tensor(0.6643) feature loss: tensor(0.3707)
Local adapation with distilling: 0.000694
training loss: tensor(0.6809) feature loss: tensor(0.3105)
Local adapation with distilling: 0.000694
training loss: tensor(0.7226) feature loss: tensor(0.3104)
Local adapation with distilling: 0.000694
training loss: tensor(0.6846) feature loss: tensor(0.3227)
Local adapation with distilling: 0.000694
training loss: tensor(0.7191) feature loss: tensor(0.3181)
Local adapation with distilling: 0.000694
training loss: tensor(0.6292) feature loss: tensor(0.3104)
Local adapation with distilling: 0.000694
training loss: tensor(0.6100) feature loss: tensor(0.3070)
         GM acc on global data: 0.4871 length of data: 10000
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([996, 16, 32, 32]) torch.Size([996])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.6528) feature loss: tensor(0.3354)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.6322) feature loss: tensor(0.3346)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7018) feature loss: tensor(0.3590)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7528) feature loss: tensor(0.3446)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7000) feature loss: tensor(0.3330)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9450) feature loss: tensor(0.3568)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7551) feature loss: tensor(0.3534)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8771) feature loss: tensor(0.3455)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7081) feature loss: tensor(0.3588)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7241) feature loss: tensor(0.3883)
         GM acc on global data: 0.4592 length of data: 10000
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1017, 16, 32, 32]) torch.Size([1017])
random features: torch.Size([508, 16, 32, 32]) torch.Size([508])
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7152) feature loss: tensor(0.3783)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7228) feature loss: tensor(0.3950)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8647) feature loss: tensor(0.3634)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.0884) feature loss: tensor(0.3705)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7939) feature loss: tensor(0.3701)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7201) feature loss: tensor(0.3974)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8390) feature loss: tensor(0.3699)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7829) feature loss: tensor(0.4547)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7216) feature loss: tensor(0.4001)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7663) feature loss: tensor(0.3630)
         GM acc on global data: 0.4855 length of data: 10000
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([982, 16, 32, 32]) torch.Size([982])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.00064
training loss: tensor(0.8037) feature loss: tensor(0.3859)
Local adapation with distilling: 0.00064
training loss: tensor(0.6774) feature loss: tensor(0.3184)
Local adapation with distilling: 0.00064
training loss: tensor(0.7083) feature loss: tensor(0.4339)
Local adapation with distilling: 0.00064
training loss: tensor(0.6896) feature loss: tensor(0.4293)
Local adapation with distilling: 0.00064
training loss: tensor(0.7042) feature loss: tensor(0.3688)
Local adapation with distilling: 0.00064
training loss: tensor(0.7324) feature loss: tensor(0.3824)
Local adapation with distilling: 0.00064
training loss: tensor(0.6838) feature loss: tensor(0.3663)
Local adapation with distilling: 0.00064
training loss: tensor(0.6688) feature loss: tensor(0.4582)
Local adapation with distilling: 0.00064
training loss: tensor(0.6457) feature loss: tensor(0.3566)
Local adapation with distilling: 0.00064
training loss: tensor(0.7169) feature loss: tensor(0.3809)
         GM acc on global data: 0.4833 length of data: 10000
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([993, 16, 32, 32]) torch.Size([993])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7178) feature loss: tensor(0.3519)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2090) feature loss: tensor(0.4096)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.6092) feature loss: tensor(0.3519)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9064) feature loss: tensor(0.3850)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7802) feature loss: tensor(0.3530)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8523) feature loss: tensor(0.3677)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8428) feature loss: tensor(0.3672)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0300) feature loss: tensor(0.3535)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7258) feature loss: tensor(0.3911)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8078) feature loss: tensor(0.3857)
         GM acc on global data: 0.4996 length of data: 10000
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([964, 16, 32, 32]) torch.Size([964])
random features: torch.Size([482, 16, 32, 32]) torch.Size([482])
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6332) feature loss: tensor(0.4165)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6274) feature loss: tensor(0.3287)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7085) feature loss: tensor(0.3456)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7525) feature loss: tensor(0.3312)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7028) feature loss: tensor(0.3370)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6447) feature loss: tensor(0.3300)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7554) feature loss: tensor(0.3727)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7209) feature loss: tensor(0.4063)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6836) feature loss: tensor(0.3638)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6445) feature loss: tensor(0.3854)
         GM acc on global data: 0.4998 length of data: 10000
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([993, 16, 32, 32]) torch.Size([993])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.000586
training loss: tensor(0.6341) feature loss: tensor(0.3053)
Local adapation with distilling: 0.000586
training loss: tensor(0.6323) feature loss: tensor(0.3091)
Local adapation with distilling: 0.000586
training loss: tensor(0.6104) feature loss: tensor(0.3347)
Local adapation with distilling: 0.000586
training loss: tensor(0.6407) feature loss: tensor(0.3303)
Local adapation with distilling: 0.000586
training loss: tensor(0.6676) feature loss: tensor(0.3087)
Local adapation with distilling: 0.000586
training loss: tensor(0.6272) feature loss: tensor(0.3295)
Local adapation with distilling: 0.000586
training loss: tensor(0.7247) feature loss: tensor(0.3179)
Local adapation with distilling: 0.000586
training loss: tensor(0.7357) feature loss: tensor(0.3584)
Local adapation with distilling: 0.000586
training loss: tensor(0.6864) feature loss: tensor(0.3295)
Local adapation with distilling: 0.000586
training loss: tensor(0.7324) feature loss: tensor(0.4030)
         GM acc on global data: 0.5067 length of data: 10000
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([1000, 16, 32, 32]) torch.Size([1000])
random features: torch.Size([500, 16, 32, 32]) torch.Size([500])
Local adapation with distilling: 0.000568
training loss: tensor(0.5151) feature loss: tensor(0.2706)
Local adapation with distilling: 0.000568
training loss: tensor(0.6946) feature loss: tensor(0.2702)
Local adapation with distilling: 0.000568
training loss: tensor(0.5152) feature loss: tensor(0.2769)
Local adapation with distilling: 0.000568
training loss: tensor(0.6001) feature loss: tensor(0.2857)
Local adapation with distilling: 0.000568
training loss: tensor(0.6526) feature loss: tensor(0.3029)
Local adapation with distilling: 0.000568
training loss: tensor(0.5499) feature loss: tensor(0.3251)
Local adapation with distilling: 0.000568
training loss: tensor(0.5628) feature loss: tensor(0.2793)
Local adapation with distilling: 0.000568
training loss: tensor(0.6281) feature loss: tensor(0.2967)
Local adapation with distilling: 0.000568
training loss: tensor(0.5968) feature loss: tensor(0.2932)
Local adapation with distilling: 0.000568
training loss: tensor(0.6461) feature loss: tensor(0.2700)
         GM acc on global data: 0.4927 length of data: 10000
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([1000, 16, 32, 32]) torch.Size([1000])
random features: torch.Size([500, 16, 32, 32]) torch.Size([500])
Local adapation with distilling: 0.00055
training loss: tensor(0.5997) feature loss: tensor(0.3132)
Local adapation with distilling: 0.00055
training loss: tensor(0.5593) feature loss: tensor(0.2980)
Local adapation with distilling: 0.00055
training loss: tensor(0.6516) feature loss: tensor(0.3517)
Local adapation with distilling: 0.00055
training loss: tensor(0.7100) feature loss: tensor(0.3148)
Local adapation with distilling: 0.00055
training loss: tensor(0.5595) feature loss: tensor(0.3083)
Local adapation with distilling: 0.00055
training loss: tensor(0.6920) feature loss: tensor(0.3520)
Local adapation with distilling: 0.00055
training loss: tensor(0.5689) feature loss: tensor(0.2921)
Local adapation with distilling: 0.00055
training loss: tensor(0.5805) feature loss: tensor(0.3001)
Local adapation with distilling: 0.00055
training loss: tensor(0.6525) feature loss: tensor(0.3219)
Local adapation with distilling: 0.00055
training loss: tensor(0.5535) feature loss: tensor(0.2960)
         GM acc on global data: 0.4902 length of data: 10000
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([981, 16, 32, 32]) torch.Size([981])
random features: torch.Size([490, 16, 32, 32]) torch.Size([490])
Local adapation with distilling: 0.000532
training loss: tensor(0.7361) feature loss: tensor(0.3357)
Local adapation with distilling: 0.000532
training loss: tensor(0.7101) feature loss: tensor(0.3375)
Local adapation with distilling: 0.000532
training loss: tensor(0.6476) feature loss: tensor(0.3346)
Local adapation with distilling: 0.000532
training loss: tensor(0.6400) feature loss: tensor(0.3550)
Local adapation with distilling: 0.000532
training loss: tensor(0.8101) feature loss: tensor(0.3467)
Local adapation with distilling: 0.000532
training loss: tensor(0.8500) feature loss: tensor(0.3681)
Local adapation with distilling: 0.000532
training loss: tensor(0.6423) feature loss: tensor(0.3416)
Local adapation with distilling: 0.000532
training loss: tensor(0.8132) feature loss: tensor(0.3488)
Local adapation with distilling: 0.000532
training loss: tensor(0.6282) feature loss: tensor(0.3536)
Local adapation with distilling: 0.000532
training loss: tensor(0.7588) feature loss: tensor(0.3840)
         GM acc on global data: 0.5025 length of data: 10000
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([992, 16, 32, 32]) torch.Size([992])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.000514
training loss: tensor(0.5790) feature loss: tensor(0.2981)
Local adapation with distilling: 0.000514
training loss: tensor(0.7127) feature loss: tensor(0.3220)
Local adapation with distilling: 0.000514
training loss: tensor(0.5881) feature loss: tensor(0.3602)
Local adapation with distilling: 0.000514
training loss: tensor(0.6241) feature loss: tensor(0.2988)
Local adapation with distilling: 0.000514
training loss: tensor(0.6117) feature loss: tensor(0.2978)
Local adapation with distilling: 0.000514
training loss: tensor(0.6140) feature loss: tensor(0.2998)
Local adapation with distilling: 0.000514
training loss: tensor(0.7138) feature loss: tensor(0.2924)
Local adapation with distilling: 0.000514
training loss: tensor(0.5500) feature loss: tensor(0.2900)
Local adapation with distilling: 0.000514
training loss: tensor(1.5768) feature loss: tensor(0.3041)
Local adapation with distilling: 0.000514
training loss: tensor(0.6955) feature loss: tensor(0.3024)
         GM acc on global data: 0.5107 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([996, 16, 32, 32]) torch.Size([996])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.000496
training loss: tensor(0.5810) feature loss: tensor(0.2927)
Local adapation with distilling: 0.000496
training loss: tensor(0.5289) feature loss: tensor(0.3015)
Local adapation with distilling: 0.000496
training loss: tensor(0.5851) feature loss: tensor(0.3052)
Local adapation with distilling: 0.000496
training loss: tensor(0.6008) feature loss: tensor(0.3049)
Local adapation with distilling: 0.000496
training loss: tensor(0.5874) feature loss: tensor(0.2961)
Local adapation with distilling: 0.000496
training loss: tensor(0.7761) feature loss: tensor(0.3139)
Local adapation with distilling: 0.000496
training loss: tensor(0.6473) feature loss: tensor(0.3533)
Local adapation with distilling: 0.000496
training loss: tensor(0.5977) feature loss: tensor(0.3645)
Local adapation with distilling: 0.000496
training loss: tensor(0.9112) feature loss: tensor(0.3870)
Local adapation with distilling: 0.000496
training loss: tensor(0.6155) feature loss: tensor(0.3526)
         GM acc on global data: 0.5126 length of data: 10000
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([987, 16, 32, 32]) torch.Size([987])
random features: torch.Size([493, 16, 32, 32]) torch.Size([493])
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6301) feature loss: tensor(0.2922)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6021) feature loss: tensor(0.3033)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7811) feature loss: tensor(0.3936)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6890) feature loss: tensor(0.3091)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6032) feature loss: tensor(0.2920)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6104) feature loss: tensor(0.3007)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7380) feature loss: tensor(0.3467)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6740) feature loss: tensor(0.2962)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.5692) feature loss: tensor(0.2978)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6498) feature loss: tensor(0.3427)
         GM acc on global data: 0.524 length of data: 10000
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([983, 16, 32, 32]) torch.Size([983])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5515) feature loss: tensor(0.2662)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5210) feature loss: tensor(0.2670)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5039) feature loss: tensor(0.2589)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9461) feature loss: tensor(0.3115)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4898) feature loss: tensor(0.2980)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4686) feature loss: tensor(0.2593)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5226) feature loss: tensor(0.2759)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4879) feature loss: tensor(0.2882)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5188) feature loss: tensor(0.2594)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.4658) feature loss: tensor(0.2625)
         GM acc on global data: 0.5038 length of data: 10000
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([1012, 16, 32, 32]) torch.Size([1012])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7371) feature loss: tensor(0.3269)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5573) feature loss: tensor(0.3202)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6607) feature loss: tensor(0.3189)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6750) feature loss: tensor(0.3231)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6450) feature loss: tensor(0.3295)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5882) feature loss: tensor(0.3247)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6135) feature loss: tensor(0.3480)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5521) feature loss: tensor(0.3587)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6720) feature loss: tensor(0.3266)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5694) feature loss: tensor(0.3221)
         GM acc on global data: 0.4984 length of data: 10000
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([989, 16, 32, 32]) torch.Size([989])
random features: torch.Size([494, 16, 32, 32]) torch.Size([494])
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.5100) feature loss: tensor(0.2880)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8494) feature loss: tensor(0.2955)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5455) feature loss: tensor(0.2760)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6913) feature loss: tensor(0.2719)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6367) feature loss: tensor(0.2763)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5067) feature loss: tensor(0.2760)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6012) feature loss: tensor(0.2795)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5393) feature loss: tensor(0.2722)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6747) feature loss: tensor(0.2886)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0473) feature loss: tensor(0.3130)
         GM acc on global data: 0.5231 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([992, 16, 32, 32]) torch.Size([992])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5911) feature loss: tensor(0.3474)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6189) feature loss: tensor(0.3500)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6135) feature loss: tensor(0.3645)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6390) feature loss: tensor(0.3474)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6224) feature loss: tensor(0.3612)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5959) feature loss: tensor(0.3516)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7463) feature loss: tensor(0.3439)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.4860) feature loss: tensor(0.4127)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6455) feature loss: tensor(0.3470)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.5921) feature loss: tensor(0.3576)
         GM acc on global data: 0.5099 length of data: 10000
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([1009, 16, 32, 32]) torch.Size([1009])
random features: torch.Size([504, 16, 32, 32]) torch.Size([504])
Local adapation with distilling: 0.000388
training loss: tensor(0.6118) feature loss: tensor(0.2947)
Local adapation with distilling: 0.000388
training loss: tensor(0.6048) feature loss: tensor(0.2938)
Local adapation with distilling: 0.000388
training loss: tensor(1.0434) feature loss: tensor(0.3043)
Local adapation with distilling: 0.000388
training loss: tensor(0.8037) feature loss: tensor(0.3196)
Local adapation with distilling: 0.000388
training loss: tensor(0.8345) feature loss: tensor(0.3516)
Local adapation with distilling: 0.000388
training loss: tensor(0.9179) feature loss: tensor(0.3453)
Local adapation with distilling: 0.000388
training loss: tensor(0.6353) feature loss: tensor(0.3199)
Local adapation with distilling: 0.000388
training loss: tensor(0.8475) feature loss: tensor(0.3652)
Local adapation with distilling: 0.000388
training loss: tensor(0.6258) feature loss: tensor(0.2968)
Local adapation with distilling: 0.000388
training loss: tensor(0.6788) feature loss: tensor(0.2931)
         GM acc on global data: 0.5087 length of data: 10000
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([973, 16, 32, 32]) torch.Size([973])
random features: torch.Size([486, 16, 32, 32]) torch.Size([486])
Local adapation with distilling: 0.00037
training loss: tensor(0.6269) feature loss: tensor(0.3282)
Local adapation with distilling: 0.00037
training loss: tensor(0.5304) feature loss: tensor(0.3200)
Local adapation with distilling: 0.00037
training loss: tensor(0.5876) feature loss: tensor(0.3139)
Local adapation with distilling: 0.00037
training loss: tensor(0.6363) feature loss: tensor(0.3172)
Local adapation with distilling: 0.00037
training loss: tensor(0.5854) feature loss: tensor(0.3147)
Local adapation with distilling: 0.00037
training loss: tensor(0.6956) feature loss: tensor(0.3193)
Local adapation with distilling: 0.00037
training loss: tensor(0.6264) feature loss: tensor(0.3198)
Local adapation with distilling: 0.00037
training loss: tensor(0.6987) feature loss: tensor(0.3550)
Local adapation with distilling: 0.00037
training loss: tensor(0.6334) feature loss: tensor(0.3154)
Local adapation with distilling: 0.00037
training loss: tensor(0.6564) feature loss: tensor(0.3127)
         GM acc on global data: 0.5055 length of data: 10000
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([991, 16, 32, 32]) torch.Size([991])
random features: torch.Size([495, 16, 32, 32]) torch.Size([495])
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8006) feature loss: tensor(0.3064)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7380) feature loss: tensor(0.3328)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5855) feature loss: tensor(0.3088)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6100) feature loss: tensor(0.3132)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.0229) feature loss: tensor(0.3173)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6726) feature loss: tensor(0.3129)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6458) feature loss: tensor(0.3047)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7265) feature loss: tensor(0.3301)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.1474) feature loss: tensor(0.3095)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5394) feature loss: tensor(0.3075)
         GM acc on global data: 0.5405 length of data: 10000
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([1018, 16, 32, 32]) torch.Size([1018])
random features: torch.Size([509, 16, 32, 32]) torch.Size([509])
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5619) feature loss: tensor(0.2617)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5872) feature loss: tensor(0.2672)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6152) feature loss: tensor(0.2674)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6106) feature loss: tensor(0.2699)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.7090) feature loss: tensor(0.2688)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5902) feature loss: tensor(0.2895)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.3789) feature loss: tensor(0.2686)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6032) feature loss: tensor(0.2760)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6038) feature loss: tensor(0.2961)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6925) feature loss: tensor(0.2701)
         GM acc on global data: 0.5355 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([1027, 16, 32, 32]) torch.Size([1027])
random features: torch.Size([513, 16, 32, 32]) torch.Size([513])
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.4147) feature loss: tensor(0.4762)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.5935) feature loss: tensor(0.6685)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.2319) feature loss: tensor(0.5268)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.6892) feature loss: tensor(0.5887)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.6842) feature loss: tensor(0.7192)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(2.0773) feature loss: tensor(0.9767)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.2274) feature loss: tensor(0.5327)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.1232) feature loss: tensor(0.4845)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.3784) feature loss: tensor(0.4862)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.5345) feature loss: tensor(0.5899)
         GM acc on global data: 0.5046 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([1012, 16, 32, 32]) torch.Size([1012])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.8992) feature loss: tensor(0.2902)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5073) feature loss: tensor(0.2622)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5972) feature loss: tensor(0.2655)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6100) feature loss: tensor(0.2823)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5894) feature loss: tensor(0.2636)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.4853) feature loss: tensor(0.2678)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5173) feature loss: tensor(0.2635)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5688) feature loss: tensor(0.2631)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.4970) feature loss: tensor(0.2652)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6538) feature loss: tensor(0.2742)
         GM acc on global data: 0.4853 length of data: 10000
-------------Round number:  40  -------------
selected users: [79, 75, 63, 15, 38, 11, 40, 45, 39, 62]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([1002, 16, 32, 32]) torch.Size([1002])
random features: torch.Size([501, 16, 32, 32]) torch.Size([501])
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7023) feature loss: tensor(0.3583)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7341) feature loss: tensor(0.3746)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6416) feature loss: tensor(0.3681)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.9179) feature loss: tensor(0.3565)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6200) feature loss: tensor(0.3808)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7049) feature loss: tensor(0.3601)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6621) feature loss: tensor(0.3778)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7200) feature loss: tensor(0.3938)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7591) feature loss: tensor(0.4048)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7472) feature loss: tensor(0.3980)
         GM acc on global data: 0.5227 length of data: 10000
-------------Round number:  41  -------------
selected users: [42, 94, 37, 6, 79, 32, 24, 0, 33, 93]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.000262
training loss: tensor(0.5932) feature loss: tensor(0.2046)
Local adapation with distilling: 0.000262
training loss: tensor(0.6715) feature loss: tensor(0.2063)
Local adapation with distilling: 0.000262
training loss: tensor(0.5770) feature loss: tensor(0.2082)
Local adapation with distilling: 0.000262
training loss: tensor(0.6143) feature loss: tensor(0.2104)
Local adapation with distilling: 0.000262
training loss: tensor(0.4940) feature loss: tensor(0.2100)
Local adapation with distilling: 0.000262
training loss: tensor(0.6322) feature loss: tensor(0.2022)
Local adapation with distilling: 0.000262
training loss: tensor(0.5464) feature loss: tensor(0.2050)
Local adapation with distilling: 0.000262
training loss: tensor(0.4523) feature loss: tensor(0.2104)
Local adapation with distilling: 0.000262
training loss: tensor(0.4556) feature loss: tensor(0.2075)
Local adapation with distilling: 0.000262
training loss: tensor(0.5052) feature loss: tensor(0.2067)
         GM acc on global data: 0.515 length of data: 10000
-------------Round number:  42  -------------
selected users: [83, 53, 70, 45, 44, 39, 22, 80, 10, 0]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5636) feature loss: tensor(0.2579)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5108) feature loss: tensor(0.2598)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5193) feature loss: tensor(0.2693)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5711) feature loss: tensor(0.2637)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6329) feature loss: tensor(0.2840)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6175) feature loss: tensor(0.3144)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(2.0965) feature loss: tensor(0.2644)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5390) feature loss: tensor(0.2587)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5957) feature loss: tensor(0.2741)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4862) feature loss: tensor(0.2658)
         GM acc on global data: 0.5112 length of data: 10000
-------------Round number:  43  -------------
selected users: [20, 2, 15, 22, 57, 91, 69, 55, 11, 79]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([1001, 16, 32, 32]) torch.Size([1001])
random features: torch.Size([500, 16, 32, 32]) torch.Size([500])
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.6755) feature loss: tensor(0.2479)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5412) feature loss: tensor(0.2717)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.2028) feature loss: tensor(0.2858)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(2.3210) feature loss: tensor(0.2810)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.6810) feature loss: tensor(0.2538)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5172) feature loss: tensor(0.2959)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5202) feature loss: tensor(0.2499)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5694) feature loss: tensor(0.2574)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.6454) feature loss: tensor(0.2551)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5249) feature loss: tensor(0.2560)
         GM acc on global data: 0.509 length of data: 10000
-------------Round number:  44  -------------
selected users: [42, 54, 27, 93, 39, 65, 7, 26, 24, 60]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([996, 16, 32, 32]) torch.Size([996])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.6087) feature loss: tensor(0.2758)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.8312) feature loss: tensor(0.2770)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.6191) feature loss: tensor(0.2709)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5684) feature loss: tensor(0.2714)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5561) feature loss: tensor(0.2947)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5761) feature loss: tensor(0.2774)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.7003) feature loss: tensor(0.2751)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5353) feature loss: tensor(0.2785)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5696) feature loss: tensor(0.2788)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5793) feature loss: tensor(0.2760)
         GM acc on global data: 0.5273 length of data: 10000
-------------Round number:  45  -------------
selected users: [0, 1, 62, 76, 37, 99, 78, 38, 2, 84]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([1001, 16, 32, 32]) torch.Size([1001])
random features: torch.Size([500, 16, 32, 32]) torch.Size([500])
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5304) feature loss: tensor(0.2673)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.7732) feature loss: tensor(0.2660)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6441) feature loss: tensor(0.2707)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.7328) feature loss: tensor(0.2619)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6311) feature loss: tensor(0.2654)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6345) feature loss: tensor(0.2640)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6370) feature loss: tensor(0.2768)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5670) feature loss: tensor(0.2970)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5746) feature loss: tensor(0.2646)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6402) feature loss: tensor(0.2586)
         GM acc on global data: 0.5477 length of data: 10000
-------------Round number:  46  -------------
selected users: [71, 33, 37, 10, 44, 34, 24, 98, 73, 95]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([979, 16, 32, 32]) torch.Size([979])
random features: torch.Size([489, 16, 32, 32]) torch.Size([489])
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5244) feature loss: tensor(0.2690)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5040) feature loss: tensor(0.2632)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5474) feature loss: tensor(0.2724)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.6284) feature loss: tensor(0.2882)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5851) feature loss: tensor(0.2654)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.6346) feature loss: tensor(0.2748)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5554) feature loss: tensor(0.2645)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5534) feature loss: tensor(0.2653)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.6052) feature loss: tensor(0.2728)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.6149) feature loss: tensor(0.2934)
         GM acc on global data: 0.5441 length of data: 10000
-------------Round number:  47  -------------
selected users: [17, 90, 94, 86, 63, 5, 38, 14, 40, 47]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([1005, 16, 32, 32]) torch.Size([1005])
random features: torch.Size([502, 16, 32, 32]) torch.Size([502])
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5963) feature loss: tensor(0.2423)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6215) feature loss: tensor(0.2387)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.7174) feature loss: tensor(0.2411)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6058) feature loss: tensor(0.2436)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5317) feature loss: tensor(0.2382)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6458) feature loss: tensor(0.2406)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4848) feature loss: tensor(0.2429)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5236) feature loss: tensor(0.2330)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6001) feature loss: tensor(0.2428)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5632) feature loss: tensor(0.2381)
         GM acc on global data: 0.5362 length of data: 10000
-------------Round number:  48  -------------
selected users: [93, 5, 71, 9, 11, 79, 69, 8, 59, 63]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1012, 16, 32, 32]) torch.Size([1012])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5344) feature loss: tensor(0.2530)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6003) feature loss: tensor(0.2789)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5302) feature loss: tensor(0.2665)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.3540) feature loss: tensor(0.2802)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6492) feature loss: tensor(0.2802)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6142) feature loss: tensor(0.2616)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5670) feature loss: tensor(0.2559)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6630) feature loss: tensor(0.2541)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.8881) feature loss: tensor(0.2565)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5426) feature loss: tensor(0.2982)
         GM acc on global data: 0.5303 length of data: 10000
-------------Round number:  49  -------------
selected users: [76, 25, 28, 75, 81, 47, 41, 22, 29, 1]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([1009, 16, 32, 32]) torch.Size([1009])
random features: torch.Size([504, 16, 32, 32]) torch.Size([504])
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6683) feature loss: tensor(0.2480)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6468) feature loss: tensor(0.2605)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.8058) feature loss: tensor(0.2563)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6405) feature loss: tensor(0.2595)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.9621) feature loss: tensor(0.2598)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6035) feature loss: tensor(0.2534)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6775) feature loss: tensor(0.2550)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.5095) feature loss: tensor(0.2543)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6045) feature loss: tensor(0.2519)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5839) feature loss: tensor(0.2592)
         GM acc on global data: 0.53 length of data: 10000
-------------Round number:  50  -------------
selected users: [80, 79, 25, 15, 39, 40, 53, 17, 57, 50]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([1014, 16, 32, 32]) torch.Size([1014])
random features: torch.Size([507, 16, 32, 32]) torch.Size([507])
Local adapation with distilling: 0.0001
training loss: tensor(0.5959) feature loss: tensor(0.2236)
Local adapation with distilling: 0.0001
training loss: tensor(0.5200) feature loss: tensor(0.2316)
Local adapation with distilling: 0.0001
training loss: tensor(0.5445) feature loss: tensor(0.2363)
Local adapation with distilling: 0.0001
training loss: tensor(0.5673) feature loss: tensor(0.2332)
Local adapation with distilling: 0.0001
training loss: tensor(0.5782) feature loss: tensor(0.2340)
Local adapation with distilling: 0.0001
training loss: tensor(0.6117) feature loss: tensor(0.2307)
Local adapation with distilling: 0.0001
training loss: tensor(0.5290) feature loss: tensor(0.2280)
Local adapation with distilling: 0.0001
training loss: tensor(0.5535) feature loss: tensor(0.2374)
Local adapation with distilling: 0.0001
training loss: tensor(0.6161) feature loss: tensor(0.2257)
Local adapation with distilling: 0.0001
training loss: tensor(0.6967) feature loss: tensor(0.2262)
         GM acc on global data: 0.5363 length of data: 10000
-------------Round number:  51  -------------
selected users: [71, 43, 11, 83, 78, 19, 80, 4, 79, 75]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.4884) feature loss: tensor(0.2335)
Local adapation with distilling: 0.0001
training loss: tensor(0.5895) feature loss: tensor(0.2309)
Local adapation with distilling: 0.0001
training loss: tensor(0.5642) feature loss: tensor(0.2416)
Local adapation with distilling: 0.0001
training loss: tensor(0.6031) feature loss: tensor(0.2246)
Local adapation with distilling: 0.0001
training loss: tensor(0.5567) feature loss: tensor(0.2264)
Local adapation with distilling: 0.0001
training loss: tensor(0.5998) feature loss: tensor(0.2271)
Local adapation with distilling: 0.0001
training loss: tensor(0.5343) feature loss: tensor(0.2296)
Local adapation with distilling: 0.0001
training loss: tensor(0.6432) feature loss: tensor(0.2349)
Local adapation with distilling: 0.0001
training loss: tensor(0.4995) feature loss: tensor(0.2363)
Local adapation with distilling: 0.0001
training loss: tensor(0.5617) feature loss: tensor(0.2338)
         GM acc on global data: 0.5245 length of data: 10000
-------------Round number:  52  -------------
selected users: [82, 8, 44, 19, 2, 73, 37, 89, 67, 18]
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([984, 16, 32, 32]) torch.Size([984])
random features: torch.Size([492, 16, 32, 32]) torch.Size([492])
Local adapation with distilling: 0.0001
training loss: tensor(0.7146) feature loss: tensor(0.2637)
Local adapation with distilling: 0.0001
training loss: tensor(0.6521) feature loss: tensor(0.2499)
Local adapation with distilling: 0.0001
training loss: tensor(0.6985) feature loss: tensor(0.2536)
Local adapation with distilling: 0.0001
training loss: tensor(0.5933) feature loss: tensor(0.2821)
Local adapation with distilling: 0.0001
training loss: tensor(0.5862) feature loss: tensor(0.2576)
Local adapation with distilling: 0.0001
training loss: tensor(0.5808) feature loss: tensor(0.2453)
Local adapation with distilling: 0.0001
training loss: tensor(0.6395) feature loss: tensor(0.2680)
Local adapation with distilling: 0.0001
training loss: tensor(0.5958) feature loss: tensor(0.2529)
Local adapation with distilling: 0.0001
training loss: tensor(0.7414) feature loss: tensor(0.2583)
Local adapation with distilling: 0.0001
training loss: tensor(0.9052) feature loss: tensor(0.2471)
         GM acc on global data: 0.5249 length of data: 10000
-------------Round number:  53  -------------
selected users: [19, 78, 64, 3, 71, 32, 68, 42, 55, 97]
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0001
training loss: tensor(0.5548) feature loss: tensor(0.2300)
Local adapation with distilling: 0.0001
training loss: tensor(0.5698) feature loss: tensor(0.2394)
Local adapation with distilling: 0.0001
training loss: tensor(0.9401) feature loss: tensor(0.2392)
Local adapation with distilling: 0.0001
training loss: tensor(0.7493) feature loss: tensor(0.2321)
Local adapation with distilling: 0.0001
training loss: tensor(0.5129) feature loss: tensor(0.2404)
Local adapation with distilling: 0.0001
training loss: tensor(0.8140) feature loss: tensor(0.2291)
Local adapation with distilling: 0.0001
training loss: tensor(0.8065) feature loss: tensor(0.2363)
Local adapation with distilling: 0.0001
training loss: tensor(0.6719) feature loss: tensor(0.2388)
Local adapation with distilling: 0.0001
training loss: tensor(0.6987) feature loss: tensor(0.2451)
Local adapation with distilling: 0.0001
training loss: tensor(0.7002) feature loss: tensor(0.2384)
         GM acc on global data: 0.5141 length of data: 10000
-------------Round number:  54  -------------
selected users: [36, 70, 48, 94, 81, 46, 38, 29, 34, 22]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([1013, 16, 32, 32]) torch.Size([1013])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.0001
training loss: tensor(0.5897) feature loss: tensor(0.2707)
Local adapation with distilling: 0.0001
training loss: tensor(0.5357) feature loss: tensor(0.2747)
Local adapation with distilling: 0.0001
training loss: tensor(0.7838) feature loss: tensor(0.2540)
Local adapation with distilling: 0.0001
training loss: tensor(0.6780) feature loss: tensor(0.2908)
Local adapation with distilling: 0.0001
training loss: tensor(2.8458) feature loss: tensor(0.2616)
Local adapation with distilling: 0.0001
training loss: tensor(0.6295) feature loss: tensor(0.2636)
Local adapation with distilling: 0.0001
training loss: tensor(0.4969) feature loss: tensor(0.2607)
Local adapation with distilling: 0.0001
training loss: tensor(0.5662) feature loss: tensor(0.2582)
Local adapation with distilling: 0.0001
training loss: tensor(0.5865) feature loss: tensor(0.2556)
Local adapation with distilling: 0.0001
training loss: tensor(2.1198) feature loss: tensor(0.2528)
         GM acc on global data: 0.5169 length of data: 10000
-------------Round number:  55  -------------
selected users: [28, 92, 98, 95, 84, 34, 38, 76, 17, 78]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([1008, 16, 32, 32]) torch.Size([1008])
random features: torch.Size([504, 16, 32, 32]) torch.Size([504])
Local adapation with distilling: 0.0001
training loss: tensor(0.9602) feature loss: tensor(0.2201)
Local adapation with distilling: 0.0001
training loss: tensor(0.7477) feature loss: tensor(0.2130)
Local adapation with distilling: 0.0001
training loss: tensor(0.5269) feature loss: tensor(0.2180)
Local adapation with distilling: 0.0001
training loss: tensor(0.5682) feature loss: tensor(0.2222)
Local adapation with distilling: 0.0001
training loss: tensor(0.5748) feature loss: tensor(0.2090)
Local adapation with distilling: 0.0001
training loss: tensor(0.5491) feature loss: tensor(0.2186)
Local adapation with distilling: 0.0001
training loss: tensor(0.4491) feature loss: tensor(0.2221)
Local adapation with distilling: 0.0001
training loss: tensor(0.5422) feature loss: tensor(0.2133)
Local adapation with distilling: 0.0001
training loss: tensor(0.5079) feature loss: tensor(0.2224)
Local adapation with distilling: 0.0001
training loss: tensor(0.5101) feature loss: tensor(0.2200)
         GM acc on global data: 0.52 length of data: 10000
-------------Round number:  56  -------------
selected users: [92, 79, 23, 68, 52, 38, 73, 9, 59, 27]
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([1010, 16, 32, 32]) torch.Size([1010])
random features: torch.Size([505, 16, 32, 32]) torch.Size([505])
Local adapation with distilling: 0.0001
training loss: tensor(0.6731) feature loss: tensor(0.2201)
Local adapation with distilling: 0.0001
training loss: tensor(0.5111) feature loss: tensor(0.2090)
Local adapation with distilling: 0.0001
training loss: tensor(0.7359) feature loss: tensor(0.2009)
Local adapation with distilling: 0.0001
training loss: tensor(0.6156) feature loss: tensor(0.2005)
Local adapation with distilling: 0.0001
training loss: tensor(1.1379) feature loss: tensor(0.2082)
Local adapation with distilling: 0.0001
training loss: tensor(0.3871) feature loss: tensor(0.2074)
Local adapation with distilling: 0.0001
training loss: tensor(0.4825) feature loss: tensor(0.2036)
Local adapation with distilling: 0.0001
training loss: tensor(1.0375) feature loss: tensor(0.2074)
Local adapation with distilling: 0.0001
training loss: tensor(0.7091) feature loss: tensor(0.2100)
Local adapation with distilling: 0.0001
training loss: tensor(0.5322) feature loss: tensor(0.1985)
         GM acc on global data: 0.5268 length of data: 10000
-------------Round number:  57  -------------
selected users: [52, 17, 41, 3, 8, 98, 59, 20, 67, 7]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([989, 16, 32, 32]) torch.Size([989])
random features: torch.Size([494, 16, 32, 32]) torch.Size([494])
Local adapation with distilling: 0.0001
training loss: tensor(1.0253) feature loss: tensor(0.2375)
Local adapation with distilling: 0.0001
training loss: tensor(0.4909) feature loss: tensor(0.2158)
Local adapation with distilling: 0.0001
training loss: tensor(0.5749) feature loss: tensor(0.2135)
Local adapation with distilling: 0.0001
training loss: tensor(0.6255) feature loss: tensor(0.2155)
Local adapation with distilling: 0.0001
training loss: tensor(0.5432) feature loss: tensor(0.2315)
Local adapation with distilling: 0.0001
training loss: tensor(0.4668) feature loss: tensor(0.2104)
Local adapation with distilling: 0.0001
training loss: tensor(0.6972) feature loss: tensor(0.2137)
Local adapation with distilling: 0.0001
training loss: tensor(0.6455) feature loss: tensor(0.2132)
Local adapation with distilling: 0.0001
training loss: tensor(0.5639) feature loss: tensor(0.2102)
Local adapation with distilling: 0.0001
training loss: tensor(0.6517) feature loss: tensor(0.2081)
         GM acc on global data: 0.5308 length of data: 10000
-------------Round number:  58  -------------
selected users: [43, 58, 8, 31, 70, 45, 69, 95, 50, 4]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([982, 16, 32, 32]) torch.Size([982])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.0001
training loss: tensor(0.6976) feature loss: tensor(0.2880)
Local adapation with distilling: 0.0001
training loss: tensor(0.6153) feature loss: tensor(0.3400)
Local adapation with distilling: 0.0001
training loss: tensor(0.5517) feature loss: tensor(0.3020)
Local adapation with distilling: 0.0001
training loss: tensor(0.7453) feature loss: tensor(0.3074)
Local adapation with distilling: 0.0001
training loss: tensor(0.6191) feature loss: tensor(0.3068)
Local adapation with distilling: 0.0001
training loss: tensor(0.5953) feature loss: tensor(0.2969)
Local adapation with distilling: 0.0001
training loss: tensor(0.6611) feature loss: tensor(0.3081)
Local adapation with distilling: 0.0001
training loss: tensor(0.5806) feature loss: tensor(0.2965)
Local adapation with distilling: 0.0001
training loss: tensor(0.6967) feature loss: tensor(0.2855)
Local adapation with distilling: 0.0001
training loss: tensor(0.7438) feature loss: tensor(0.2842)
         GM acc on global data: 0.5346 length of data: 10000
-------------Round number:  59  -------------
selected users: [38, 46, 24, 87, 30, 85, 16, 96, 18, 99]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([1000, 16, 32, 32]) torch.Size([1000])
random features: torch.Size([500, 16, 32, 32]) torch.Size([500])
Local adapation with distilling: 0.0001
training loss: tensor(0.4648) feature loss: tensor(0.2339)
Local adapation with distilling: 0.0001
training loss: tensor(0.5552) feature loss: tensor(0.2340)
Local adapation with distilling: 0.0001
training loss: tensor(0.5928) feature loss: tensor(0.2247)
Local adapation with distilling: 0.0001
training loss: tensor(0.6469) feature loss: tensor(0.2261)
Local adapation with distilling: 0.0001
training loss: tensor(0.6349) feature loss: tensor(0.2293)
Local adapation with distilling: 0.0001
training loss: tensor(0.5458) feature loss: tensor(0.2246)
Local adapation with distilling: 0.0001
training loss: tensor(0.7418) feature loss: tensor(0.2271)
Local adapation with distilling: 0.0001
training loss: tensor(1.4313) feature loss: tensor(0.2295)
Local adapation with distilling: 0.0001
training loss: tensor(0.6585) feature loss: tensor(0.2254)
Local adapation with distilling: 0.0001
training loss: tensor(0.5851) feature loss: tensor(0.2280)
         GM acc on global data: 0.5352 length of data: 10000
-------------Round number:  60  -------------
selected users: [88, 4, 79, 14, 55, 3, 19, 28, 94, 25]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0001
training loss: tensor(0.5166) feature loss: tensor(0.2136)
Local adapation with distilling: 0.0001
training loss: tensor(0.5116) feature loss: tensor(0.2124)
Local adapation with distilling: 0.0001
training loss: tensor(0.4693) feature loss: tensor(0.2121)
Local adapation with distilling: 0.0001
training loss: tensor(0.5186) feature loss: tensor(0.2022)
Local adapation with distilling: 0.0001
training loss: tensor(0.5524) feature loss: tensor(0.2123)
Local adapation with distilling: 0.0001
training loss: tensor(0.5467) feature loss: tensor(0.2097)
Local adapation with distilling: 0.0001
training loss: tensor(0.4983) feature loss: tensor(0.2098)
Local adapation with distilling: 0.0001
training loss: tensor(1.1709) feature loss: tensor(0.2140)
Local adapation with distilling: 0.0001
training loss: tensor(0.5991) feature loss: tensor(0.2124)
Local adapation with distilling: 0.0001
training loss: tensor(0.5598) feature loss: tensor(0.2126)
         GM acc on global data: 0.5292 length of data: 10000
-------------Round number:  61  -------------
selected users: [83, 1, 55, 9, 31, 28, 96, 29, 86, 63]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1020, 16, 32, 32]) torch.Size([1020])
random features: torch.Size([510, 16, 32, 32]) torch.Size([510])
Local adapation with distilling: 0.0001
training loss: tensor(0.6059) feature loss: tensor(0.2361)
Local adapation with distilling: 0.0001
training loss: tensor(0.6748) feature loss: tensor(0.2406)
Local adapation with distilling: 0.0001
training loss: tensor(0.5607) feature loss: tensor(0.2330)
Local adapation with distilling: 0.0001
training loss: tensor(0.8977) feature loss: tensor(0.2339)
Local adapation with distilling: 0.0001
training loss: tensor(0.6666) feature loss: tensor(0.2305)
Local adapation with distilling: 0.0001
training loss: tensor(0.6708) feature loss: tensor(0.2444)
Local adapation with distilling: 0.0001
training loss: tensor(1.2729) feature loss: tensor(0.2374)
Local adapation with distilling: 0.0001
training loss: tensor(0.5239) feature loss: tensor(0.2321)
Local adapation with distilling: 0.0001
training loss: tensor(0.5710) feature loss: tensor(0.2397)
Local adapation with distilling: 0.0001
training loss: tensor(0.4952) feature loss: tensor(0.2316)
         GM acc on global data: 0.524 length of data: 10000
-------------Round number:  62  -------------
selected users: [76, 48, 62, 80, 29, 99, 60, 89, 39, 69]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0001
training loss: tensor(0.5717) feature loss: tensor(0.2138)
Local adapation with distilling: 0.0001
training loss: tensor(0.6727) feature loss: tensor(0.2171)
Local adapation with distilling: 0.0001
training loss: tensor(0.6478) feature loss: tensor(0.2218)
Local adapation with distilling: 0.0001
training loss: tensor(0.5371) feature loss: tensor(0.2163)
Local adapation with distilling: 0.0001
training loss: tensor(0.4603) feature loss: tensor(0.2240)
Local adapation with distilling: 0.0001
training loss: tensor(0.5640) feature loss: tensor(0.2174)
Local adapation with distilling: 0.0001
training loss: tensor(0.6653) feature loss: tensor(0.2272)
Local adapation with distilling: 0.0001
training loss: tensor(0.4974) feature loss: tensor(0.2202)
Local adapation with distilling: 0.0001
training loss: tensor(0.5784) feature loss: tensor(0.2248)
Local adapation with distilling: 0.0001
training loss: tensor(0.4892) feature loss: tensor(0.2194)
         GM acc on global data: 0.5223 length of data: 10000
-------------Round number:  63  -------------
selected users: [64, 59, 63, 2, 80, 20, 18, 48, 72, 51]
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([995, 16, 32, 32]) torch.Size([995])
random features: torch.Size([497, 16, 32, 32]) torch.Size([497])
Local adapation with distilling: 0.0001
training loss: tensor(0.8199) feature loss: tensor(0.2114)
Local adapation with distilling: 0.0001
training loss: tensor(0.5470) feature loss: tensor(0.2065)
Local adapation with distilling: 0.0001
training loss: tensor(0.4161) feature loss: tensor(0.1980)
Local adapation with distilling: 0.0001
training loss: tensor(0.4875) feature loss: tensor(0.2018)
Local adapation with distilling: 0.0001
training loss: tensor(0.4561) feature loss: tensor(0.2114)
Local adapation with distilling: 0.0001
training loss: tensor(0.5565) feature loss: tensor(0.2034)
Local adapation with distilling: 0.0001
training loss: tensor(0.6126) feature loss: tensor(0.1971)
Local adapation with distilling: 0.0001
training loss: tensor(0.5364) feature loss: tensor(0.1967)
Local adapation with distilling: 0.0001
training loss: tensor(0.5533) feature loss: tensor(0.2161)
Local adapation with distilling: 0.0001
training loss: tensor(0.6042) feature loss: tensor(0.2094)
         GM acc on global data: 0.5151 length of data: 10000
-------------Round number:  64  -------------
selected users: [17, 22, 60, 92, 23, 19, 71, 94, 40, 49]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([989, 16, 32, 32]) torch.Size([989])
random features: torch.Size([494, 16, 32, 32]) torch.Size([494])
Local adapation with distilling: 0.0001
training loss: tensor(0.5360) feature loss: tensor(0.2379)
Local adapation with distilling: 0.0001
training loss: tensor(1.0102) feature loss: tensor(0.2298)
Local adapation with distilling: 0.0001
training loss: tensor(0.5127) feature loss: tensor(0.2356)
Local adapation with distilling: 0.0001
training loss: tensor(0.6132) feature loss: tensor(0.2302)
Local adapation with distilling: 0.0001
training loss: tensor(0.6294) feature loss: tensor(0.2303)
Local adapation with distilling: 0.0001
training loss: tensor(0.5258) feature loss: tensor(0.2311)
Local adapation with distilling: 0.0001
training loss: tensor(0.5039) feature loss: tensor(0.2386)
Local adapation with distilling: 0.0001
training loss: tensor(0.6378) feature loss: tensor(0.2340)
Local adapation with distilling: 0.0001
training loss: tensor(0.5362) feature loss: tensor(0.2357)
Local adapation with distilling: 0.0001
training loss: tensor(0.5099) feature loss: tensor(0.2317)
         GM acc on global data: 0.5212 length of data: 10000
-------------Round number:  65  -------------
selected users: [37, 81, 39, 61, 76, 90, 27, 86, 28, 69]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([1011, 16, 32, 32]) torch.Size([1011])
random features: torch.Size([505, 16, 32, 32]) torch.Size([505])
Local adapation with distilling: 0.0001
training loss: tensor(0.5711) feature loss: tensor(0.2488)
Local adapation with distilling: 0.0001
training loss: tensor(2.0067) feature loss: tensor(0.2488)
Local adapation with distilling: 0.0001
training loss: tensor(0.5789) feature loss: tensor(0.2484)
Local adapation with distilling: 0.0001
training loss: tensor(0.6355) feature loss: tensor(0.2393)
Local adapation with distilling: 0.0001
training loss: tensor(0.5567) feature loss: tensor(0.2420)
Local adapation with distilling: 0.0001
training loss: tensor(0.6558) feature loss: tensor(0.2366)
Local adapation with distilling: 0.0001
training loss: tensor(0.5961) feature loss: tensor(0.2352)
Local adapation with distilling: 0.0001
training loss: tensor(0.5645) feature loss: tensor(0.2463)
Local adapation with distilling: 0.0001
training loss: tensor(1.1409) feature loss: tensor(0.2491)
Local adapation with distilling: 0.0001
training loss: tensor(0.5030) feature loss: tensor(0.2431)
         GM acc on global data: 0.5237 length of data: 10000
-------------Round number:  66  -------------
selected users: [8, 93, 4, 5, 52, 41, 0, 73, 88, 68]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.4867) feature loss: tensor(0.2067)
Local adapation with distilling: 0.0001
training loss: tensor(0.5380) feature loss: tensor(0.2012)
Local adapation with distilling: 0.0001
training loss: tensor(0.5196) feature loss: tensor(0.2103)
Local adapation with distilling: 0.0001
training loss: tensor(0.6009) feature loss: tensor(0.2045)
Local adapation with distilling: 0.0001
training loss: tensor(1.0445) feature loss: tensor(0.2068)
Local adapation with distilling: 0.0001
training loss: tensor(0.5227) feature loss: tensor(0.2060)
Local adapation with distilling: 0.0001
training loss: tensor(0.4854) feature loss: tensor(0.2054)
Local adapation with distilling: 0.0001
training loss: tensor(0.5138) feature loss: tensor(0.2136)
Local adapation with distilling: 0.0001
training loss: tensor(0.5055) feature loss: tensor(0.2169)
Local adapation with distilling: 0.0001
training loss: tensor(0.5645) feature loss: tensor(0.2067)
         GM acc on global data: 0.5211 length of data: 10000
-------------Round number:  67  -------------
selected users: [17, 24, 64, 93, 97, 29, 3, 70, 82, 11]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([1011, 16, 32, 32]) torch.Size([1011])
random features: torch.Size([505, 16, 32, 32]) torch.Size([505])
Local adapation with distilling: 0.0001
training loss: tensor(0.5593) feature loss: tensor(0.2694)
Local adapation with distilling: 0.0001
training loss: tensor(0.5968) feature loss: tensor(0.2613)
Local adapation with distilling: 0.0001
training loss: tensor(0.7882) feature loss: tensor(0.2578)
Local adapation with distilling: 0.0001
training loss: tensor(0.5657) feature loss: tensor(0.2645)
Local adapation with distilling: 0.0001
training loss: tensor(0.6806) feature loss: tensor(0.2613)
Local adapation with distilling: 0.0001
training loss: tensor(0.5748) feature loss: tensor(0.2646)
Local adapation with distilling: 0.0001
training loss: tensor(0.6463) feature loss: tensor(0.2641)
Local adapation with distilling: 0.0001
training loss: tensor(0.6049) feature loss: tensor(0.2665)
Local adapation with distilling: 0.0001
training loss: tensor(0.7087) feature loss: tensor(0.2629)
Local adapation with distilling: 0.0001
training loss: tensor(0.6445) feature loss: tensor(0.2658)
         GM acc on global data: 0.5057 length of data: 10000
-------------Round number:  68  -------------
selected users: [29, 30, 16, 5, 38, 71, 76, 94, 99, 95]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([1022, 16, 32, 32]) torch.Size([1022])
random features: torch.Size([511, 16, 32, 32]) torch.Size([511])
Local adapation with distilling: 0.0001
training loss: tensor(0.4511) feature loss: tensor(0.2295)
Local adapation with distilling: 0.0001
training loss: tensor(0.6109) feature loss: tensor(0.2220)
Local adapation with distilling: 0.0001
training loss: tensor(0.6052) feature loss: tensor(0.2263)
Local adapation with distilling: 0.0001
training loss: tensor(0.5372) feature loss: tensor(0.2270)
Local adapation with distilling: 0.0001
training loss: tensor(0.4242) feature loss: tensor(0.2320)
Local adapation with distilling: 0.0001
training loss: tensor(0.4736) feature loss: tensor(0.2298)
Local adapation with distilling: 0.0001
training loss: tensor(0.4781) feature loss: tensor(0.2254)
Local adapation with distilling: 0.0001
training loss: tensor(0.5273) feature loss: tensor(0.2315)
Local adapation with distilling: 0.0001
training loss: tensor(0.5631) feature loss: tensor(0.2264)
Local adapation with distilling: 0.0001
training loss: tensor(0.4916) feature loss: tensor(0.2338)
         GM acc on global data: 0.5182 length of data: 10000
-------------Round number:  69  -------------
selected users: [72, 31, 13, 83, 33, 8, 26, 89, 64, 97]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([1013, 16, 32, 32]) torch.Size([1013])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.0001
training loss: tensor(0.4904) feature loss: tensor(0.2082)
Local adapation with distilling: 0.0001
training loss: tensor(0.6406) feature loss: tensor(0.2078)
Local adapation with distilling: 0.0001
training loss: tensor(0.5558) feature loss: tensor(0.2017)
Local adapation with distilling: 0.0001
training loss: tensor(0.5183) feature loss: tensor(0.2022)
Local adapation with distilling: 0.0001
training loss: tensor(0.5270) feature loss: tensor(0.2064)
Local adapation with distilling: 0.0001
training loss: tensor(0.4549) feature loss: tensor(0.2085)
Local adapation with distilling: 0.0001
training loss: tensor(0.4669) feature loss: tensor(0.2076)
Local adapation with distilling: 0.0001
training loss: tensor(0.4762) feature loss: tensor(0.2063)
Local adapation with distilling: 0.0001
training loss: tensor(0.5862) feature loss: tensor(0.2076)
Local adapation with distilling: 0.0001
training loss: tensor(0.5489) feature loss: tensor(0.2085)
         GM acc on global data: 0.5069 length of data: 10000
-------------Round number:  70  -------------
selected users: [81, 43, 88, 32, 50, 71, 73, 55, 42, 2]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([985, 16, 32, 32]) torch.Size([985])
random features: torch.Size([492, 16, 32, 32]) torch.Size([492])
Local adapation with distilling: 0.0001
training loss: tensor(1.9289) feature loss: tensor(0.2582)
Local adapation with distilling: 0.0001
training loss: tensor(0.5929) feature loss: tensor(0.2526)
Local adapation with distilling: 0.0001
training loss: tensor(0.5227) feature loss: tensor(0.2529)
Local adapation with distilling: 0.0001
training loss: tensor(0.6961) feature loss: tensor(0.2442)
Local adapation with distilling: 0.0001
training loss: tensor(0.6243) feature loss: tensor(0.2733)
Local adapation with distilling: 0.0001
training loss: tensor(0.4791) feature loss: tensor(0.2623)
Local adapation with distilling: 0.0001
training loss: tensor(0.5312) feature loss: tensor(0.2581)
Local adapation with distilling: 0.0001
training loss: tensor(0.5703) feature loss: tensor(0.2804)
Local adapation with distilling: 0.0001
training loss: tensor(0.6577) feature loss: tensor(0.2632)
Local adapation with distilling: 0.0001
training loss: tensor(0.5550) feature loss: tensor(0.2572)
         GM acc on global data: 0.5229 length of data: 10000
-------------Round number:  71  -------------
selected users: [41, 84, 98, 42, 75, 25, 60, 19, 52, 29]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([985, 16, 32, 32]) torch.Size([985])
random features: torch.Size([492, 16, 32, 32]) torch.Size([492])
Local adapation with distilling: 0.0001
training loss: tensor(0.5270) feature loss: tensor(0.2243)
Local adapation with distilling: 0.0001
training loss: tensor(0.5787) feature loss: tensor(0.2224)
Local adapation with distilling: 0.0001
training loss: tensor(0.5234) feature loss: tensor(0.2247)
Local adapation with distilling: 0.0001
training loss: tensor(0.5674) feature loss: tensor(0.2286)
Local adapation with distilling: 0.0001
training loss: tensor(0.5825) feature loss: tensor(0.2433)
Local adapation with distilling: 0.0001
training loss: tensor(0.5875) feature loss: tensor(0.2312)
Local adapation with distilling: 0.0001
training loss: tensor(0.5187) feature loss: tensor(0.2287)
Local adapation with distilling: 0.0001
training loss: tensor(0.5213) feature loss: tensor(0.2223)
Local adapation with distilling: 0.0001
training loss: tensor(0.9431) feature loss: tensor(0.2345)
Local adapation with distilling: 0.0001
training loss: tensor(0.4807) feature loss: tensor(0.2316)
         GM acc on global data: 0.5279 length of data: 10000
-------------Round number:  72  -------------
selected users: [76, 82, 43, 16, 84, 95, 78, 91, 30, 22]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([1004, 16, 32, 32]) torch.Size([1004])
random features: torch.Size([502, 16, 32, 32]) torch.Size([502])
Local adapation with distilling: 0.0001
training loss: tensor(0.4908) feature loss: tensor(0.2165)
Local adapation with distilling: 0.0001
training loss: tensor(0.5225) feature loss: tensor(0.2046)
Local adapation with distilling: 0.0001
training loss: tensor(0.4870) feature loss: tensor(0.2013)
Local adapation with distilling: 0.0001
training loss: tensor(0.5563) feature loss: tensor(0.2004)
Local adapation with distilling: 0.0001
training loss: tensor(0.4839) feature loss: tensor(0.1972)
Local adapation with distilling: 0.0001
training loss: tensor(0.4782) feature loss: tensor(0.2037)
Local adapation with distilling: 0.0001
training loss: tensor(0.4909) feature loss: tensor(0.1987)
Local adapation with distilling: 0.0001
training loss: tensor(0.5223) feature loss: tensor(0.2005)
Local adapation with distilling: 0.0001
training loss: tensor(0.5402) feature loss: tensor(0.2003)
Local adapation with distilling: 0.0001
training loss: tensor(1.7626) feature loss: tensor(0.2028)
         GM acc on global data: 0.5227 length of data: 10000
-------------Round number:  73  -------------
selected users: [49, 14, 34, 70, 90, 35, 68, 76, 80, 9]
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([997, 16, 32, 32]) torch.Size([997])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0001
training loss: tensor(0.5672) feature loss: tensor(0.2230)
Local adapation with distilling: 0.0001
training loss: tensor(0.5185) feature loss: tensor(0.2225)
Local adapation with distilling: 0.0001
training loss: tensor(0.5880) feature loss: tensor(0.2234)
Local adapation with distilling: 0.0001
training loss: tensor(0.5017) feature loss: tensor(0.2297)
Local adapation with distilling: 0.0001
training loss: tensor(0.5543) feature loss: tensor(0.2203)
Local adapation with distilling: 0.0001
training loss: tensor(0.6389) feature loss: tensor(0.2216)
Local adapation with distilling: 0.0001
training loss: tensor(0.6321) feature loss: tensor(0.2259)
Local adapation with distilling: 0.0001
training loss: tensor(0.4664) feature loss: tensor(0.2259)
Local adapation with distilling: 0.0001
training loss: tensor(0.4701) feature loss: tensor(0.2246)
Local adapation with distilling: 0.0001
training loss: tensor(1.2596) feature loss: tensor(0.2290)
         GM acc on global data: 0.5195 length of data: 10000
-------------Round number:  74  -------------
selected users: [85, 64, 63, 80, 6, 12, 43, 17, 7, 8]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([991, 16, 32, 32]) torch.Size([991])
random features: torch.Size([495, 16, 32, 32]) torch.Size([495])
Local adapation with distilling: 0.0001
training loss: tensor(0.5725) feature loss: tensor(0.2571)
Local adapation with distilling: 0.0001
training loss: tensor(0.6819) feature loss: tensor(0.2530)
Local adapation with distilling: 0.0001
training loss: tensor(0.4997) feature loss: tensor(0.2554)
Local adapation with distilling: 0.0001
training loss: tensor(0.4853) feature loss: tensor(0.2590)
Local adapation with distilling: 0.0001
training loss: tensor(0.7503) feature loss: tensor(0.2584)
Local adapation with distilling: 0.0001
training loss: tensor(0.6877) feature loss: tensor(0.2526)
Local adapation with distilling: 0.0001
training loss: tensor(0.5275) feature loss: tensor(0.2560)
Local adapation with distilling: 0.0001
training loss: tensor(0.5295) feature loss: tensor(0.2627)
Local adapation with distilling: 0.0001
training loss: tensor(0.6761) feature loss: tensor(0.2571)
Local adapation with distilling: 0.0001
training loss: tensor(0.5487) feature loss: tensor(0.2585)
         GM acc on global data: 0.5265 length of data: 10000
-------------Round number:  75  -------------
selected users: [36, 7, 6, 45, 56, 54, 22, 37, 53, 68]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([1035, 16, 32, 32]) torch.Size([1035])
random features: torch.Size([517, 16, 32, 32]) torch.Size([517])
Local adapation with distilling: 0.0001
training loss: tensor(0.6764) feature loss: tensor(0.2879)
Local adapation with distilling: 0.0001
training loss: tensor(0.6641) feature loss: tensor(0.3563)
Local adapation with distilling: 0.0001
training loss: tensor(0.7222) feature loss: tensor(0.3305)
Local adapation with distilling: 0.0001
training loss: tensor(0.6640) feature loss: tensor(0.3245)
Local adapation with distilling: 0.0001
training loss: tensor(0.7196) feature loss: tensor(0.2979)
Local adapation with distilling: 0.0001
training loss: tensor(0.8609) feature loss: tensor(0.3234)
Local adapation with distilling: 0.0001
training loss: tensor(2.3825) feature loss: tensor(0.3438)
Local adapation with distilling: 0.0001
training loss: tensor(0.6283) feature loss: tensor(0.3061)
Local adapation with distilling: 0.0001
training loss: tensor(0.8443) feature loss: tensor(0.4345)
Local adapation with distilling: 0.0001
training loss: tensor(0.5940) feature loss: tensor(0.3534)
         GM acc on global data: 0.4903 length of data: 10000
-------------Round number:  76  -------------
selected users: [38, 37, 32, 50, 10, 94, 19, 44, 86, 23]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.4674) feature loss: tensor(0.2630)
Local adapation with distilling: 0.0001
training loss: tensor(0.4990) feature loss: tensor(0.2637)
Local adapation with distilling: 0.0001
training loss: tensor(0.6744) feature loss: tensor(0.2536)
Local adapation with distilling: 0.0001
training loss: tensor(0.6117) feature loss: tensor(0.2925)
Local adapation with distilling: 0.0001
training loss: tensor(0.6357) feature loss: tensor(0.2625)
Local adapation with distilling: 0.0001
training loss: tensor(0.5136) feature loss: tensor(0.2593)
Local adapation with distilling: 0.0001
training loss: tensor(0.4974) feature loss: tensor(0.2552)
Local adapation with distilling: 0.0001
training loss: tensor(0.6616) feature loss: tensor(0.2760)
Local adapation with distilling: 0.0001
training loss: tensor(0.5179) feature loss: tensor(0.2845)
Local adapation with distilling: 0.0001
training loss: tensor(0.6493) feature loss: tensor(0.2599)
         GM acc on global data: 0.5045 length of data: 10000
-------------Round number:  77  -------------
selected users: [5, 93, 41, 96, 16, 42, 81, 91, 50, 58]
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1010, 16, 32, 32]) torch.Size([1010])
random features: torch.Size([505, 16, 32, 32]) torch.Size([505])
Local adapation with distilling: 0.0001
training loss: tensor(0.6330) feature loss: tensor(0.2417)
Local adapation with distilling: 0.0001
training loss: tensor(0.5810) feature loss: tensor(0.2379)
Local adapation with distilling: 0.0001
training loss: tensor(0.5528) feature loss: tensor(0.2401)
Local adapation with distilling: 0.0001
training loss: tensor(1.2802) feature loss: tensor(0.2441)
Local adapation with distilling: 0.0001
training loss: tensor(0.5784) feature loss: tensor(0.2355)
Local adapation with distilling: 0.0001
training loss: tensor(0.5683) feature loss: tensor(0.2385)
Local adapation with distilling: 0.0001
training loss: tensor(2.0439) feature loss: tensor(0.2492)
Local adapation with distilling: 0.0001
training loss: tensor(0.5702) feature loss: tensor(0.2417)
Local adapation with distilling: 0.0001
training loss: tensor(0.5539) feature loss: tensor(0.2381)
Local adapation with distilling: 0.0001
training loss: tensor(0.5398) feature loss: tensor(0.2429)
         GM acc on global data: 0.5176 length of data: 10000
-------------Round number:  78  -------------
selected users: [9, 46, 7, 63, 15, 2, 74, 31, 5, 36]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([996, 16, 32, 32]) torch.Size([996])
random features: torch.Size([498, 16, 32, 32]) torch.Size([498])
Local adapation with distilling: 0.0001
training loss: tensor(1.0225) feature loss: tensor(0.2686)
Local adapation with distilling: 0.0001
training loss: tensor(0.5822) feature loss: tensor(0.2560)
Local adapation with distilling: 0.0001
training loss: tensor(0.5928) feature loss: tensor(0.2473)
Local adapation with distilling: 0.0001
training loss: tensor(0.5072) feature loss: tensor(0.2523)
Local adapation with distilling: 0.0001
training loss: tensor(0.6380) feature loss: tensor(0.2918)
Local adapation with distilling: 0.0001
training loss: tensor(0.5270) feature loss: tensor(0.2513)
Local adapation with distilling: 0.0001
training loss: tensor(0.5615) feature loss: tensor(0.2542)
Local adapation with distilling: 0.0001
training loss: tensor(0.7296) feature loss: tensor(0.2580)
Local adapation with distilling: 0.0001
training loss: tensor(0.5528) feature loss: tensor(0.2524)
Local adapation with distilling: 0.0001
training loss: tensor(0.5148) feature loss: tensor(0.2577)
         GM acc on global data: 0.5249 length of data: 10000
-------------Round number:  79  -------------
selected users: [68, 18, 86, 60, 56, 32, 30, 24, 45, 92]
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.5633) feature loss: tensor(0.2434)
Local adapation with distilling: 0.0001
training loss: tensor(0.6525) feature loss: tensor(0.2423)
Local adapation with distilling: 0.0001
training loss: tensor(0.5033) feature loss: tensor(0.2441)
Local adapation with distilling: 0.0001
training loss: tensor(0.5395) feature loss: tensor(0.2459)
Local adapation with distilling: 0.0001
training loss: tensor(0.5435) feature loss: tensor(0.2438)
Local adapation with distilling: 0.0001
training loss: tensor(0.6235) feature loss: tensor(0.2336)
Local adapation with distilling: 0.0001
training loss: tensor(0.5705) feature loss: tensor(0.2490)
Local adapation with distilling: 0.0001
training loss: tensor(0.5193) feature loss: tensor(0.2452)
Local adapation with distilling: 0.0001
training loss: tensor(0.5615) feature loss: tensor(0.2435)
Local adapation with distilling: 0.0001
training loss: tensor(0.6229) feature loss: tensor(0.2502)
         GM acc on global data: 0.5292 length of data: 10000
-------------Round number:  80  -------------
selected users: [37, 65, 95, 53, 66, 30, 73, 85, 45, 36]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1023, 16, 32, 32]) torch.Size([1023])
random features: torch.Size([511, 16, 32, 32]) torch.Size([511])
Local adapation with distilling: 0.0001
training loss: tensor(0.4690) feature loss: tensor(0.2208)
Local adapation with distilling: 0.0001
training loss: tensor(0.6166) feature loss: tensor(0.2213)
Local adapation with distilling: 0.0001
training loss: tensor(0.4928) feature loss: tensor(0.2221)
Local adapation with distilling: 0.0001
training loss: tensor(0.4833) feature loss: tensor(0.2197)
Local adapation with distilling: 0.0001
training loss: tensor(0.6195) feature loss: tensor(0.2145)
Local adapation with distilling: 0.0001
training loss: tensor(0.4993) feature loss: tensor(0.2198)
Local adapation with distilling: 0.0001
training loss: tensor(0.5297) feature loss: tensor(0.2173)
Local adapation with distilling: 0.0001
training loss: tensor(0.5157) feature loss: tensor(0.2151)
Local adapation with distilling: 0.0001
training loss: tensor(0.5098) feature loss: tensor(0.2195)
Local adapation with distilling: 0.0001
training loss: tensor(0.4635) feature loss: tensor(0.2206)
         GM acc on global data: 0.5335 length of data: 10000
-------------Round number:  81  -------------
selected users: [73, 89, 41, 78, 51, 21, 30, 69, 8, 5]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([993, 16, 32, 32]) torch.Size([993])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.0001
training loss: tensor(0.4057) feature loss: tensor(0.1854)
Local adapation with distilling: 0.0001
training loss: tensor(0.4341) feature loss: tensor(0.1847)
Local adapation with distilling: 0.0001
training loss: tensor(0.4408) feature loss: tensor(0.1833)
Local adapation with distilling: 0.0001
training loss: tensor(0.4166) feature loss: tensor(0.1850)
Local adapation with distilling: 0.0001
training loss: tensor(0.5001) feature loss: tensor(0.1842)
Local adapation with distilling: 0.0001
training loss: tensor(0.5000) feature loss: tensor(0.1816)
Local adapation with distilling: 0.0001
training loss: tensor(0.4088) feature loss: tensor(0.1863)
Local adapation with distilling: 0.0001
training loss: tensor(0.4249) feature loss: tensor(0.1877)
Local adapation with distilling: 0.0001
training loss: tensor(0.4158) feature loss: tensor(0.1881)
Local adapation with distilling: 0.0001
training loss: tensor(0.4462) feature loss: tensor(0.1918)
         GM acc on global data: 0.5318 length of data: 10000
-------------Round number:  82  -------------
selected users: [72, 33, 58, 2, 55, 84, 54, 75, 28, 40]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([995, 16, 32, 32]) torch.Size([995])
random features: torch.Size([497, 16, 32, 32]) torch.Size([497])
Local adapation with distilling: 0.0001
training loss: tensor(0.5047) feature loss: tensor(0.2354)
Local adapation with distilling: 0.0001
training loss: tensor(0.5178) feature loss: tensor(0.2339)
Local adapation with distilling: 0.0001
training loss: tensor(0.5021) feature loss: tensor(0.2331)
Local adapation with distilling: 0.0001
training loss: tensor(0.4926) feature loss: tensor(0.2349)
Local adapation with distilling: 0.0001
training loss: tensor(0.5703) feature loss: tensor(0.2533)
Local adapation with distilling: 0.0001
training loss: tensor(0.5595) feature loss: tensor(0.2314)
Local adapation with distilling: 0.0001
training loss: tensor(0.7383) feature loss: tensor(0.2721)
Local adapation with distilling: 0.0001
training loss: tensor(0.5689) feature loss: tensor(0.2365)
Local adapation with distilling: 0.0001
training loss: tensor(0.9158) feature loss: tensor(0.2366)
Local adapation with distilling: 0.0001
training loss: tensor(0.5751) feature loss: tensor(0.2334)
         GM acc on global data: 0.5364 length of data: 10000
-------------Round number:  83  -------------
selected users: [6, 65, 95, 84, 61, 12, 30, 69, 35, 1]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([999, 16, 32, 32]) torch.Size([999])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.6897) feature loss: tensor(0.2611)
Local adapation with distilling: 0.0001
training loss: tensor(0.5477) feature loss: tensor(0.2398)
Local adapation with distilling: 0.0001
training loss: tensor(0.4884) feature loss: tensor(0.2368)
Local adapation with distilling: 0.0001
training loss: tensor(0.5200) feature loss: tensor(0.2330)
Local adapation with distilling: 0.0001
training loss: tensor(0.5883) feature loss: tensor(0.2378)
Local adapation with distilling: 0.0001
training loss: tensor(0.5911) feature loss: tensor(0.2394)
Local adapation with distilling: 0.0001
training loss: tensor(0.4832) feature loss: tensor(0.2693)
Local adapation with distilling: 0.0001
training loss: tensor(0.4950) feature loss: tensor(0.2370)
Local adapation with distilling: 0.0001
training loss: tensor(0.6298) feature loss: tensor(0.2373)
Local adapation with distilling: 0.0001
training loss: tensor(0.6297) feature loss: tensor(0.2361)
         GM acc on global data: 0.5376 length of data: 10000
-------------Round number:  84  -------------
selected users: [94, 55, 80, 1, 90, 11, 32, 8, 6, 82]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([989, 16, 32, 32]) torch.Size([989])
random features: torch.Size([494, 16, 32, 32]) torch.Size([494])
Local adapation with distilling: 0.0001
training loss: tensor(0.5795) feature loss: tensor(0.2708)
Local adapation with distilling: 0.0001
training loss: tensor(0.5052) feature loss: tensor(0.2583)
Local adapation with distilling: 0.0001
training loss: tensor(0.5085) feature loss: tensor(0.2547)
Local adapation with distilling: 0.0001
training loss: tensor(0.6739) feature loss: tensor(0.2472)
Local adapation with distilling: 0.0001
training loss: tensor(0.5784) feature loss: tensor(0.2432)
Local adapation with distilling: 0.0001
training loss: tensor(0.5670) feature loss: tensor(0.2482)
Local adapation with distilling: 0.0001
training loss: tensor(0.6117) feature loss: tensor(0.2408)
Local adapation with distilling: 0.0001
training loss: tensor(0.4823) feature loss: tensor(0.2547)
Local adapation with distilling: 0.0001
training loss: tensor(0.6152) feature loss: tensor(0.2691)
Local adapation with distilling: 0.0001
training loss: tensor(0.5463) feature loss: tensor(0.2518)
         GM acc on global data: 0.5464 length of data: 10000
-------------Round number:  85  -------------
selected users: [81, 25, 40, 87, 41, 23, 10, 89, 50, 54]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([985, 16, 32, 32]) torch.Size([985])
random features: torch.Size([492, 16, 32, 32]) torch.Size([492])
Local adapation with distilling: 0.0001
training loss: tensor(1.5404) feature loss: tensor(0.2402)
Local adapation with distilling: 0.0001
training loss: tensor(0.5419) feature loss: tensor(0.2389)
Local adapation with distilling: 0.0001
training loss: tensor(0.4990) feature loss: tensor(0.2357)
Local adapation with distilling: 0.0001
training loss: tensor(0.5695) feature loss: tensor(0.2319)
Local adapation with distilling: 0.0001
training loss: tensor(0.4686) feature loss: tensor(0.2361)
Local adapation with distilling: 0.0001
training loss: tensor(0.5896) feature loss: tensor(0.2535)
Local adapation with distilling: 0.0001
training loss: tensor(0.5720) feature loss: tensor(0.2341)
Local adapation with distilling: 0.0001
training loss: tensor(0.4845) feature loss: tensor(0.2339)
Local adapation with distilling: 0.0001
training loss: tensor(0.4958) feature loss: tensor(0.2347)
Local adapation with distilling: 0.0001
training loss: tensor(0.6015) feature loss: tensor(0.2345)
         GM acc on global data: 0.5409 length of data: 10000
-------------Round number:  86  -------------
selected users: [69, 74, 34, 68, 42, 0, 32, 88, 8, 3]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([983, 16, 32, 32]) torch.Size([983])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.0001
training loss: tensor(0.4295) feature loss: tensor(0.2127)
Local adapation with distilling: 0.0001
training loss: tensor(0.4784) feature loss: tensor(0.2109)
Local adapation with distilling: 0.0001
training loss: tensor(0.4615) feature loss: tensor(0.2109)
Local adapation with distilling: 0.0001
training loss: tensor(0.5262) feature loss: tensor(0.2208)
Local adapation with distilling: 0.0001
training loss: tensor(0.4815) feature loss: tensor(0.2110)
Local adapation with distilling: 0.0001
training loss: tensor(0.4722) feature loss: tensor(0.2127)
Local adapation with distilling: 0.0001
training loss: tensor(0.4742) feature loss: tensor(0.2045)
Local adapation with distilling: 0.0001
training loss: tensor(0.4801) feature loss: tensor(0.2081)
Local adapation with distilling: 0.0001
training loss: tensor(0.4045) feature loss: tensor(0.2128)
Local adapation with distilling: 0.0001
training loss: tensor(0.4824) feature loss: tensor(0.2063)
         GM acc on global data: 0.5288 length of data: 10000
-------------Round number:  87  -------------
selected users: [16, 81, 85, 32, 39, 25, 26, 29, 65, 7]
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([1018, 16, 32, 32]) torch.Size([1018])
random features: torch.Size([509, 16, 32, 32]) torch.Size([509])
Local adapation with distilling: 0.0001
training loss: tensor(0.5548) feature loss: tensor(0.2480)
Local adapation with distilling: 0.0001
training loss: tensor(2.3966) feature loss: tensor(0.2839)
Local adapation with distilling: 0.0001
training loss: tensor(0.5658) feature loss: tensor(0.2774)
Local adapation with distilling: 0.0001
training loss: tensor(0.5233) feature loss: tensor(0.2452)
Local adapation with distilling: 0.0001
training loss: tensor(0.6419) feature loss: tensor(0.2480)
Local adapation with distilling: 0.0001
training loss: tensor(0.6023) feature loss: tensor(0.2497)
Local adapation with distilling: 0.0001
training loss: tensor(0.5370) feature loss: tensor(0.2476)
Local adapation with distilling: 0.0001
training loss: tensor(0.5144) feature loss: tensor(0.2507)
Local adapation with distilling: 0.0001
training loss: tensor(0.6375) feature loss: tensor(0.2506)
Local adapation with distilling: 0.0001
training loss: tensor(0.5816) feature loss: tensor(0.2495)
         GM acc on global data: 0.5444 length of data: 10000
-------------Round number:  88  -------------
selected users: [95, 53, 43, 84, 2, 74, 55, 31, 54, 97]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([993, 16, 32, 32]) torch.Size([993])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.0001
training loss: tensor(0.5117) feature loss: tensor(0.2571)
Local adapation with distilling: 0.0001
training loss: tensor(0.5042) feature loss: tensor(0.2530)
Local adapation with distilling: 0.0001
training loss: tensor(0.5480) feature loss: tensor(0.2814)
Local adapation with distilling: 0.0001
training loss: tensor(0.5377) feature loss: tensor(0.2519)
Local adapation with distilling: 0.0001
training loss: tensor(0.5463) feature loss: tensor(0.2539)
Local adapation with distilling: 0.0001
training loss: tensor(0.5360) feature loss: tensor(0.2504)
Local adapation with distilling: 0.0001
training loss: tensor(0.5352) feature loss: tensor(0.2537)
Local adapation with distilling: 0.0001
training loss: tensor(0.6252) feature loss: tensor(0.2508)
Local adapation with distilling: 0.0001
training loss: tensor(0.6512) feature loss: tensor(0.2538)
Local adapation with distilling: 0.0001
training loss: tensor(0.5971) feature loss: tensor(0.2475)
         GM acc on global data: 0.5359 length of data: 10000
-------------Round number:  89  -------------
selected users: [65, 21, 87, 6, 46, 74, 44, 60, 72, 5]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([115, 16, 32, 32]) torch.Size([115])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([998, 16, 32, 32]) torch.Size([998])
random features: torch.Size([499, 16, 32, 32]) torch.Size([499])
Local adapation with distilling: 0.0001
training loss: tensor(0.4808) feature loss: tensor(0.2196)
Local adapation with distilling: 0.0001
training loss: tensor(0.4882) feature loss: tensor(0.2260)
Local adapation with distilling: 0.0001
training loss: tensor(0.5290) feature loss: tensor(0.2124)
Local adapation with distilling: 0.0001
training loss: tensor(0.5864) feature loss: tensor(0.2221)
Local adapation with distilling: 0.0001
training loss: tensor(0.6493) feature loss: tensor(0.2238)
Local adapation with distilling: 0.0001
training loss: tensor(0.4394) feature loss: tensor(0.2173)
Local adapation with distilling: 0.0001
training loss: tensor(0.5648) feature loss: tensor(0.2237)
Local adapation with distilling: 0.0001
training loss: tensor(0.4793) feature loss: tensor(0.2173)
Local adapation with distilling: 0.0001
training loss: tensor(0.4776) feature loss: tensor(0.2162)
Local adapation with distilling: 0.0001
training loss: tensor(0.5080) feature loss: tensor(0.2207)
         GM acc on global data: 0.5432 length of data: 10000
-------------Round number:  90  -------------
selected users: [25, 85, 96, 89, 65, 94, 5, 35, 36, 92]
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([1012, 16, 32, 32]) torch.Size([1012])
random features: torch.Size([506, 16, 32, 32]) torch.Size([506])
Local adapation with distilling: 0.0001
training loss: tensor(0.4548) feature loss: tensor(0.2018)
Local adapation with distilling: 0.0001
training loss: tensor(0.4438) feature loss: tensor(0.1968)
Local adapation with distilling: 0.0001
training loss: tensor(1.3777) feature loss: tensor(0.1968)
Local adapation with distilling: 0.0001
training loss: tensor(0.4524) feature loss: tensor(0.1966)
Local adapation with distilling: 0.0001
training loss: tensor(0.4343) feature loss: tensor(0.1995)
Local adapation with distilling: 0.0001
training loss: tensor(0.4838) feature loss: tensor(0.1963)
Local adapation with distilling: 0.0001
training loss: tensor(0.4374) feature loss: tensor(0.1990)
Local adapation with distilling: 0.0001
training loss: tensor(0.5591) feature loss: tensor(0.1918)
Local adapation with distilling: 0.0001
training loss: tensor(0.4457) feature loss: tensor(0.1976)
Local adapation with distilling: 0.0001
training loss: tensor(0.5159) feature loss: tensor(0.2028)
         GM acc on global data: 0.5538 length of data: 10000
-------------Round number:  91  -------------
selected users: [75, 25, 3, 52, 78, 54, 59, 26, 62, 97]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([1008, 16, 32, 32]) torch.Size([1008])
random features: torch.Size([504, 16, 32, 32]) torch.Size([504])
Local adapation with distilling: 0.0001
training loss: tensor(0.5421) feature loss: tensor(0.2636)
Local adapation with distilling: 0.0001
training loss: tensor(0.4996) feature loss: tensor(0.2656)
Local adapation with distilling: 0.0001
training loss: tensor(0.5596) feature loss: tensor(0.2625)
Local adapation with distilling: 0.0001
training loss: tensor(0.7798) feature loss: tensor(0.2671)
Local adapation with distilling: 0.0001
training loss: tensor(0.5672) feature loss: tensor(0.2598)
Local adapation with distilling: 0.0001
training loss: tensor(0.5512) feature loss: tensor(0.2585)
Local adapation with distilling: 0.0001
training loss: tensor(0.6622) feature loss: tensor(0.2617)
Local adapation with distilling: 0.0001
training loss: tensor(0.5011) feature loss: tensor(0.2636)
Local adapation with distilling: 0.0001
training loss: tensor(0.6153) feature loss: tensor(0.2601)
Local adapation with distilling: 0.0001
training loss: tensor(0.5714) feature loss: tensor(0.2624)
         GM acc on global data: 0.5494 length of data: 10000
-------------Round number:  92  -------------
selected users: [25, 99, 73, 61, 66, 36, 23, 83, 77, 6]
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([1002, 16, 32, 32]) torch.Size([1002])
random features: torch.Size([501, 16, 32, 32]) torch.Size([501])
Local adapation with distilling: 0.0001
training loss: tensor(0.4172) feature loss: tensor(0.2142)
Local adapation with distilling: 0.0001
training loss: tensor(0.5031) feature loss: tensor(0.1878)
Local adapation with distilling: 0.0001
training loss: tensor(0.4520) feature loss: tensor(0.1955)
Local adapation with distilling: 0.0001
training loss: tensor(0.4980) feature loss: tensor(0.1859)
Local adapation with distilling: 0.0001
training loss: tensor(0.5120) feature loss: tensor(0.1838)
Local adapation with distilling: 0.0001
training loss: tensor(0.4062) feature loss: tensor(0.1919)
Local adapation with distilling: 0.0001
training loss: tensor(0.5310) feature loss: tensor(0.2096)
Local adapation with distilling: 0.0001
training loss: tensor(0.4843) feature loss: tensor(0.1823)
Local adapation with distilling: 0.0001
training loss: tensor(0.5952) feature loss: tensor(0.1883)
Local adapation with distilling: 0.0001
training loss: tensor(0.4747) feature loss: tensor(0.2017)
         GM acc on global data: 0.5392 length of data: 10000
-------------Round number:  93  -------------
selected users: [75, 82, 56, 27, 42, 35, 1, 97, 66, 61]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([92, 16, 32, 32]) torch.Size([92])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([108, 16, 32, 32]) torch.Size([108])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([1004, 16, 32, 32]) torch.Size([1004])
random features: torch.Size([502, 16, 32, 32]) torch.Size([502])
Local adapation with distilling: 0.0001
training loss: tensor(0.4990) feature loss: tensor(0.2647)
Local adapation with distilling: 0.0001
training loss: tensor(0.5343) feature loss: tensor(0.2215)
Local adapation with distilling: 0.0001
training loss: tensor(0.5266) feature loss: tensor(0.2218)
Local adapation with distilling: 0.0001
training loss: tensor(0.6290) feature loss: tensor(0.2443)
Local adapation with distilling: 0.0001
training loss: tensor(0.5539) feature loss: tensor(0.2181)
Local adapation with distilling: 0.0001
training loss: tensor(0.5289) feature loss: tensor(0.2165)
Local adapation with distilling: 0.0001
training loss: tensor(0.5612) feature loss: tensor(0.2270)
Local adapation with distilling: 0.0001
training loss: tensor(0.5173) feature loss: tensor(0.2458)
Local adapation with distilling: 0.0001
training loss: tensor(0.5262) feature loss: tensor(0.2203)
Local adapation with distilling: 0.0001
training loss: tensor(0.5185) feature loss: tensor(0.2177)
         GM acc on global data: 0.5477 length of data: 10000
-------------Round number:  94  -------------
selected users: [13, 73, 5, 18, 99, 48, 23, 4, 35, 17]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([1003, 16, 32, 32]) torch.Size([1003])
random features: torch.Size([501, 16, 32, 32]) torch.Size([501])
Local adapation with distilling: 0.0001
training loss: tensor(0.4803) feature loss: tensor(0.1789)
Local adapation with distilling: 0.0001
training loss: tensor(0.3827) feature loss: tensor(0.1821)
Local adapation with distilling: 0.0001
training loss: tensor(0.3935) feature loss: tensor(0.1839)
Local adapation with distilling: 0.0001
training loss: tensor(0.6289) feature loss: tensor(0.1790)
Local adapation with distilling: 0.0001
training loss: tensor(0.4826) feature loss: tensor(0.1799)
Local adapation with distilling: 0.0001
training loss: tensor(0.5130) feature loss: tensor(0.1799)
Local adapation with distilling: 0.0001
training loss: tensor(0.4713) feature loss: tensor(0.1796)
Local adapation with distilling: 0.0001
training loss: tensor(0.5083) feature loss: tensor(0.1774)
Local adapation with distilling: 0.0001
training loss: tensor(0.3999) feature loss: tensor(0.1816)
Local adapation with distilling: 0.0001
training loss: tensor(0.4056) feature loss: tensor(0.1862)
         GM acc on global data: 0.5359 length of data: 10000
-------------Round number:  95  -------------
selected users: [88, 9, 1, 60, 95, 26, 45, 71, 44, 21]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([992, 16, 32, 32]) torch.Size([992])
random features: torch.Size([496, 16, 32, 32]) torch.Size([496])
Local adapation with distilling: 0.0001
training loss: tensor(0.4517) feature loss: tensor(0.2380)
Local adapation with distilling: 0.0001
training loss: tensor(0.6093) feature loss: tensor(0.2605)
Local adapation with distilling: 0.0001
training loss: tensor(0.4656) feature loss: tensor(0.2271)
Local adapation with distilling: 0.0001
training loss: tensor(0.4870) feature loss: tensor(0.2302)
Local adapation with distilling: 0.0001
training loss: tensor(0.4435) feature loss: tensor(0.2729)
Local adapation with distilling: 0.0001
training loss: tensor(0.4430) feature loss: tensor(0.2279)
Local adapation with distilling: 0.0001
training loss: tensor(0.4937) feature loss: tensor(0.2251)
Local adapation with distilling: 0.0001
training loss: tensor(0.4580) feature loss: tensor(0.2793)
Local adapation with distilling: 0.0001
training loss: tensor(0.5580) feature loss: tensor(0.2776)
Local adapation with distilling: 0.0001
training loss: tensor(0.4944) feature loss: tensor(0.2333)
         GM acc on global data: 0.5422 length of data: 10000
-------------Round number:  96  -------------
selected users: [41, 28, 52, 15, 87, 17, 75, 42, 45, 49]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([107, 16, 32, 32]) torch.Size([107])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([994, 16, 32, 32]) torch.Size([994])
random features: torch.Size([497, 16, 32, 32]) torch.Size([497])
Local adapation with distilling: 0.0001
training loss: tensor(0.4504) feature loss: tensor(0.2198)
Local adapation with distilling: 0.0001
training loss: tensor(1.2627) feature loss: tensor(0.2209)
Local adapation with distilling: 0.0001
training loss: tensor(0.7695) feature loss: tensor(0.2207)
Local adapation with distilling: 0.0001
training loss: tensor(0.7029) feature loss: tensor(0.2198)
Local adapation with distilling: 0.0001
training loss: tensor(0.5476) feature loss: tensor(0.2139)
Local adapation with distilling: 0.0001
training loss: tensor(0.4479) feature loss: tensor(0.2232)
Local adapation with distilling: 0.0001
training loss: tensor(0.4367) feature loss: tensor(0.2230)
Local adapation with distilling: 0.0001
training loss: tensor(0.5125) feature loss: tensor(0.2232)
Local adapation with distilling: 0.0001
training loss: tensor(0.4210) feature loss: tensor(0.2200)
Local adapation with distilling: 0.0001
training loss: tensor(0.5255) feature loss: tensor(0.2191)
         GM acc on global data: 0.5515 length of data: 10000
-------------Round number:  97  -------------
selected users: [31, 43, 64, 56, 85, 2, 70, 21, 34, 50]
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([110, 16, 32, 32]) torch.Size([110])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([96, 16, 32, 32]) torch.Size([96])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([94, 16, 32, 32]) torch.Size([94])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([98, 16, 32, 32]) torch.Size([98])
K 2 torch.Size([982, 16, 32, 32]) torch.Size([982])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.0001
training loss: tensor(0.5721) feature loss: tensor(0.2478)
Local adapation with distilling: 0.0001
training loss: tensor(0.5399) feature loss: tensor(0.2818)
Local adapation with distilling: 0.0001
training loss: tensor(0.6366) feature loss: tensor(0.2259)
Local adapation with distilling: 0.0001
training loss: tensor(0.4679) feature loss: tensor(0.2162)
Local adapation with distilling: 0.0001
training loss: tensor(0.4804) feature loss: tensor(0.2423)
Local adapation with distilling: 0.0001
training loss: tensor(0.4743) feature loss: tensor(0.2359)
Local adapation with distilling: 0.0001
training loss: tensor(0.4662) feature loss: tensor(0.2214)
Local adapation with distilling: 0.0001
training loss: tensor(0.4758) feature loss: tensor(0.2194)
Local adapation with distilling: 0.0001
training loss: tensor(0.5315) feature loss: tensor(0.2793)
Local adapation with distilling: 0.0001
training loss: tensor(0.5373) feature loss: tensor(0.2214)
         GM acc on global data: 0.5614 length of data: 10000
-------------Round number:  98  -------------
selected users: [11, 48, 97, 14, 22, 36, 99, 47, 33, 81]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([101, 16, 32, 32]) torch.Size([101])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([97, 16, 32, 32]) torch.Size([97])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([102, 16, 32, 32]) torch.Size([102])
K 2 torch.Size([983, 16, 32, 32]) torch.Size([983])
random features: torch.Size([491, 16, 32, 32]) torch.Size([491])
Local adapation with distilling: 0.0001
training loss: tensor(0.4357) feature loss: tensor(0.1968)
Local adapation with distilling: 0.0001
training loss: tensor(0.4497) feature loss: tensor(0.1917)
Local adapation with distilling: 0.0001
training loss: tensor(0.4413) feature loss: tensor(0.1956)
Local adapation with distilling: 0.0001
training loss: tensor(0.4600) feature loss: tensor(0.1975)
Local adapation with distilling: 0.0001
training loss: tensor(1.6024) feature loss: tensor(0.2209)
Local adapation with distilling: 0.0001
training loss: tensor(0.4166) feature loss: tensor(0.2094)
Local adapation with distilling: 0.0001
training loss: tensor(0.4425) feature loss: tensor(0.1986)
Local adapation with distilling: 0.0001
training loss: tensor(0.5279) feature loss: tensor(0.1960)
Local adapation with distilling: 0.0001
training loss: tensor(0.4394) feature loss: tensor(0.2019)
Local adapation with distilling: 0.0001
training loss: tensor(1.6853) feature loss: tensor(0.1984)
         GM acc on global data: 0.5449 length of data: 10000
-------------Round number:  99  -------------
selected users: [14, 34, 30, 78, 16, 15, 91, 38, 10, 85]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([99, 16, 32, 32]) torch.Size([99])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([95, 16, 32, 32]) torch.Size([95])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([104, 16, 32, 32]) torch.Size([104])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([106, 16, 32, 32]) torch.Size([106])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([103, 16, 32, 32]) torch.Size([103])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([105, 16, 32, 32]) torch.Size([105])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([109, 16, 32, 32]) torch.Size([109])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([93, 16, 32, 32]) torch.Size([93])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([100, 16, 32, 32]) torch.Size([100])
K 2 torch.Size([1009, 16, 32, 32]) torch.Size([1009])
random features: torch.Size([504, 16, 32, 32]) torch.Size([504])
Local adapation with distilling: 0.0001
training loss: tensor(0.4308) feature loss: tensor(0.1964)
Local adapation with distilling: 0.0001
training loss: tensor(0.4355) feature loss: tensor(0.2002)
Local adapation with distilling: 0.0001
training loss: tensor(0.4543) feature loss: tensor(0.1986)
Local adapation with distilling: 0.0001
training loss: tensor(0.4630) feature loss: tensor(0.2001)
Local adapation with distilling: 0.0001
training loss: tensor(0.4843) feature loss: tensor(0.1954)
Local adapation with distilling: 0.0001
training loss: tensor(0.8464) feature loss: tensor(0.2024)
Local adapation with distilling: 0.0001
training loss: tensor(0.4838) feature loss: tensor(0.1998)
Local adapation with distilling: 0.0001
training loss: tensor(0.4147) feature loss: tensor(0.2022)
Local adapation with distilling: 0.0001
training loss: tensor(0.5274) feature loss: tensor(0.1996)
Local adapation with distilling: 0.0001
training loss: tensor(0.4213) feature loss: tensor(0.2035)
         GM acc on global data: 0.5473 length of data: 10000
