nohup: ignoring input
================================================================================
Summary of training process:
Dataset:                 Cifar10
Batch size:              64
Learing rate :           0.001
personal learning rate : 0.001
Number of total clients: 100
Split parameter        : 3.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 0
Feature reduction      : 64
Local training loss    : CE_KL2
Loss of beta           : 1.0
Algorithm              : FedPP
Modelname              : MOBNET
Mode                   : training
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,0.298,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.327,0.00,496
Client   1,0.00,0.321,0.00,0.00,0.00,0.358,0.00,0.00,0.00,0.321,520
Client   2,0.307,0.346,0.346,0.00,0.00,0.00,0.00,0.00,0.00,0.00,482
Client   3,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client   4,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client   5,0.00,0.00,0.327,0.00,0.308,0.365,0.00,0.00,0.00,0.00,510
Client   6,0.00,0.00,0.319,0.00,0.300,0.00,0.382,0.00,0.00,0.00,524
Client   7,0.00,0.00,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.351,476
Client   8,0.00,0.347,0.00,0.00,0.00,0.00,0.00,0.316,0.337,0.00,481
Client   9,0.286,0.00,0.00,0.00,0.00,0.00,0.389,0.00,0.00,0.325,514
Client  10,0.315,0.00,0.00,0.00,0.00,0.00,0.00,0.326,0.00,0.358,466
Client  11,0.00,0.313,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.313,534
Client  12,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  13,0.00,0.329,0.00,0.352,0.00,0.00,0.00,0.00,0.319,0.00,508
Client  14,0.00,0.00,0.00,0.359,0.315,0.00,0.00,0.00,0.325,0.00,498
Client  15,0.00,0.00,0.00,0.00,0.00,0.361,0.00,0.00,0.315,0.324,515
Client  16,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client  17,0.00,0.00,0.00,0.00,0.00,0.346,0.372,0.283,0.00,0.00,538
Client  18,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.00,0.327,0.337,496
Client  19,0.00,0.00,0.00,0.356,0.312,0.00,0.00,0.00,0.00,0.332,503
Client  20,0.309,0.351,0.00,0.00,0.00,0.00,0.00,0.00,0.340,0.00,476
Client  21,0.312,0.355,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.00,471
Client  22,0.00,0.00,0.326,0.349,0.00,0.00,0.00,0.00,0.00,0.326,513
Client  23,0.298,0.00,0.339,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  24,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client  25,0.00,0.00,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.331,504
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,0.378,0.00,0.306,0.316,529
Client  27,0.00,0.00,0.00,0.368,0.320,0.00,0.00,0.312,0.00,0.00,487
Client  28,0.00,0.00,0.00,0.00,0.00,0.360,0.00,0.00,0.315,0.325,514
Client  29,0.00,0.00,0.00,0.328,0.00,0.00,0.366,0.00,0.00,0.306,546
Client  30,0.309,0.00,0.352,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  31,0.00,0.344,0.00,0.00,0.00,0.00,0.00,0.313,0.00,0.344,486
Client  32,0.00,0.00,0.335,0.359,0.00,0.00,0.00,0.305,0.00,0.00,498
Client  33,0.302,0.00,0.00,0.368,0.00,0.00,0.00,0.00,0.331,0.00,487
Client  34,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  35,0.00,0.315,0.00,0.337,0.00,0.348,0.00,0.00,0.00,0.00,531
Client  36,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  37,0.00,0.00,0.00,0.00,0.307,0.00,0.394,0.299,0.00,0.00,508
Client  38,0.00,0.00,0.00,0.00,0.00,0.339,0.366,0.00,0.295,0.00,546
Client  39,0.00,0.00,0.322,0.00,0.00,0.356,0.00,0.00,0.00,0.322,519
Client  40,0.320,0.00,0.00,0.00,0.00,0.00,0.00,0.330,0.350,0.00,460
Client  41,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  42,0.00,0.00,0.352,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  43,0.298,0.00,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.339,493
Client  44,0.313,0.00,0.355,0.00,0.332,0.00,0.00,0.00,0.00,0.00,470
Client  45,0.00,0.331,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.00,504
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,0.385,0.293,0.00,0.322,519
Client  47,0.00,0.00,0.00,0.00,0.333,0.00,0.00,0.323,0.344,0.00,468
Client  48,0.309,0.352,0.00,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  49,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.325,0.337,495
Client  50,0.298,0.339,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  51,0.00,0.344,0.344,0.00,0.00,0.00,0.00,0.311,0.00,0.00,485
Client  52,0.286,0.00,0.325,0.00,0.00,0.00,0.389,0.00,0.00,0.00,514
Client  53,0.00,0.00,0.326,0.350,0.00,0.00,0.00,0.00,0.00,0.324,512
Client  54,0.00,0.00,0.319,0.00,0.298,0.00,0.382,0.00,0.00,0.00,523
Client  55,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  56,0.00,0.303,0.00,0.00,0.00,0.335,0.362,0.00,0.00,0.00,552
Client  57,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  58,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  59,0.00,0.322,0.00,0.00,0.00,0.357,0.00,0.00,0.00,0.320,518
Client  60,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  61,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  62,0.316,0.00,0.359,0.00,0.00,0.00,0.00,0.325,0.00,0.00,465
Client  63,0.00,0.00,0.00,0.354,0.00,0.00,0.00,0.00,0.318,0.328,506
Client  64,0.00,0.00,0.00,0.00,0.317,0.376,0.00,0.307,0.00,0.00,492
Client  65,0.295,0.00,0.00,0.00,0.00,0.371,0.00,0.00,0.00,0.333,498
Client  66,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  67,0.00,0.351,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.00,473
Client  68,0.00,0.00,0.00,0.00,0.302,0.00,0.387,0.00,0.311,0.00,517
Client  69,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.327,0.337,493
Client  70,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  71,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  72,0.00,0.00,0.324,0.00,0.00,0.361,0.00,0.00,0.314,0.00,512
Client  73,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  74,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  75,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  76,0.00,0.00,0.00,0.333,0.292,0.00,0.375,0.00,0.00,0.00,534
Client  77,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  78,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  79,0.00,0.333,0.333,0.00,0.00,0.00,0.00,0.00,0.00,0.333,498
Client  80,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  81,0.287,0.324,0.00,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  82,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  83,0.00,0.00,0.329,0.352,0.00,0.00,0.00,0.00,0.319,0.00,505
Client  84,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  85,0.00,0.00,0.00,0.00,0.311,0.369,0.00,0.00,0.321,0.00,502
Client  86,0.00,0.00,0.312,0.00,0.00,0.00,0.376,0.00,0.00,0.312,532
Client  87,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  88,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  89,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  90,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  91,0.00,0.314,0.00,0.336,0.00,0.350,0.00,0.00,0.00,0.00,529
Client  92,0.313,0.00,0.354,0.00,0.333,0.00,0.00,0.00,0.00,0.00,469
Client  93,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  94,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  95,0.00,0.331,0.00,0.00,0.00,0.369,0.00,0.301,0.00,0.00,502
Client  96,0.287,0.00,0.324,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  97,0.00,0.00,0.347,0.00,0.00,0.00,0.00,0.316,0.337,0.00,478
Client  98,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  99,0.313,0.00,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.354,469
0 [0 5 8] [0 5 8] [1 2 3 4 6 7 9]
0 training: Counter({5: 186, 8: 162, 0: 148}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000})
1 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
1 training: Counter({5: 186, 1: 167, 9: 167}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
2 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
2 training: Counter({1: 167, 2: 167, 0: 148}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
3 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
3 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
4 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
4 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
5 [2 4 5] [2 4 5] [0 1 3 6 7 8 9]
5 training: Counter({5: 186, 2: 167, 4: 157}) testing iid: Counter({5: 1000, 4: 1000, 2: 1000})
6 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
6 training: Counter({6: 200, 2: 167, 4: 157}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
7 [4 7 9] [4 7 9] [0 1 2 3 5 6 8]
7 training: Counter({9: 167, 4: 157, 7: 152}) testing iid: Counter({9: 1000, 7: 1000, 4: 1000})
8 [1 7 8] [1 7 8] [0 2 3 4 5 6 9]
8 training: Counter({1: 167, 8: 162, 7: 152}) testing iid: Counter({8: 1000, 1: 1000, 7: 1000})
9 [0 6 9] [0 6 9] [1 2 3 4 5 7 8]
9 training: Counter({6: 200, 9: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000})
10 [0 7 9] [0 7 9] [1 2 3 4 5 6 8]
10 training: Counter({9: 167, 7: 152, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 7: 1000})
11 [1 6 9] [1 6 9] [0 2 3 4 5 7 8]
11 training: Counter({6: 200, 1: 167, 9: 167}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000})
12 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
12 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
13 [1 3 8] [1 3 8] [0 2 4 5 6 7 9]
13 training: Counter({3: 179, 1: 167, 8: 162}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000})
14 [3 4 8] [3 4 8] [0 1 2 5 6 7 9]
14 training: Counter({3: 179, 8: 162, 4: 157}) testing iid: Counter({3: 1000, 8: 1000, 4: 1000})
15 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
15 training: Counter({5: 186, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
16 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
16 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
17 [5 6 7] [5 6 7] [0 1 2 3 4 8 9]
17 training: Counter({6: 200, 5: 186, 7: 152}) testing iid: Counter({6: 1000, 5: 1000, 7: 1000})
18 [1 8 9] [1 8 9] [0 2 3 4 5 6 7]
18 training: Counter({1: 167, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000})
19 [3 4 9] [3 4 9] [0 1 2 5 6 7 8]
19 training: Counter({3: 179, 9: 167, 4: 157}) testing iid: Counter({3: 1000, 9: 1000, 4: 1000})
20 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
20 training: Counter({1: 167, 8: 162, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
21 [0 1 4] [0 1 4] [2 3 5 6 7 8 9]
21 training: Counter({1: 167, 4: 157, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 4: 1000})
22 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
22 training: Counter({3: 179, 2: 167, 9: 167}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
23 [0 2 3] [0 2 3] [1 4 5 6 7 8 9]
23 training: Counter({3: 179, 2: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 2: 1000})
24 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
24 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
25 [5 7 9] [5 7 9] [0 1 2 3 4 6 8]
25 training: Counter({5: 185, 9: 167, 7: 152}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000})
26 [6 8 9] [6 8 9] [0 1 2 3 4 5 7]
26 training: Counter({6: 200, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000})
27 [3 4 7] [3 4 7] [0 1 2 5 6 8 9]
27 training: Counter({3: 179, 4: 156, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 4: 1000})
28 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
28 training: Counter({5: 185, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
29 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
29 training: Counter({6: 200, 3: 179, 9: 167}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
30 [0 2 8] [0 2 8] [1 3 4 5 6 7 9]
30 training: Counter({2: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 2: 1000})
31 [1 7 9] [1 7 9] [0 2 3 4 5 6 8]
31 training: Counter({1: 167, 9: 167, 7: 152}) testing iid: Counter({1: 1000, 9: 1000, 7: 1000})
32 [2 3 7] [2 3 7] [0 1 4 5 6 8 9]
32 training: Counter({3: 179, 2: 167, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 2: 1000})
33 [0 3 8] [0 3 8] [1 2 4 5 6 7 9]
33 training: Counter({3: 179, 8: 161, 0: 147}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000})
34 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
34 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
35 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
35 training: Counter({5: 185, 3: 179, 1: 167}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
36 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
36 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
37 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
37 training: Counter({6: 200, 4: 156, 7: 152}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
38 [5 6 8] [5 6 8] [0 1 2 3 4 7 9]
38 training: Counter({6: 200, 5: 185, 8: 161}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000})
39 [2 5 9] [2 5 9] [0 1 3 4 6 7 8]
39 training: Counter({5: 185, 2: 167, 9: 167}) testing iid: Counter({9: 1000, 5: 1000, 2: 1000})
40 [0 7 8] [0 7 8] [1 2 3 4 5 6 9]
40 training: Counter({8: 161, 7: 152, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 7: 1000})
41 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
41 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
42 [2 4 7] [2 4 7] [0 1 3 5 6 8 9]
42 training: Counter({2: 167, 4: 156, 7: 152}) testing iid: Counter({7: 1000, 4: 1000, 2: 1000})
43 [0 3 9] [0 3 9] [1 2 4 5 6 7 8]
43 training: Counter({3: 179, 9: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000})
44 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
44 training: Counter({2: 167, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
45 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
45 training: Counter({5: 185, 1: 167, 7: 152}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
46 [6 7 9] [6 7 9] [0 1 2 3 4 5 8]
46 training: Counter({6: 200, 9: 167, 7: 152}) testing iid: Counter({6: 1000, 9: 1000, 7: 1000})
47 [4 7 8] [4 7 8] [0 1 2 3 5 6 9]
47 training: Counter({8: 161, 4: 156, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 4: 1000})
48 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
48 training: Counter({1: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
49 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
49 training: Counter({2: 167, 9: 167, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
50 [0 1 3] [0 1 3] [2 4 5 6 7 8 9]
50 training: Counter({3: 179, 1: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000})
51 [1 2 7] [1 2 7] [0 3 4 5 6 8 9]
51 training: Counter({1: 167, 2: 167, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 2: 1000})
52 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
52 training: Counter({6: 200, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
53 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
53 training: Counter({3: 179, 2: 167, 9: 166}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
54 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
54 training: Counter({6: 200, 2: 167, 4: 156}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
55 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
55 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
56 [1 5 6] [1 5 6] [0 2 3 4 7 8 9]
56 training: Counter({6: 200, 5: 185, 1: 167}) testing iid: Counter({6: 1000, 1: 1000, 5: 1000})
57 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
57 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
58 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
58 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
59 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
59 training: Counter({5: 185, 1: 167, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
60 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
60 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
61 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
61 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
62 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
62 training: Counter({2: 167, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
63 [3 8 9] [3 8 9] [0 1 2 4 5 6 7]
63 training: Counter({3: 179, 9: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 9: 1000})
64 [4 5 7] [4 5 7] [0 1 2 3 6 8 9]
64 training: Counter({5: 185, 4: 156, 7: 151}) testing iid: Counter({5: 1000, 7: 1000, 4: 1000})
65 [0 5 9] [0 5 9] [1 2 3 4 6 7 8]
65 training: Counter({5: 185, 9: 166, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 5: 1000})
66 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
66 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
67 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
67 training: Counter({1: 166, 4: 156, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
68 [4 6 8] [4 6 8] [0 1 2 3 5 7 9]
68 training: Counter({6: 200, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 6: 1000, 4: 1000})
69 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
69 training: Counter({2: 166, 9: 166, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
70 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
70 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
71 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
71 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
72 [2 5 8] [2 5 8] [0 1 3 4 6 7 9]
72 training: Counter({5: 185, 2: 166, 8: 161}) testing iid: Counter({8: 1000, 5: 1000, 2: 1000})
73 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
73 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
74 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
74 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
75 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
75 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
76 [3 4 6] [3 4 6] [0 1 2 5 7 8 9]
76 training: Counter({6: 200, 3: 178, 4: 156}) testing iid: Counter({3: 1000, 6: 1000, 4: 1000})
77 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
77 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
78 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
78 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
79 [1 2 9] [1 2 9] [0 3 4 5 6 7 8]
79 training: Counter({1: 166, 2: 166, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 2: 1000})
80 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
80 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
81 [0 1 6] [0 1 6] [2 3 4 5 7 8 9]
81 training: Counter({6: 200, 1: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000})
82 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
82 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
83 [2 3 8] [2 3 8] [0 1 4 5 6 7 9]
83 training: Counter({3: 178, 2: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 2: 1000})
84 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
84 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
85 [4 5 8] [4 5 8] [0 1 2 3 6 7 9]
85 training: Counter({5: 185, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 5: 1000, 4: 1000})
86 [2 6 9] [2 6 9] [0 1 3 4 5 7 8]
86 training: Counter({6: 200, 2: 166, 9: 166}) testing iid: Counter({6: 1000, 9: 1000, 2: 1000})
87 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
87 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
88 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
88 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
89 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
89 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
90 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
90 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
91 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
91 training: Counter({5: 185, 3: 178, 1: 166}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
92 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
92 training: Counter({2: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
93 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
93 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
94 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
94 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
95 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
95 training: Counter({5: 185, 1: 166, 7: 151}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
96 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
96 training: Counter({6: 200, 2: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
97 [2 7 8] [2 7 8] [0 1 3 4 5 6 9]
97 training: Counter({2: 166, 8: 161, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 2: 1000})
98 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
98 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
99 [0 4 9] [0 4 9] [1 2 3 5 6 7 8]
99 training: Counter({9: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 4: 1000})
Num_samples of Training set per client: [496, 520, 482, 531, 491, 510, 524, 476, 481, 514, 466, 534, 481, 508, 498, 515, 531, 538, 496, 503, 476, 471, 513, 493, 491, 504, 529, 487, 514, 546, 475, 486, 498, 487, 475, 531, 508, 508, 546, 519, 460, 475, 475, 493, 470, 504, 519, 468, 475, 495, 493, 485, 514, 512, 523, 483, 552, 507, 508, 518, 481, 507, 465, 506, 492, 498, 544, 473, 517, 493, 483, 507, 512, 524, 483, 483, 534, 464, 524, 498, 481, 513, 464, 505, 481, 502, 532, 476, 483, 544, 476, 529, 469, 524, 507, 502, 513, 478, 483, 469]
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:01<02:35,  1.57s/it]  2%|▏         | 2/100 [00:02<02:09,  1.32s/it]  3%|▎         | 3/100 [00:03<01:50,  1.13s/it]  4%|▍         | 4/100 [00:07<03:16,  2.04s/it]  5%|▌         | 5/100 [00:07<02:35,  1.64s/it]  6%|▌         | 6/100 [00:08<02:07,  1.36s/it]  7%|▋         | 7/100 [00:09<01:48,  1.16s/it]  8%|▊         | 8/100 [00:09<01:34,  1.03s/it]  9%|▉         | 9/100 [00:10<01:25,  1.07it/s] 10%|█         | 10/100 [00:11<01:19,  1.14it/s] 11%|█         | 11/100 [00:12<01:14,  1.20it/s] 12%|█▏        | 12/100 [00:12<01:10,  1.24it/s] 13%|█▎        | 13/100 [00:13<01:07,  1.29it/s] 14%|█▍        | 14/100 [00:14<01:05,  1.31it/s] 15%|█▌        | 15/100 [00:15<01:03,  1.33it/s] 16%|█▌        | 16/100 [00:15<01:02,  1.34it/s] 17%|█▋        | 17/100 [00:16<01:00,  1.36it/s] 18%|█▊        | 18/100 [00:17<01:00,  1.36it/s] 19%|█▉        | 19/100 [00:17<00:59,  1.37it/s] 20%|██        | 20/100 [00:18<00:58,  1.37it/s] 21%|██        | 21/100 [00:19<00:57,  1.38it/s] 22%|██▏       | 22/100 [00:20<00:56,  1.39it/s] 23%|██▎       | 23/100 [00:20<00:55,  1.39it/s] 24%|██▍       | 24/100 [00:21<00:54,  1.40it/s] 25%|██▌       | 25/100 [00:22<00:53,  1.41it/s] 26%|██▌       | 26/100 [00:22<00:51,  1.42it/s] 27%|██▋       | 27/100 [00:23<00:51,  1.42it/s] 28%|██▊       | 28/100 [00:24<00:50,  1.42it/s] 29%|██▉       | 29/100 [00:25<00:49,  1.42it/s] 30%|███       | 30/100 [00:25<00:48,  1.43it/s] 31%|███       | 31/100 [00:26<00:48,  1.43it/s] 32%|███▏      | 32/100 [00:27<00:47,  1.43it/s] 33%|███▎      | 33/100 [00:27<00:47,  1.42it/s] 34%|███▍      | 34/100 [00:28<00:46,  1.42it/s] 35%|███▌      | 35/100 [00:29<00:46,  1.41it/s] 36%|███▌      | 36/100 [00:29<00:45,  1.42it/s] 37%|███▋      | 37/100 [00:30<00:44,  1.41it/s] 38%|███▊      | 38/100 [00:31<00:43,  1.42it/s] 39%|███▉      | 39/100 [00:35<01:46,  1.75s/it] 40%|████      | 40/100 [00:36<01:25,  1.43s/it] 41%|████      | 41/100 [00:36<01:11,  1.22s/it] 42%|████▏     | 42/100 [00:37<01:01,  1.07s/it] 43%|████▎     | 43/100 [00:38<00:54,  1.05it/s] 44%|████▍     | 44/100 [00:39<00:49,  1.14it/s] 45%|████▌     | 45/100 [00:39<00:45,  1.22it/s] 46%|████▌     | 46/100 [00:40<00:42,  1.27it/s] 47%|████▋     | 47/100 [00:41<00:40,  1.30it/s] 48%|████▊     | 48/100 [00:41<00:38,  1.33it/s] 49%|████▉     | 49/100 [00:42<00:37,  1.35it/s] 50%|█████     | 50/100 [00:43<00:36,  1.38it/s] 51%|█████     | 51/100 [00:44<00:35,  1.39it/s] 52%|█████▏    | 52/100 [00:44<00:34,  1.40it/s] 53%|█████▎    | 53/100 [00:45<00:33,  1.40it/s] 54%|█████▍    | 54/100 [00:46<00:32,  1.41it/s] 55%|█████▌    | 55/100 [00:46<00:32,  1.40it/s] 56%|█████▌    | 56/100 [00:47<00:31,  1.40it/s] 57%|█████▋    | 57/100 [00:48<00:30,  1.40it/s] 58%|█████▊    | 58/100 [00:49<00:29,  1.40it/s] 59%|█████▉    | 59/100 [00:49<00:29,  1.40it/s] 60%|██████    | 60/100 [00:50<00:28,  1.39it/s] 61%|██████    | 61/100 [00:51<00:28,  1.39it/s] 62%|██████▏   | 62/100 [00:51<00:27,  1.39it/s] 63%|██████▎   | 63/100 [00:52<00:26,  1.39it/s] 64%|██████▍   | 64/100 [00:53<00:26,  1.37it/s] 65%|██████▌   | 65/100 [00:54<00:25,  1.38it/s] 66%|██████▌   | 66/100 [00:54<00:24,  1.40it/s] 67%|██████▋   | 67/100 [00:55<00:23,  1.39it/s] 68%|██████▊   | 68/100 [00:56<00:22,  1.40it/s] 69%|██████▉   | 69/100 [00:56<00:22,  1.40it/s] 70%|███████   | 70/100 [00:57<00:21,  1.39it/s] 71%|███████   | 71/100 [00:58<00:20,  1.39it/s] 72%|███████▏  | 72/100 [00:59<00:20,  1.38it/s] 73%|███████▎  | 73/100 [00:59<00:19,  1.38it/s] 74%|███████▍  | 74/100 [01:00<00:18,  1.37it/s] 75%|███████▌  | 75/100 [01:01<00:17,  1.39it/s] 76%|███████▌  | 76/100 [01:05<00:42,  1.78s/it] 77%|███████▋  | 77/100 [01:06<00:33,  1.46s/it] 78%|███████▊  | 78/100 [01:06<00:27,  1.24s/it] 79%|███████▉  | 79/100 [01:07<00:22,  1.08s/it] 80%|████████  | 80/100 [01:08<00:19,  1.03it/s] 81%|████████  | 81/100 [01:09<00:17,  1.11it/s] 82%|████████▏ | 82/100 [01:09<00:15,  1.17it/s] 83%|████████▎ | 83/100 [01:10<00:13,  1.23it/s] 84%|████████▍ | 84/100 [01:11<00:12,  1.27it/s] 85%|████████▌ | 85/100 [01:12<00:11,  1.29it/s] 86%|████████▌ | 86/100 [01:12<00:10,  1.31it/s] 87%|████████▋ | 87/100 [01:13<00:09,  1.31it/s] 88%|████████▊ | 88/100 [01:14<00:08,  1.35it/s] 89%|████████▉ | 89/100 [01:14<00:08,  1.37it/s] 90%|█████████ | 90/100 [01:15<00:07,  1.36it/s] 91%|█████████ | 91/100 [01:16<00:06,  1.36it/s] 92%|█████████▏| 92/100 [01:17<00:05,  1.36it/s] 93%|█████████▎| 93/100 [01:17<00:05,  1.36it/s] 94%|█████████▍| 94/100 [01:18<00:04,  1.37it/s] 95%|█████████▌| 95/100 [01:19<00:03,  1.36it/s] 96%|█████████▌| 96/100 [01:20<00:02,  1.36it/s] 97%|█████████▋| 97/100 [01:20<00:02,  1.36it/s] 98%|█████████▊| 98/100 [01:21<00:01,  1.33it/s] 99%|█████████▉| 99/100 [01:22<00:00,  1.33it/s]100%|██████████| 100/100 [01:23<00:00,  1.33it/s]100%|██████████| 100/100 [01:23<00:00,  1.20it/s]
Number of users per round / total users: 10  /  100
Finished creating FedAvg server.
=== FedPP ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.001
training loss: tensor(2.3555) feature loss: tensor(0.4687)
Local adapation with distilling: 0.001
training loss: tensor(2.4408) feature loss: tensor(0.5126)
Local adapation with distilling: 0.001
training loss: tensor(2.4359) feature loss: tensor(0.4419)
Local adapation with distilling: 0.001
training loss: tensor(2.4774) feature loss: tensor(0.5053)
Local adapation with distilling: 0.001
training loss: tensor(2.4244) feature loss: tensor(0.5126)
Local adapation with distilling: 0.001
training loss: tensor(2.4614) feature loss: tensor(0.4945)
Local adapation with distilling: 0.001
training loss: tensor(2.5209) feature loss: tensor(0.5371)
Local adapation with distilling: 0.001
training loss: tensor(2.3497) feature loss: tensor(0.4631)
Local adapation with distilling: 0.001
training loss: tensor(2.7147) feature loss: tensor(0.5122)
Local adapation with distilling: 0.001
training loss: tensor(2.4410) feature loss: tensor(0.5018)
         GM acc on global data: 0.1232 length of data: 10000
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 494
Local adapation with distilling: 0.000982
training loss: tensor(1.9346) feature loss: tensor(0.6253)
Local adapation with distilling: 0.000982
training loss: tensor(1.9745) feature loss: tensor(0.6372)
Local adapation with distilling: 0.000982
training loss: tensor(1.8709) feature loss: tensor(0.6277)
Local adapation with distilling: 0.000982
training loss: tensor(1.9687) feature loss: tensor(0.6032)
Local adapation with distilling: 0.000982
training loss: tensor(1.8676) feature loss: tensor(0.5599)
Local adapation with distilling: 0.000982
training loss: tensor(1.8895) feature loss: tensor(0.5635)
Local adapation with distilling: 0.000982
training loss: tensor(1.7890) feature loss: tensor(0.6131)
Local adapation with distilling: 0.000982
training loss: tensor(2.0456) feature loss: tensor(0.6778)
Local adapation with distilling: 0.000982
training loss: tensor(1.8936) feature loss: tensor(0.5861)
Local adapation with distilling: 0.000982
training loss: tensor(1.8690) feature loss: tensor(0.6451)
         GM acc on global data: 0.2204 length of data: 10000
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 500
Local adapation with distilling: 0.000964
training loss: tensor(1.4365) feature loss: tensor(0.4662)
Local adapation with distilling: 0.000964
training loss: tensor(1.5063) feature loss: tensor(0.4897)
Local adapation with distilling: 0.000964
training loss: tensor(1.4502) feature loss: tensor(0.4826)
Local adapation with distilling: 0.000964
training loss: tensor(1.5999) feature loss: tensor(0.4748)
Local adapation with distilling: 0.000964
training loss: tensor(1.5527) feature loss: tensor(0.4969)
Local adapation with distilling: 0.000964
training loss: tensor(1.4648) feature loss: tensor(0.4563)
Local adapation with distilling: 0.000964
training loss: tensor(1.4621) feature loss: tensor(0.4892)
Local adapation with distilling: 0.000964
training loss: tensor(1.6439) feature loss: tensor(0.5210)
Local adapation with distilling: 0.000964
training loss: tensor(1.5524) feature loss: tensor(0.4878)
Local adapation with distilling: 0.000964
training loss: tensor(1.4946) feature loss: tensor(0.5459)
         GM acc on global data: 0.1762 length of data: 10000
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 497
Local adapation with distilling: 0.000946
training loss: tensor(1.3630) feature loss: tensor(0.4986)
Local adapation with distilling: 0.000946
training loss: tensor(1.4881) feature loss: tensor(0.5351)
Local adapation with distilling: 0.000946
training loss: tensor(1.4373) feature loss: tensor(0.5508)
Local adapation with distilling: 0.000946
training loss: tensor(1.4649) feature loss: tensor(0.6286)
Local adapation with distilling: 0.000946
training loss: tensor(1.4933) feature loss: tensor(0.4860)
Local adapation with distilling: 0.000946
training loss: tensor(1.2848) feature loss: tensor(0.4675)
Local adapation with distilling: 0.000946
training loss: tensor(1.4066) feature loss: tensor(0.5522)
Local adapation with distilling: 0.000946
training loss: tensor(1.4553) feature loss: tensor(0.5523)
Local adapation with distilling: 0.000946
training loss: tensor(1.4664) feature loss: tensor(0.5711)
Local adapation with distilling: 0.000946
training loss: tensor(1.4445) feature loss: tensor(0.5309)
         GM acc on global data: 0.2408 length of data: 10000
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 493
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4606) feature loss: tensor(0.5832)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3827) feature loss: tensor(0.5888)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4228) feature loss: tensor(0.5350)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3700) feature loss: tensor(0.6164)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1901) feature loss: tensor(0.5631)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2364) feature loss: tensor(0.5143)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.1817) feature loss: tensor(0.5359)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2761) feature loss: tensor(0.6050)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3958) feature loss: tensor(0.5606)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.2808) feature loss: tensor(0.5374)
         GM acc on global data: 0.285 length of data: 10000
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 501
Local adapation with distilling: 0.00091
training loss: tensor(1.2228) feature loss: tensor(0.5923)
Local adapation with distilling: 0.00091
training loss: tensor(1.3305) feature loss: tensor(0.6396)
Local adapation with distilling: 0.00091
training loss: tensor(1.2946) feature loss: tensor(0.6283)
Local adapation with distilling: 0.00091
training loss: tensor(1.5069) feature loss: tensor(0.5835)
Local adapation with distilling: 0.00091
training loss: tensor(1.2879) feature loss: tensor(0.5459)
Local adapation with distilling: 0.00091
training loss: tensor(1.2753) feature loss: tensor(0.6081)
Local adapation with distilling: 0.00091
training loss: tensor(1.3514) feature loss: tensor(0.5932)
Local adapation with distilling: 0.00091
training loss: tensor(1.3949) feature loss: tensor(0.5571)
Local adapation with distilling: 0.00091
training loss: tensor(1.3349) feature loss: tensor(0.6747)
Local adapation with distilling: 0.00091
training loss: tensor(1.3520) feature loss: tensor(0.6082)
         GM acc on global data: 0.3629 length of data: 10000
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 491
Local adapation with distilling: 0.000892
training loss: tensor(1.0949) feature loss: tensor(0.5571)
Local adapation with distilling: 0.000892
training loss: tensor(1.1185) feature loss: tensor(0.5094)
Local adapation with distilling: 0.000892
training loss: tensor(1.1230) feature loss: tensor(0.5058)
Local adapation with distilling: 0.000892
training loss: tensor(1.0887) feature loss: tensor(0.4896)
Local adapation with distilling: 0.000892
training loss: tensor(1.1357) feature loss: tensor(0.5098)
Local adapation with distilling: 0.000892
training loss: tensor(1.1167) feature loss: tensor(0.5456)
Local adapation with distilling: 0.000892
training loss: tensor(1.2124) feature loss: tensor(0.5389)
Local adapation with distilling: 0.000892
training loss: tensor(1.0991) feature loss: tensor(0.5196)
Local adapation with distilling: 0.000892
training loss: tensor(1.1318) feature loss: tensor(0.4539)
Local adapation with distilling: 0.000892
training loss: tensor(1.3826) feature loss: tensor(0.5506)
         GM acc on global data: 0.4053 length of data: 10000
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 512
Local adapation with distilling: 0.000874
training loss: tensor(1.2186) feature loss: tensor(0.5328)
Local adapation with distilling: 0.000874
training loss: tensor(1.0565) feature loss: tensor(0.4688)
Local adapation with distilling: 0.000874
training loss: tensor(1.0635) feature loss: tensor(0.5207)
Local adapation with distilling: 0.000874
training loss: tensor(1.1366) feature loss: tensor(0.5307)
Local adapation with distilling: 0.000874
training loss: tensor(1.0960) feature loss: tensor(0.5350)
Local adapation with distilling: 0.000874
training loss: tensor(1.1673) feature loss: tensor(0.4936)
Local adapation with distilling: 0.000874
training loss: tensor(1.0999) feature loss: tensor(0.5300)
Local adapation with distilling: 0.000874
training loss: tensor(1.0674) feature loss: tensor(0.4660)
Local adapation with distilling: 0.000874
training loss: tensor(1.0131) feature loss: tensor(0.5048)
Local adapation with distilling: 0.000874
training loss: tensor(1.3722) feature loss: tensor(0.5105)
         GM acc on global data: 0.3914 length of data: 10000
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 496
Local adapation with distilling: 0.000856
training loss: tensor(1.0313) feature loss: tensor(0.4974)
Local adapation with distilling: 0.000856
training loss: tensor(1.0309) feature loss: tensor(0.4948)
Local adapation with distilling: 0.000856
training loss: tensor(1.1909) feature loss: tensor(0.5111)
Local adapation with distilling: 0.000856
training loss: tensor(1.0661) feature loss: tensor(0.5013)
Local adapation with distilling: 0.000856
training loss: tensor(1.1386) feature loss: tensor(0.5145)
Local adapation with distilling: 0.000856
training loss: tensor(1.0305) feature loss: tensor(0.4818)
Local adapation with distilling: 0.000856
training loss: tensor(0.9423) feature loss: tensor(0.4952)
Local adapation with distilling: 0.000856
training loss: tensor(1.0767) feature loss: tensor(0.5211)
Local adapation with distilling: 0.000856
training loss: tensor(1.1340) feature loss: tensor(0.4822)
Local adapation with distilling: 0.000856
training loss: tensor(1.0915) feature loss: tensor(0.4961)
         GM acc on global data: 0.4136 length of data: 10000
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 497
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0164) feature loss: tensor(0.4326)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0647) feature loss: tensor(0.4158)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9573) feature loss: tensor(0.4476)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9749) feature loss: tensor(0.4460)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0582) feature loss: tensor(0.4551)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0528) feature loss: tensor(0.4639)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9141) feature loss: tensor(0.4303)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1113) feature loss: tensor(0.4346)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0249) feature loss: tensor(0.4648)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9527) feature loss: tensor(0.4974)
         GM acc on global data: 0.4365 length of data: 10000
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 506
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9280) feature loss: tensor(0.4391)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8771) feature loss: tensor(0.4721)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9049) feature loss: tensor(0.4285)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9242) feature loss: tensor(0.4238)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8728) feature loss: tensor(0.4300)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8941) feature loss: tensor(0.5127)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.1452) feature loss: tensor(0.4246)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0822) feature loss: tensor(0.4331)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8599) feature loss: tensor(0.4676)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.8575) feature loss: tensor(0.4652)
         GM acc on global data: 0.4499 length of data: 10000
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8979) feature loss: tensor(0.4653)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8717) feature loss: tensor(0.4664)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0681) feature loss: tensor(0.4592)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8320) feature loss: tensor(0.3928)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9727) feature loss: tensor(0.3985)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9049) feature loss: tensor(0.3805)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9337) feature loss: tensor(0.4630)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.8081) feature loss: tensor(0.4249)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9107) feature loss: tensor(0.4251)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9675) feature loss: tensor(0.4247)
         GM acc on global data: 0.4476 length of data: 10000
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8718) feature loss: tensor(0.4406)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9041) feature loss: tensor(0.4309)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9363) feature loss: tensor(0.4179)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8059) feature loss: tensor(0.4388)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.7756) feature loss: tensor(0.4167)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.1917) feature loss: tensor(0.4162)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8725) feature loss: tensor(0.4247)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8827) feature loss: tensor(0.4020)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8992) feature loss: tensor(0.4319)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9461) feature loss: tensor(0.4074)
         GM acc on global data: 0.477 length of data: 10000
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 489
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8106) feature loss: tensor(0.3725)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8368) feature loss: tensor(0.3813)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7788) feature loss: tensor(0.3737)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7356) feature loss: tensor(0.3669)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7871) feature loss: tensor(0.3727)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8608) feature loss: tensor(0.3891)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7959) feature loss: tensor(0.3897)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.0627) feature loss: tensor(0.3816)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7915) feature loss: tensor(0.3863)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8683) feature loss: tensor(0.3649)
         GM acc on global data: 0.4414 length of data: 10000
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 489
Local adapation with distilling: 0.000748
training loss: tensor(0.8809) feature loss: tensor(0.4420)
Local adapation with distilling: 0.000748
training loss: tensor(1.0691) feature loss: tensor(0.4885)
Local adapation with distilling: 0.000748
training loss: tensor(1.1064) feature loss: tensor(0.4995)
Local adapation with distilling: 0.000748
training loss: tensor(0.8729) feature loss: tensor(0.4569)
Local adapation with distilling: 0.000748
training loss: tensor(1.0425) feature loss: tensor(0.5368)
Local adapation with distilling: 0.000748
training loss: tensor(1.0281) feature loss: tensor(0.5008)
Local adapation with distilling: 0.000748
training loss: tensor(0.9697) feature loss: tensor(0.5179)
Local adapation with distilling: 0.000748
training loss: tensor(0.9697) feature loss: tensor(0.4567)
Local adapation with distilling: 0.000748
training loss: tensor(1.0672) feature loss: tensor(0.4788)
Local adapation with distilling: 0.000748
training loss: tensor(0.9619) feature loss: tensor(0.4678)
         GM acc on global data: 0.4504 length of data: 10000
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 504
Local adapation with distilling: 0.00073
training loss: tensor(0.8273) feature loss: tensor(0.3970)
Local adapation with distilling: 0.00073
training loss: tensor(0.9083) feature loss: tensor(0.4322)
Local adapation with distilling: 0.00073
training loss: tensor(0.9412) feature loss: tensor(0.4615)
Local adapation with distilling: 0.00073
training loss: tensor(0.9669) feature loss: tensor(0.4720)
Local adapation with distilling: 0.00073
training loss: tensor(0.8838) feature loss: tensor(0.4148)
Local adapation with distilling: 0.00073
training loss: tensor(0.8579) feature loss: tensor(0.4085)
Local adapation with distilling: 0.00073
training loss: tensor(0.9514) feature loss: tensor(0.4456)
Local adapation with distilling: 0.00073
training loss: tensor(0.8391) feature loss: tensor(0.4847)
Local adapation with distilling: 0.00073
training loss: tensor(1.0953) feature loss: tensor(0.4419)
Local adapation with distilling: 0.00073
training loss: tensor(1.1063) feature loss: tensor(0.4283)
         GM acc on global data: 0.4887 length of data: 10000
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 492
Local adapation with distilling: 0.000712
training loss: tensor(0.9052) feature loss: tensor(0.4246)
Local adapation with distilling: 0.000712
training loss: tensor(0.8828) feature loss: tensor(0.4532)
Local adapation with distilling: 0.000712
training loss: tensor(0.8223) feature loss: tensor(0.4485)
Local adapation with distilling: 0.000712
training loss: tensor(0.8325) feature loss: tensor(0.3598)
Local adapation with distilling: 0.000712
training loss: tensor(0.8209) feature loss: tensor(0.3594)
Local adapation with distilling: 0.000712
training loss: tensor(0.7856) feature loss: tensor(0.4077)
Local adapation with distilling: 0.000712
training loss: tensor(0.7899) feature loss: tensor(0.3470)
Local adapation with distilling: 0.000712
training loss: tensor(0.8726) feature loss: tensor(0.3736)
Local adapation with distilling: 0.000712
training loss: tensor(0.8977) feature loss: tensor(0.3590)
Local adapation with distilling: 0.000712
training loss: tensor(0.9932) feature loss: tensor(0.3574)
         GM acc on global data: 0.5037 length of data: 10000
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 492
Local adapation with distilling: 0.000694
training loss: tensor(0.7051) feature loss: tensor(0.3692)
Local adapation with distilling: 0.000694
training loss: tensor(0.8594) feature loss: tensor(0.3110)
Local adapation with distilling: 0.000694
training loss: tensor(0.9304) feature loss: tensor(0.3381)
Local adapation with distilling: 0.000694
training loss: tensor(0.6751) feature loss: tensor(0.3316)
Local adapation with distilling: 0.000694
training loss: tensor(0.7352) feature loss: tensor(0.3564)
Local adapation with distilling: 0.000694
training loss: tensor(0.8084) feature loss: tensor(0.3291)
Local adapation with distilling: 0.000694
training loss: tensor(0.7916) feature loss: tensor(0.4232)
Local adapation with distilling: 0.000694
training loss: tensor(0.7586) feature loss: tensor(0.3341)
Local adapation with distilling: 0.000694
training loss: tensor(0.6635) feature loss: tensor(0.3445)
Local adapation with distilling: 0.000694
training loss: tensor(0.7410) feature loss: tensor(0.3364)
         GM acc on global data: 0.5105 length of data: 10000
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 495
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.6870) feature loss: tensor(0.3328)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.6525) feature loss: tensor(0.3123)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7528) feature loss: tensor(0.3502)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8563) feature loss: tensor(0.3424)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7374) feature loss: tensor(0.3212)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8944) feature loss: tensor(0.3141)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7282) feature loss: tensor(0.3191)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8959) feature loss: tensor(0.3265)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7040) feature loss: tensor(0.3110)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7824) feature loss: tensor(0.3207)
         GM acc on global data: 0.4963 length of data: 10000
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 505
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7463) feature loss: tensor(0.3430)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.6944) feature loss: tensor(0.3456)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9150) feature loss: tensor(0.3551)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.0839) feature loss: tensor(0.3387)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8318) feature loss: tensor(0.3745)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7396) feature loss: tensor(0.3636)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9145) feature loss: tensor(0.3475)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7695) feature loss: tensor(0.3829)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7291) feature loss: tensor(0.3457)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.7502) feature loss: tensor(0.3473)
         GM acc on global data: 0.5018 length of data: 10000
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 489
Local adapation with distilling: 0.00064
training loss: tensor(0.7823) feature loss: tensor(0.3841)
Local adapation with distilling: 0.00064
training loss: tensor(0.7620) feature loss: tensor(0.3482)
Local adapation with distilling: 0.00064
training loss: tensor(0.7271) feature loss: tensor(0.3868)
Local adapation with distilling: 0.00064
training loss: tensor(0.6678) feature loss: tensor(0.3184)
Local adapation with distilling: 0.00064
training loss: tensor(0.7744) feature loss: tensor(0.3857)
Local adapation with distilling: 0.00064
training loss: tensor(0.7599) feature loss: tensor(0.3361)
Local adapation with distilling: 0.00064
training loss: tensor(0.7289) feature loss: tensor(0.3680)
Local adapation with distilling: 0.00064
training loss: tensor(0.6873) feature loss: tensor(0.3570)
Local adapation with distilling: 0.00064
training loss: tensor(0.6794) feature loss: tensor(0.3508)
Local adapation with distilling: 0.00064
training loss: tensor(0.6928) feature loss: tensor(0.3407)
         GM acc on global data: 0.481 length of data: 10000
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 494
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7910) feature loss: tensor(0.3870)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.8032) feature loss: tensor(0.3687)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7192) feature loss: tensor(0.3479)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8811) feature loss: tensor(0.3798)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8761) feature loss: tensor(0.3765)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8978) feature loss: tensor(0.4306)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8426) feature loss: tensor(0.3463)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2095) feature loss: tensor(0.4172)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.7947) feature loss: tensor(0.3897)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9007) feature loss: tensor(0.3588)
         GM acc on global data: 0.5278 length of data: 10000
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 479
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6424) feature loss: tensor(0.3794)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7139) feature loss: tensor(0.3753)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7560) feature loss: tensor(0.3716)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8906) feature loss: tensor(0.3659)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6984) feature loss: tensor(0.2964)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6774) feature loss: tensor(0.3679)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7897) feature loss: tensor(0.3051)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6667) feature loss: tensor(0.3142)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6946) feature loss: tensor(0.3340)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6293) feature loss: tensor(0.3359)
         GM acc on global data: 0.5301 length of data: 10000
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 494
Local adapation with distilling: 0.000586
training loss: tensor(0.7210) feature loss: tensor(0.3126)
Local adapation with distilling: 0.000586
training loss: tensor(0.7415) feature loss: tensor(0.3359)
Local adapation with distilling: 0.000586
training loss: tensor(0.6768) feature loss: tensor(0.3381)
Local adapation with distilling: 0.000586
training loss: tensor(0.7368) feature loss: tensor(0.3581)
Local adapation with distilling: 0.000586
training loss: tensor(0.7295) feature loss: tensor(0.3158)
Local adapation with distilling: 0.000586
training loss: tensor(0.6727) feature loss: tensor(0.3064)
Local adapation with distilling: 0.000586
training loss: tensor(0.8890) feature loss: tensor(0.3584)
Local adapation with distilling: 0.000586
training loss: tensor(0.8128) feature loss: tensor(0.3386)
Local adapation with distilling: 0.000586
training loss: tensor(0.7679) feature loss: tensor(0.3474)
Local adapation with distilling: 0.000586
training loss: tensor(0.7659) feature loss: tensor(0.3321)
         GM acc on global data: 0.5271 length of data: 10000
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 497
Local adapation with distilling: 0.000568
training loss: tensor(0.6090) feature loss: tensor(0.3357)
Local adapation with distilling: 0.000568
training loss: tensor(0.9839) feature loss: tensor(0.3198)
Local adapation with distilling: 0.000568
training loss: tensor(0.6169) feature loss: tensor(0.3423)
Local adapation with distilling: 0.000568
training loss: tensor(0.7035) feature loss: tensor(0.3415)
Local adapation with distilling: 0.000568
training loss: tensor(0.7709) feature loss: tensor(0.3311)
Local adapation with distilling: 0.000568
training loss: tensor(0.6327) feature loss: tensor(0.3396)
Local adapation with distilling: 0.000568
training loss: tensor(0.6718) feature loss: tensor(0.3188)
Local adapation with distilling: 0.000568
training loss: tensor(0.7409) feature loss: tensor(0.3277)
Local adapation with distilling: 0.000568
training loss: tensor(0.6669) feature loss: tensor(0.3643)
Local adapation with distilling: 0.000568
training loss: tensor(0.8540) feature loss: tensor(0.3457)
         GM acc on global data: 0.5396 length of data: 10000
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 497
Local adapation with distilling: 0.00055
training loss: tensor(0.6505) feature loss: tensor(0.2874)
Local adapation with distilling: 0.00055
training loss: tensor(0.6239) feature loss: tensor(0.3191)
Local adapation with distilling: 0.00055
training loss: tensor(0.6560) feature loss: tensor(0.3123)
Local adapation with distilling: 0.00055
training loss: tensor(0.7612) feature loss: tensor(0.3045)
Local adapation with distilling: 0.00055
training loss: tensor(0.6151) feature loss: tensor(0.2893)
Local adapation with distilling: 0.00055
training loss: tensor(0.6917) feature loss: tensor(0.2836)
Local adapation with distilling: 0.00055
training loss: tensor(0.6497) feature loss: tensor(0.3148)
Local adapation with distilling: 0.00055
training loss: tensor(0.6831) feature loss: tensor(0.3532)
Local adapation with distilling: 0.00055
training loss: tensor(0.6861) feature loss: tensor(0.2996)
Local adapation with distilling: 0.00055
training loss: tensor(0.6448) feature loss: tensor(0.2943)
         GM acc on global data: 0.5425 length of data: 10000
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 489
Local adapation with distilling: 0.000532
training loss: tensor(0.8443) feature loss: tensor(0.3187)
Local adapation with distilling: 0.000532
training loss: tensor(0.7230) feature loss: tensor(0.3165)
Local adapation with distilling: 0.000532
training loss: tensor(0.7603) feature loss: tensor(0.3260)
Local adapation with distilling: 0.000532
training loss: tensor(0.7085) feature loss: tensor(0.3242)
Local adapation with distilling: 0.000532
training loss: tensor(0.8945) feature loss: tensor(0.3351)
Local adapation with distilling: 0.000532
training loss: tensor(0.8957) feature loss: tensor(0.3571)
Local adapation with distilling: 0.000532
training loss: tensor(0.7352) feature loss: tensor(0.3306)
Local adapation with distilling: 0.000532
training loss: tensor(0.8964) feature loss: tensor(0.3236)
Local adapation with distilling: 0.000532
training loss: tensor(0.6590) feature loss: tensor(0.3383)
Local adapation with distilling: 0.000532
training loss: tensor(0.7736) feature loss: tensor(0.3387)
         GM acc on global data: 0.5581 length of data: 10000
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 495
Local adapation with distilling: 0.000514
training loss: tensor(0.6091) feature loss: tensor(0.2564)
Local adapation with distilling: 0.000514
training loss: tensor(0.6099) feature loss: tensor(0.2534)
Local adapation with distilling: 0.000514
training loss: tensor(0.5950) feature loss: tensor(0.2940)
Local adapation with distilling: 0.000514
training loss: tensor(0.7186) feature loss: tensor(0.3333)
Local adapation with distilling: 0.000514
training loss: tensor(0.6176) feature loss: tensor(0.2713)
Local adapation with distilling: 0.000514
training loss: tensor(0.6066) feature loss: tensor(0.2915)
Local adapation with distilling: 0.000514
training loss: tensor(0.7087) feature loss: tensor(0.2512)
Local adapation with distilling: 0.000514
training loss: tensor(0.5460) feature loss: tensor(0.2778)
Local adapation with distilling: 0.000514
training loss: tensor(1.2578) feature loss: tensor(0.2689)
Local adapation with distilling: 0.000514
training loss: tensor(0.6721) feature loss: tensor(0.3459)
         GM acc on global data: 0.5523 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 495
Local adapation with distilling: 0.000496
training loss: tensor(0.6914) feature loss: tensor(0.3066)
Local adapation with distilling: 0.000496
training loss: tensor(0.5366) feature loss: tensor(0.2804)
Local adapation with distilling: 0.000496
training loss: tensor(0.7083) feature loss: tensor(0.3761)
Local adapation with distilling: 0.000496
training loss: tensor(0.6530) feature loss: tensor(0.2969)
Local adapation with distilling: 0.000496
training loss: tensor(0.6630) feature loss: tensor(0.2873)
Local adapation with distilling: 0.000496
training loss: tensor(0.8808) feature loss: tensor(0.2750)
Local adapation with distilling: 0.000496
training loss: tensor(0.5961) feature loss: tensor(0.2846)
Local adapation with distilling: 0.000496
training loss: tensor(0.5800) feature loss: tensor(0.2908)
Local adapation with distilling: 0.000496
training loss: tensor(0.9394) feature loss: tensor(0.3072)
Local adapation with distilling: 0.000496
training loss: tensor(0.6171) feature loss: tensor(0.2998)
         GM acc on global data: 0.56 length of data: 10000
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7015) feature loss: tensor(0.2798)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7287) feature loss: tensor(0.3076)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.8018) feature loss: tensor(0.3035)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.8139) feature loss: tensor(0.3253)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6479) feature loss: tensor(0.2825)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6332) feature loss: tensor(0.3106)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7051) feature loss: tensor(0.2914)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7538) feature loss: tensor(0.3439)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6061) feature loss: tensor(0.2868)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6511) feature loss: tensor(0.3099)
         GM acc on global data: 0.5627 length of data: 10000
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 490
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.6295) feature loss: tensor(0.2567)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.6121) feature loss: tensor(0.2672)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5577) feature loss: tensor(0.2640)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.7382) feature loss: tensor(0.2650)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5859) feature loss: tensor(0.2871)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5578) feature loss: tensor(0.2923)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5631) feature loss: tensor(0.2633)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5046) feature loss: tensor(0.2548)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5568) feature loss: tensor(0.2575)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5077) feature loss: tensor(0.2530)
         GM acc on global data: 0.5537 length of data: 10000
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 504
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7376) feature loss: tensor(0.3123)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6085) feature loss: tensor(0.3311)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7352) feature loss: tensor(0.2876)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7775) feature loss: tensor(0.3320)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6683) feature loss: tensor(0.3047)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5840) feature loss: tensor(0.2999)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6940) feature loss: tensor(0.3698)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6214) feature loss: tensor(0.3003)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.7563) feature loss: tensor(0.3103)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6401) feature loss: tensor(0.3314)
         GM acc on global data: 0.5427 length of data: 10000
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 492
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.7050) feature loss: tensor(0.2600)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7883) feature loss: tensor(0.2662)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5266) feature loss: tensor(0.2438)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7266) feature loss: tensor(0.3189)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7071) feature loss: tensor(0.2536)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5460) feature loss: tensor(0.2525)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5582) feature loss: tensor(0.2452)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.5685) feature loss: tensor(0.2490)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7002) feature loss: tensor(0.2451)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9636) feature loss: tensor(0.2788)
         GM acc on global data: 0.5712 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 495
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6800) feature loss: tensor(0.3707)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7605) feature loss: tensor(0.3479)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7115) feature loss: tensor(0.4159)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7903) feature loss: tensor(0.3922)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7705) feature loss: tensor(0.3415)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6347) feature loss: tensor(0.3211)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7977) feature loss: tensor(0.3221)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.7270) feature loss: tensor(0.3930)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7287) feature loss: tensor(0.3797)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7105) feature loss: tensor(0.4328)
         GM acc on global data: 0.5575 length of data: 10000
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
all data: 501
Local adapation with distilling: 0.000388
training loss: tensor(0.6313) feature loss: tensor(0.2713)
Local adapation with distilling: 0.000388
training loss: tensor(0.6338) feature loss: tensor(0.2936)
Local adapation with distilling: 0.000388
training loss: tensor(0.7822) feature loss: tensor(0.2798)
Local adapation with distilling: 0.000388
training loss: tensor(0.7675) feature loss: tensor(0.2860)
Local adapation with distilling: 0.000388
training loss: tensor(0.8668) feature loss: tensor(0.2766)
Local adapation with distilling: 0.000388
training loss: tensor(0.9193) feature loss: tensor(0.2877)
Local adapation with distilling: 0.000388
training loss: tensor(0.6739) feature loss: tensor(0.3066)
Local adapation with distilling: 0.000388
training loss: tensor(0.9498) feature loss: tensor(0.3379)
Local adapation with distilling: 0.000388
training loss: tensor(0.7076) feature loss: tensor(0.3183)
Local adapation with distilling: 0.000388
training loss: tensor(0.7270) feature loss: tensor(0.3114)
         GM acc on global data: 0.5725 length of data: 10000
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 484
Local adapation with distilling: 0.00037
training loss: tensor(0.6247) feature loss: tensor(0.2823)
Local adapation with distilling: 0.00037
training loss: tensor(0.4979) feature loss: tensor(0.2496)
Local adapation with distilling: 0.00037
training loss: tensor(0.5556) feature loss: tensor(0.2537)
Local adapation with distilling: 0.00037
training loss: tensor(0.6642) feature loss: tensor(0.2687)
Local adapation with distilling: 0.00037
training loss: tensor(0.5537) feature loss: tensor(0.2720)
Local adapation with distilling: 0.00037
training loss: tensor(0.7711) feature loss: tensor(0.2841)
Local adapation with distilling: 0.00037
training loss: tensor(0.6090) feature loss: tensor(0.2553)
Local adapation with distilling: 0.00037
training loss: tensor(0.6220) feature loss: tensor(0.2660)
Local adapation with distilling: 0.00037
training loss: tensor(0.5960) feature loss: tensor(0.2841)
Local adapation with distilling: 0.00037
training loss: tensor(0.6280) feature loss: tensor(0.2703)
         GM acc on global data: 0.5471 length of data: 10000
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 493
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7570) feature loss: tensor(0.2445)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6430) feature loss: tensor(0.2699)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5678) feature loss: tensor(0.2616)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5730) feature loss: tensor(0.2433)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.2668) feature loss: tensor(0.2542)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6139) feature loss: tensor(0.2483)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6867) feature loss: tensor(0.2891)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7046) feature loss: tensor(0.2780)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8539) feature loss: tensor(0.2517)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.4660) feature loss: tensor(0.2374)
         GM acc on global data: 0.5811 length of data: 10000
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 507
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5719) feature loss: tensor(0.2325)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5726) feature loss: tensor(0.2467)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6015) feature loss: tensor(0.2467)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6171) feature loss: tensor(0.2344)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6437) feature loss: tensor(0.2529)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5687) feature loss: tensor(0.2523)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.7204) feature loss: tensor(0.2544)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6369) feature loss: tensor(0.2560)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5988) feature loss: tensor(0.2395)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.8139) feature loss: tensor(0.2397)
         GM acc on global data: 0.5612 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 512
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6828) feature loss: tensor(0.2726)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.5907) feature loss: tensor(0.2505)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6173) feature loss: tensor(0.3099)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7112) feature loss: tensor(0.2524)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8320) feature loss: tensor(0.2694)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7500) feature loss: tensor(0.2744)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6445) feature loss: tensor(0.2811)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6557) feature loss: tensor(0.2628)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.5783) feature loss: tensor(0.2579)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7007) feature loss: tensor(0.2971)
         GM acc on global data: 0.565 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 503
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6639) feature loss: tensor(0.2553)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6014) feature loss: tensor(0.2791)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6950) feature loss: tensor(0.2932)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.7483) feature loss: tensor(0.2645)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.7143) feature loss: tensor(0.2748)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5638) feature loss: tensor(0.2455)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6524) feature loss: tensor(0.2758)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.7419) feature loss: tensor(0.2907)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5808) feature loss: tensor(0.2730)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.7703) feature loss: tensor(0.2401)
         GM acc on global data: 0.5755 length of data: 10000
-------------Round number:  40  -------------
selected users: [79, 75, 63, 15, 38, 11, 40, 45, 39, 62]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 498
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5471) feature loss: tensor(0.2299)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6010) feature loss: tensor(0.2334)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5261) feature loss: tensor(0.2268)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5970) feature loss: tensor(0.2295)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.4826) feature loss: tensor(0.2376)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6422) feature loss: tensor(0.2411)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5377) feature loss: tensor(0.2348)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.5734) feature loss: tensor(0.2443)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6081) feature loss: tensor(0.2535)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.6830) feature loss: tensor(0.2531)
         GM acc on global data: 0.5798 length of data: 10000
-------------Round number:  41  -------------
selected users: [42, 94, 37, 6, 79, 32, 24, 0, 33, 93]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 495
Local adapation with distilling: 0.000262
training loss: tensor(0.6913) feature loss: tensor(0.2224)
Local adapation with distilling: 0.000262
training loss: tensor(0.8264) feature loss: tensor(0.2230)
Local adapation with distilling: 0.000262
training loss: tensor(0.6622) feature loss: tensor(0.2239)
Local adapation with distilling: 0.000262
training loss: tensor(0.7360) feature loss: tensor(0.2312)
Local adapation with distilling: 0.000262
training loss: tensor(0.5685) feature loss: tensor(0.2201)
Local adapation with distilling: 0.000262
training loss: tensor(0.7488) feature loss: tensor(0.2253)
Local adapation with distilling: 0.000262
training loss: tensor(0.6109) feature loss: tensor(0.2188)
Local adapation with distilling: 0.000262
training loss: tensor(0.5668) feature loss: tensor(0.2532)
Local adapation with distilling: 0.000262
training loss: tensor(0.5420) feature loss: tensor(0.2259)
Local adapation with distilling: 0.000262
training loss: tensor(0.6419) feature loss: tensor(0.2388)
         GM acc on global data: 0.5709 length of data: 10000
-------------Round number:  42  -------------
selected users: [83, 53, 70, 45, 44, 39, 22, 80, 10, 0]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 497
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5581) feature loss: tensor(0.1991)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4801) feature loss: tensor(0.2085)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5144) feature loss: tensor(0.2061)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5619) feature loss: tensor(0.2070)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5701) feature loss: tensor(0.2325)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5384) feature loss: tensor(0.2016)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(1.5554) feature loss: tensor(0.2242)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5726) feature loss: tensor(0.2096)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6270) feature loss: tensor(0.1925)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.4765) feature loss: tensor(0.2153)
         GM acc on global data: 0.5512 length of data: 10000
-------------Round number:  43  -------------
selected users: [20, 2, 15, 22, 57, 91, 69, 55, 11, 79]
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 498
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.6945) feature loss: tensor(0.2236)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5298) feature loss: tensor(0.2237)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.4841) feature loss: tensor(0.2214)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.1148) feature loss: tensor(0.2227)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.7178) feature loss: tensor(0.2478)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5221) feature loss: tensor(0.2448)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5201) feature loss: tensor(0.2219)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.6244) feature loss: tensor(0.2292)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.7242) feature loss: tensor(0.2209)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.5319) feature loss: tensor(0.2302)
         GM acc on global data: 0.5676 length of data: 10000
-------------Round number:  44  -------------
selected users: [42, 54, 27, 93, 39, 65, 7, 26, 24, 60]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 495
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5815) feature loss: tensor(0.2273)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.7964) feature loss: tensor(0.2267)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.6527) feature loss: tensor(0.2203)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5687) feature loss: tensor(0.2234)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5072) feature loss: tensor(0.2206)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5608) feature loss: tensor(0.2260)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.7923) feature loss: tensor(0.2427)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5899) feature loss: tensor(0.2482)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.5395) feature loss: tensor(0.2258)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.6132) feature loss: tensor(0.2254)
         GM acc on global data: 0.5639 length of data: 10000
-------------Round number:  45  -------------
selected users: [0, 1, 62, 76, 37, 99, 78, 38, 2, 84]
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 498
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.4581) feature loss: tensor(0.1889)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6393) feature loss: tensor(0.1872)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6046) feature loss: tensor(0.1930)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6875) feature loss: tensor(0.1943)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5824) feature loss: tensor(0.2235)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.6084) feature loss: tensor(0.1904)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5657) feature loss: tensor(0.1867)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5025) feature loss: tensor(0.1937)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5098) feature loss: tensor(0.2154)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(0.5822) feature loss: tensor(0.1861)
         GM acc on global data: 0.5852 length of data: 10000
-------------Round number:  46  -------------
selected users: [71, 33, 37, 10, 44, 34, 24, 98, 73, 95]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 487
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4440) feature loss: tensor(0.2106)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4452) feature loss: tensor(0.2071)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4492) feature loss: tensor(0.2348)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5824) feature loss: tensor(0.2131)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5078) feature loss: tensor(0.2104)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.6522) feature loss: tensor(0.2657)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4687) feature loss: tensor(0.2012)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5376) feature loss: tensor(0.2021)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.4834) feature loss: tensor(0.2174)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.5368) feature loss: tensor(0.2402)
         GM acc on global data: 0.5974 length of data: 10000
-------------Round number:  47  -------------
selected users: [17, 90, 94, 86, 63, 5, 38, 14, 40, 47]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 499
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5589) feature loss: tensor(0.1859)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6186) feature loss: tensor(0.1784)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.6671) feature loss: tensor(0.1833)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5558) feature loss: tensor(0.1891)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4922) feature loss: tensor(0.1898)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5778) feature loss: tensor(0.1769)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4648) feature loss: tensor(0.1972)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.4808) feature loss: tensor(0.1794)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5379) feature loss: tensor(0.1823)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.5556) feature loss: tensor(0.1780)
         GM acc on global data: 0.584 length of data: 10000
-------------Round number:  48  -------------
selected users: [93, 5, 71, 9, 11, 79, 69, 8, 59, 63]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 504
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5212) feature loss: tensor(0.2098)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5814) feature loss: tensor(0.2647)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5311) feature loss: tensor(0.2632)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.9996) feature loss: tensor(0.2226)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6911) feature loss: tensor(0.2200)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.6055) feature loss: tensor(0.2395)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5458) feature loss: tensor(0.2248)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.7386) feature loss: tensor(0.2266)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.2817) feature loss: tensor(0.2112)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(0.5392) feature loss: tensor(0.2395)
         GM acc on global data: 0.5918 length of data: 10000
-------------Round number:  49  -------------
selected users: [76, 25, 28, 75, 81, 47, 41, 22, 29, 1]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 503
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6414) feature loss: tensor(0.1735)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.6004) feature loss: tensor(0.2066)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.7846) feature loss: tensor(0.1679)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5744) feature loss: tensor(0.1791)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.9500) feature loss: tensor(0.1751)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5447) feature loss: tensor(0.1626)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5952) feature loss: tensor(0.1638)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.3083) feature loss: tensor(0.1750)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5732) feature loss: tensor(0.1777)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.5498) feature loss: tensor(0.1765)
         GM acc on global data: 0.5976 length of data: 10000
-------------Round number:  50  -------------
selected users: [80, 79, 25, 15, 39, 40, 53, 17, 57, 50]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 504
Local adapation with distilling: 0.0001
training loss: tensor(0.5555) feature loss: tensor(0.1689)
Local adapation with distilling: 0.0001
training loss: tensor(0.5026) feature loss: tensor(0.1740)
Local adapation with distilling: 0.0001
training loss: tensor(0.5217) feature loss: tensor(0.1711)
Local adapation with distilling: 0.0001
training loss: tensor(0.5006) feature loss: tensor(0.1696)
Local adapation with distilling: 0.0001
training loss: tensor(0.4999) feature loss: tensor(0.1736)
Local adapation with distilling: 0.0001
training loss: tensor(0.5398) feature loss: tensor(0.1676)
Local adapation with distilling: 0.0001
training loss: tensor(0.5210) feature loss: tensor(0.1754)
Local adapation with distilling: 0.0001
training loss: tensor(0.5294) feature loss: tensor(0.1766)
Local adapation with distilling: 0.0001
training loss: tensor(0.6166) feature loss: tensor(0.2023)
Local adapation with distilling: 0.0001
training loss: tensor(0.6770) feature loss: tensor(0.1706)
         GM acc on global data: 0.6001 length of data: 10000
-------------Round number:  51  -------------
selected users: [71, 43, 11, 83, 78, 19, 80, 4, 79, 75]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.3979) feature loss: tensor(0.1476)
Local adapation with distilling: 0.0001
training loss: tensor(0.5437) feature loss: tensor(0.1754)
Local adapation with distilling: 0.0001
training loss: tensor(0.5864) feature loss: tensor(0.1556)
Local adapation with distilling: 0.0001
training loss: tensor(0.5522) feature loss: tensor(0.1432)
Local adapation with distilling: 0.0001
training loss: tensor(0.4786) feature loss: tensor(0.1411)
Local adapation with distilling: 0.0001
training loss: tensor(0.5554) feature loss: tensor(0.1547)
Local adapation with distilling: 0.0001
training loss: tensor(0.4571) feature loss: tensor(0.1620)
Local adapation with distilling: 0.0001
training loss: tensor(0.5439) feature loss: tensor(0.1474)
Local adapation with distilling: 0.0001
training loss: tensor(0.4082) feature loss: tensor(0.1548)
Local adapation with distilling: 0.0001
training loss: tensor(0.4988) feature loss: tensor(0.1599)
         GM acc on global data: 0.595 length of data: 10000
-------------Round number:  52  -------------
selected users: [82, 8, 44, 19, 2, 73, 37, 89, 67, 18]
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(0.6572) feature loss: tensor(0.2066)
Local adapation with distilling: 0.0001
training loss: tensor(0.6515) feature loss: tensor(0.1886)
Local adapation with distilling: 0.0001
training loss: tensor(0.5880) feature loss: tensor(0.1811)
Local adapation with distilling: 0.0001
training loss: tensor(0.5058) feature loss: tensor(0.1769)
Local adapation with distilling: 0.0001
training loss: tensor(0.4763) feature loss: tensor(0.1870)
Local adapation with distilling: 0.0001
training loss: tensor(0.4709) feature loss: tensor(0.1854)
Local adapation with distilling: 0.0001
training loss: tensor(0.5306) feature loss: tensor(0.1837)
Local adapation with distilling: 0.0001
training loss: tensor(0.5193) feature loss: tensor(0.1837)
Local adapation with distilling: 0.0001
training loss: tensor(0.6876) feature loss: tensor(0.2003)
Local adapation with distilling: 0.0001
training loss: tensor(0.8776) feature loss: tensor(0.1867)
         GM acc on global data: 0.6042 length of data: 10000
-------------Round number:  53  -------------
selected users: [19, 78, 64, 3, 71, 32, 68, 42, 55, 97]
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.5111) feature loss: tensor(0.1832)
Local adapation with distilling: 0.0001
training loss: tensor(0.5243) feature loss: tensor(0.1955)
Local adapation with distilling: 0.0001
training loss: tensor(0.7853) feature loss: tensor(0.1906)
Local adapation with distilling: 0.0001
training loss: tensor(0.7855) feature loss: tensor(0.1863)
Local adapation with distilling: 0.0001
training loss: tensor(0.4576) feature loss: tensor(0.1863)
Local adapation with distilling: 0.0001
training loss: tensor(0.7785) feature loss: tensor(0.1998)
Local adapation with distilling: 0.0001
training loss: tensor(0.7692) feature loss: tensor(0.1885)
Local adapation with distilling: 0.0001
training loss: tensor(0.6158) feature loss: tensor(0.2032)
Local adapation with distilling: 0.0001
training loss: tensor(0.6475) feature loss: tensor(0.2029)
Local adapation with distilling: 0.0001
training loss: tensor(0.7019) feature loss: tensor(0.2009)
         GM acc on global data: 0.5995 length of data: 10000
-------------Round number:  54  -------------
selected users: [36, 70, 48, 94, 81, 46, 38, 29, 34, 22]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.5858) feature loss: tensor(0.2372)
Local adapation with distilling: 0.0001
training loss: tensor(0.5284) feature loss: tensor(0.2128)
Local adapation with distilling: 0.0001
training loss: tensor(0.8302) feature loss: tensor(0.2292)
Local adapation with distilling: 0.0001
training loss: tensor(0.6523) feature loss: tensor(0.2505)
Local adapation with distilling: 0.0001
training loss: tensor(1.4295) feature loss: tensor(0.2186)
Local adapation with distilling: 0.0001
training loss: tensor(0.6950) feature loss: tensor(0.2266)
Local adapation with distilling: 0.0001
training loss: tensor(0.4623) feature loss: tensor(0.2557)
Local adapation with distilling: 0.0001
training loss: tensor(0.5497) feature loss: tensor(0.2334)
Local adapation with distilling: 0.0001
training loss: tensor(0.6330) feature loss: tensor(0.2169)
Local adapation with distilling: 0.0001
training loss: tensor(1.1244) feature loss: tensor(0.2272)
         GM acc on global data: 0.606 length of data: 10000
-------------Round number:  55  -------------
selected users: [28, 92, 98, 95, 84, 34, 38, 76, 17, 78]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 502
Local adapation with distilling: 0.0001
training loss: tensor(0.5606) feature loss: tensor(0.1630)
Local adapation with distilling: 0.0001
training loss: tensor(0.6914) feature loss: tensor(0.1707)
Local adapation with distilling: 0.0001
training loss: tensor(0.4915) feature loss: tensor(0.1671)
Local adapation with distilling: 0.0001
training loss: tensor(0.4732) feature loss: tensor(0.1852)
Local adapation with distilling: 0.0001
training loss: tensor(0.5276) feature loss: tensor(0.1604)
Local adapation with distilling: 0.0001
training loss: tensor(0.4825) feature loss: tensor(0.1704)
Local adapation with distilling: 0.0001
training loss: tensor(0.3712) feature loss: tensor(0.1811)
Local adapation with distilling: 0.0001
training loss: tensor(0.5410) feature loss: tensor(0.1667)
Local adapation with distilling: 0.0001
training loss: tensor(0.4478) feature loss: tensor(0.1884)
Local adapation with distilling: 0.0001
training loss: tensor(0.4237) feature loss: tensor(0.1650)
         GM acc on global data: 0.6061 length of data: 10000
-------------Round number:  56  -------------
selected users: [92, 79, 23, 68, 52, 38, 73, 9, 59, 27]
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 502
Local adapation with distilling: 0.0001
training loss: tensor(0.6852) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.5350) feature loss: tensor(0.1699)
Local adapation with distilling: 0.0001
training loss: tensor(0.7897) feature loss: tensor(0.1696)
Local adapation with distilling: 0.0001
training loss: tensor(0.5352) feature loss: tensor(0.1676)
Local adapation with distilling: 0.0001
training loss: tensor(0.9341) feature loss: tensor(0.1761)
Local adapation with distilling: 0.0001
training loss: tensor(0.4137) feature loss: tensor(0.1839)
Local adapation with distilling: 0.0001
training loss: tensor(0.4984) feature loss: tensor(0.1651)
Local adapation with distilling: 0.0001
training loss: tensor(1.2642) feature loss: tensor(0.1710)
Local adapation with distilling: 0.0001
training loss: tensor(0.6277) feature loss: tensor(0.1692)
Local adapation with distilling: 0.0001
training loss: tensor(0.5614) feature loss: tensor(0.1632)
         GM acc on global data: 0.6036 length of data: 10000
-------------Round number:  57  -------------
selected users: [52, 17, 41, 3, 8, 98, 59, 20, 67, 7]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([473, 16, 32, 32]) torch.Size([473])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 492
Local adapation with distilling: 0.0001
training loss: tensor(0.8897) feature loss: tensor(0.1889)
Local adapation with distilling: 0.0001
training loss: tensor(0.4379) feature loss: tensor(0.1878)
Local adapation with distilling: 0.0001
training loss: tensor(0.5507) feature loss: tensor(0.1882)
Local adapation with distilling: 0.0001
training loss: tensor(0.6606) feature loss: tensor(0.1947)
Local adapation with distilling: 0.0001
training loss: tensor(0.5608) feature loss: tensor(0.2321)
Local adapation with distilling: 0.0001
training loss: tensor(0.4779) feature loss: tensor(0.1865)
Local adapation with distilling: 0.0001
training loss: tensor(0.5625) feature loss: tensor(0.1846)
Local adapation with distilling: 0.0001
training loss: tensor(0.6479) feature loss: tensor(0.2121)
Local adapation with distilling: 0.0001
training loss: tensor(0.5991) feature loss: tensor(0.2205)
Local adapation with distilling: 0.0001
training loss: tensor(0.7074) feature loss: tensor(0.1789)
         GM acc on global data: 0.6121 length of data: 10000
-------------Round number:  58  -------------
selected users: [43, 58, 8, 31, 70, 45, 69, 95, 50, 4]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 490
Local adapation with distilling: 0.0001
training loss: tensor(0.6119) feature loss: tensor(0.2390)
Local adapation with distilling: 0.0001
training loss: tensor(0.5210) feature loss: tensor(0.2158)
Local adapation with distilling: 0.0001
training loss: tensor(0.4956) feature loss: tensor(0.2178)
Local adapation with distilling: 0.0001
training loss: tensor(0.8427) feature loss: tensor(0.2196)
Local adapation with distilling: 0.0001
training loss: tensor(0.4984) feature loss: tensor(0.2111)
Local adapation with distilling: 0.0001
training loss: tensor(0.5027) feature loss: tensor(0.2129)
Local adapation with distilling: 0.0001
training loss: tensor(0.5383) feature loss: tensor(0.2047)
Local adapation with distilling: 0.0001
training loss: tensor(0.4838) feature loss: tensor(0.2146)
Local adapation with distilling: 0.0001
training loss: tensor(0.6321) feature loss: tensor(0.2161)
Local adapation with distilling: 0.0001
training loss: tensor(0.6136) feature loss: tensor(0.2106)
         GM acc on global data: 0.6092 length of data: 10000
-------------Round number:  59  -------------
selected users: [38, 46, 24, 87, 30, 85, 16, 96, 18, 99]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.4101) feature loss: tensor(0.1785)
Local adapation with distilling: 0.0001
training loss: tensor(0.5195) feature loss: tensor(0.1789)
Local adapation with distilling: 0.0001
training loss: tensor(0.5114) feature loss: tensor(0.1722)
Local adapation with distilling: 0.0001
training loss: tensor(0.5872) feature loss: tensor(0.1664)
Local adapation with distilling: 0.0001
training loss: tensor(0.6061) feature loss: tensor(0.1702)
Local adapation with distilling: 0.0001
training loss: tensor(0.4909) feature loss: tensor(0.1638)
Local adapation with distilling: 0.0001
training loss: tensor(0.6995) feature loss: tensor(0.1695)
Local adapation with distilling: 0.0001
training loss: tensor(1.2901) feature loss: tensor(0.1722)
Local adapation with distilling: 0.0001
training loss: tensor(0.7113) feature loss: tensor(0.1708)
Local adapation with distilling: 0.0001
training loss: tensor(0.5813) feature loss: tensor(0.1726)
         GM acc on global data: 0.6062 length of data: 10000
-------------Round number:  60  -------------
selected users: [88, 4, 79, 14, 55, 3, 19, 28, 94, 25]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.5078) feature loss: tensor(0.1687)
Local adapation with distilling: 0.0001
training loss: tensor(0.4815) feature loss: tensor(0.1669)
Local adapation with distilling: 0.0001
training loss: tensor(0.4195) feature loss: tensor(0.1729)
Local adapation with distilling: 0.0001
training loss: tensor(0.4894) feature loss: tensor(0.1652)
Local adapation with distilling: 0.0001
training loss: tensor(0.5125) feature loss: tensor(0.1734)
Local adapation with distilling: 0.0001
training loss: tensor(0.5988) feature loss: tensor(0.1713)
Local adapation with distilling: 0.0001
training loss: tensor(0.4888) feature loss: tensor(0.1680)
Local adapation with distilling: 0.0001
training loss: tensor(0.8689) feature loss: tensor(0.1796)
Local adapation with distilling: 0.0001
training loss: tensor(0.5651) feature loss: tensor(0.1758)
Local adapation with distilling: 0.0001
training loss: tensor(0.5085) feature loss: tensor(0.1719)
         GM acc on global data: 0.6054 length of data: 10000
-------------Round number:  61  -------------
selected users: [83, 1, 55, 9, 31, 28, 96, 29, 86, 63]
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.0001
training loss: tensor(0.5397) feature loss: tensor(0.1822)
Local adapation with distilling: 0.0001
training loss: tensor(0.5149) feature loss: tensor(0.1755)
Local adapation with distilling: 0.0001
training loss: tensor(0.4744) feature loss: tensor(0.1807)
Local adapation with distilling: 0.0001
training loss: tensor(1.1398) feature loss: tensor(0.1758)
Local adapation with distilling: 0.0001
training loss: tensor(0.7420) feature loss: tensor(0.1716)
Local adapation with distilling: 0.0001
training loss: tensor(0.7815) feature loss: tensor(0.1723)
Local adapation with distilling: 0.0001
training loss: tensor(1.1497) feature loss: tensor(0.1883)
Local adapation with distilling: 0.0001
training loss: tensor(0.4577) feature loss: tensor(0.1918)
Local adapation with distilling: 0.0001
training loss: tensor(0.4813) feature loss: tensor(0.1767)
Local adapation with distilling: 0.0001
training loss: tensor(0.4534) feature loss: tensor(0.1992)
         GM acc on global data: 0.5973 length of data: 10000
-------------Round number:  62  -------------
selected users: [76, 48, 62, 80, 29, 99, 60, 89, 39, 69]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.5122) feature loss: tensor(0.1516)
Local adapation with distilling: 0.0001
training loss: tensor(0.6146) feature loss: tensor(0.1515)
Local adapation with distilling: 0.0001
training loss: tensor(0.6004) feature loss: tensor(0.1549)
Local adapation with distilling: 0.0001
training loss: tensor(0.4705) feature loss: tensor(0.1547)
Local adapation with distilling: 0.0001
training loss: tensor(0.3882) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.4976) feature loss: tensor(0.1564)
Local adapation with distilling: 0.0001
training loss: tensor(0.5595) feature loss: tensor(0.1569)
Local adapation with distilling: 0.0001
training loss: tensor(0.4255) feature loss: tensor(0.1584)
Local adapation with distilling: 0.0001
training loss: tensor(0.4324) feature loss: tensor(0.1588)
Local adapation with distilling: 0.0001
training loss: tensor(0.4135) feature loss: tensor(0.1538)
         GM acc on global data: 0.5911 length of data: 10000
-------------Round number:  63  -------------
selected users: [64, 59, 63, 2, 80, 20, 18, 48, 72, 51]
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0001
training loss: tensor(0.7318) feature loss: tensor(0.1989)
Local adapation with distilling: 0.0001
training loss: tensor(0.4691) feature loss: tensor(0.1712)
Local adapation with distilling: 0.0001
training loss: tensor(0.4057) feature loss: tensor(0.1660)
Local adapation with distilling: 0.0001
training loss: tensor(0.4444) feature loss: tensor(0.1844)
Local adapation with distilling: 0.0001
training loss: tensor(0.4254) feature loss: tensor(0.1816)
Local adapation with distilling: 0.0001
training loss: tensor(0.5358) feature loss: tensor(0.1740)
Local adapation with distilling: 0.0001
training loss: tensor(0.6190) feature loss: tensor(0.1680)
Local adapation with distilling: 0.0001
training loss: tensor(0.5327) feature loss: tensor(0.1795)
Local adapation with distilling: 0.0001
training loss: tensor(0.5082) feature loss: tensor(0.1843)
Local adapation with distilling: 0.0001
training loss: tensor(0.6358) feature loss: tensor(0.1769)
         GM acc on global data: 0.5938 length of data: 10000
-------------Round number:  64  -------------
selected users: [17, 22, 60, 92, 23, 19, 71, 94, 40, 49]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 492
Local adapation with distilling: 0.0001
training loss: tensor(0.4906) feature loss: tensor(0.1895)
Local adapation with distilling: 0.0001
training loss: tensor(1.0470) feature loss: tensor(0.1864)
Local adapation with distilling: 0.0001
training loss: tensor(0.4995) feature loss: tensor(0.1903)
Local adapation with distilling: 0.0001
training loss: tensor(0.5545) feature loss: tensor(0.1814)
Local adapation with distilling: 0.0001
training loss: tensor(0.6091) feature loss: tensor(0.1845)
Local adapation with distilling: 0.0001
training loss: tensor(0.4796) feature loss: tensor(0.1820)
Local adapation with distilling: 0.0001
training loss: tensor(0.4310) feature loss: tensor(0.1840)
Local adapation with distilling: 0.0001
training loss: tensor(0.5977) feature loss: tensor(0.1952)
Local adapation with distilling: 0.0001
training loss: tensor(0.4937) feature loss: tensor(0.1927)
Local adapation with distilling: 0.0001
training loss: tensor(0.4584) feature loss: tensor(0.1827)
         GM acc on global data: 0.5999 length of data: 10000
-------------Round number:  65  -------------
selected users: [37, 81, 39, 61, 76, 90, 27, 86, 28, 69]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.4359) feature loss: tensor(0.1721)
Local adapation with distilling: 0.0001
training loss: tensor(2.1083) feature loss: tensor(0.1710)
Local adapation with distilling: 0.0001
training loss: tensor(0.4607) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.4872) feature loss: tensor(0.1572)
Local adapation with distilling: 0.0001
training loss: tensor(0.4548) feature loss: tensor(0.1629)
Local adapation with distilling: 0.0001
training loss: tensor(0.5792) feature loss: tensor(0.1609)
Local adapation with distilling: 0.0001
training loss: tensor(0.4911) feature loss: tensor(0.1607)
Local adapation with distilling: 0.0001
training loss: tensor(0.4398) feature loss: tensor(0.1711)
Local adapation with distilling: 0.0001
training loss: tensor(1.0517) feature loss: tensor(0.1624)
Local adapation with distilling: 0.0001
training loss: tensor(0.3849) feature loss: tensor(0.1601)
         GM acc on global data: 0.6067 length of data: 10000
-------------Round number:  66  -------------
selected users: [8, 93, 4, 5, 52, 41, 0, 73, 88, 68]
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.4510) feature loss: tensor(0.1580)
Local adapation with distilling: 0.0001
training loss: tensor(0.4588) feature loss: tensor(0.1542)
Local adapation with distilling: 0.0001
training loss: tensor(0.4253) feature loss: tensor(0.1558)
Local adapation with distilling: 0.0001
training loss: tensor(0.5055) feature loss: tensor(0.1684)
Local adapation with distilling: 0.0001
training loss: tensor(0.7489) feature loss: tensor(0.1583)
Local adapation with distilling: 0.0001
training loss: tensor(0.4750) feature loss: tensor(0.1562)
Local adapation with distilling: 0.0001
training loss: tensor(0.4115) feature loss: tensor(0.1570)
Local adapation with distilling: 0.0001
training loss: tensor(0.4505) feature loss: tensor(0.1743)
Local adapation with distilling: 0.0001
training loss: tensor(0.4538) feature loss: tensor(0.1531)
Local adapation with distilling: 0.0001
training loss: tensor(0.5121) feature loss: tensor(0.1594)
         GM acc on global data: 0.6065 length of data: 10000
-------------Round number:  67  -------------
selected users: [17, 24, 64, 93, 97, 29, 3, 70, 82, 11]
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 504
Local adapation with distilling: 0.0001
training loss: tensor(0.4317) feature loss: tensor(0.1876)
Local adapation with distilling: 0.0001
training loss: tensor(0.4756) feature loss: tensor(0.1829)
Local adapation with distilling: 0.0001
training loss: tensor(0.6094) feature loss: tensor(0.1765)
Local adapation with distilling: 0.0001
training loss: tensor(0.4481) feature loss: tensor(0.1838)
Local adapation with distilling: 0.0001
training loss: tensor(0.5801) feature loss: tensor(0.1820)
Local adapation with distilling: 0.0001
training loss: tensor(0.4704) feature loss: tensor(0.1854)
Local adapation with distilling: 0.0001
training loss: tensor(0.5597) feature loss: tensor(0.1849)
Local adapation with distilling: 0.0001
training loss: tensor(0.4956) feature loss: tensor(0.1856)
Local adapation with distilling: 0.0001
training loss: tensor(0.5837) feature loss: tensor(0.1823)
Local adapation with distilling: 0.0001
training loss: tensor(0.5677) feature loss: tensor(0.1815)
         GM acc on global data: 0.606 length of data: 10000
-------------Round number:  68  -------------
selected users: [29, 30, 16, 5, 38, 71, 76, 94, 99, 95]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 508
Local adapation with distilling: 0.0001
training loss: tensor(0.3711) feature loss: tensor(0.1666)
Local adapation with distilling: 0.0001
training loss: tensor(0.5308) feature loss: tensor(0.1577)
Local adapation with distilling: 0.0001
training loss: tensor(0.5872) feature loss: tensor(0.1608)
Local adapation with distilling: 0.0001
training loss: tensor(0.4613) feature loss: tensor(0.1632)
Local adapation with distilling: 0.0001
training loss: tensor(0.3405) feature loss: tensor(0.1679)
Local adapation with distilling: 0.0001
training loss: tensor(0.3665) feature loss: tensor(0.1657)
Local adapation with distilling: 0.0001
training loss: tensor(0.4165) feature loss: tensor(0.1620)
Local adapation with distilling: 0.0001
training loss: tensor(0.4381) feature loss: tensor(0.1627)
Local adapation with distilling: 0.0001
training loss: tensor(0.4957) feature loss: tensor(0.1607)
Local adapation with distilling: 0.0001
training loss: tensor(0.4015) feature loss: tensor(0.1681)
         GM acc on global data: 0.6131 length of data: 10000
-------------Round number:  69  -------------
selected users: [72, 31, 13, 83, 33, 8, 26, 89, 64, 97]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.4494) feature loss: tensor(0.1782)
Local adapation with distilling: 0.0001
training loss: tensor(0.7795) feature loss: tensor(0.1768)
Local adapation with distilling: 0.0001
training loss: tensor(0.5157) feature loss: tensor(0.1705)
Local adapation with distilling: 0.0001
training loss: tensor(0.4952) feature loss: tensor(0.1704)
Local adapation with distilling: 0.0001
training loss: tensor(0.4780) feature loss: tensor(0.1819)
Local adapation with distilling: 0.0001
training loss: tensor(0.4739) feature loss: tensor(0.2031)
Local adapation with distilling: 0.0001
training loss: tensor(0.4766) feature loss: tensor(0.1878)
Local adapation with distilling: 0.0001
training loss: tensor(0.4375) feature loss: tensor(0.1809)
Local adapation with distilling: 0.0001
training loss: tensor(0.5450) feature loss: tensor(0.1797)
Local adapation with distilling: 0.0001
training loss: tensor(0.5341) feature loss: tensor(0.1806)
         GM acc on global data: 0.6053 length of data: 10000
-------------Round number:  70  -------------
selected users: [81, 43, 88, 32, 50, 71, 73, 55, 42, 2]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(1.4518) feature loss: tensor(0.1962)
Local adapation with distilling: 0.0001
training loss: tensor(0.5313) feature loss: tensor(0.1956)
Local adapation with distilling: 0.0001
training loss: tensor(0.4735) feature loss: tensor(0.1883)
Local adapation with distilling: 0.0001
training loss: tensor(0.6741) feature loss: tensor(0.1880)
Local adapation with distilling: 0.0001
training loss: tensor(0.5706) feature loss: tensor(0.1997)
Local adapation with distilling: 0.0001
training loss: tensor(0.4124) feature loss: tensor(0.1946)
Local adapation with distilling: 0.0001
training loss: tensor(0.4328) feature loss: tensor(0.1943)
Local adapation with distilling: 0.0001
training loss: tensor(0.5005) feature loss: tensor(0.1966)
Local adapation with distilling: 0.0001
training loss: tensor(0.5748) feature loss: tensor(0.1903)
Local adapation with distilling: 0.0001
training loss: tensor(0.5026) feature loss: tensor(0.1937)
         GM acc on global data: 0.6068 length of data: 10000
-------------Round number:  71  -------------
selected users: [41, 84, 98, 42, 75, 25, 60, 19, 52, 29]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(0.5152) feature loss: tensor(0.1783)
Local adapation with distilling: 0.0001
training loss: tensor(0.5342) feature loss: tensor(0.1866)
Local adapation with distilling: 0.0001
training loss: tensor(0.4758) feature loss: tensor(0.1748)
Local adapation with distilling: 0.0001
training loss: tensor(0.5110) feature loss: tensor(0.1838)
Local adapation with distilling: 0.0001
training loss: tensor(0.5141) feature loss: tensor(0.1708)
Local adapation with distilling: 0.0001
training loss: tensor(0.5633) feature loss: tensor(0.1720)
Local adapation with distilling: 0.0001
training loss: tensor(0.4908) feature loss: tensor(0.1782)
Local adapation with distilling: 0.0001
training loss: tensor(0.4901) feature loss: tensor(0.1830)
Local adapation with distilling: 0.0001
training loss: tensor(0.8319) feature loss: tensor(0.1762)
Local adapation with distilling: 0.0001
training loss: tensor(0.4253) feature loss: tensor(0.1792)
         GM acc on global data: 0.6144 length of data: 10000
-------------Round number:  72  -------------
selected users: [76, 82, 43, 16, 84, 95, 78, 91, 30, 22]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 501
Local adapation with distilling: 0.0001
training loss: tensor(0.3837) feature loss: tensor(0.1477)
Local adapation with distilling: 0.0001
training loss: tensor(0.4330) feature loss: tensor(0.1432)
Local adapation with distilling: 0.0001
training loss: tensor(0.3717) feature loss: tensor(0.1455)
Local adapation with distilling: 0.0001
training loss: tensor(0.4754) feature loss: tensor(0.1434)
Local adapation with distilling: 0.0001
training loss: tensor(0.4218) feature loss: tensor(0.1425)
Local adapation with distilling: 0.0001
training loss: tensor(0.3697) feature loss: tensor(0.1478)
Local adapation with distilling: 0.0001
training loss: tensor(0.4075) feature loss: tensor(0.1492)
Local adapation with distilling: 0.0001
training loss: tensor(0.4220) feature loss: tensor(0.1467)
Local adapation with distilling: 0.0001
training loss: tensor(0.4824) feature loss: tensor(0.1439)
Local adapation with distilling: 0.0001
training loss: tensor(1.4951) feature loss: tensor(0.1517)
         GM acc on global data: 0.6076 length of data: 10000
-------------Round number:  73  -------------
selected users: [49, 14, 34, 70, 90, 35, 68, 76, 80, 9]
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.4413) feature loss: tensor(0.1459)
Local adapation with distilling: 0.0001
training loss: tensor(0.4004) feature loss: tensor(0.1504)
Local adapation with distilling: 0.0001
training loss: tensor(0.4755) feature loss: tensor(0.1467)
Local adapation with distilling: 0.0001
training loss: tensor(0.4083) feature loss: tensor(0.1501)
Local adapation with distilling: 0.0001
training loss: tensor(0.4656) feature loss: tensor(0.1515)
Local adapation with distilling: 0.0001
training loss: tensor(0.5555) feature loss: tensor(0.1486)
Local adapation with distilling: 0.0001
training loss: tensor(0.5739) feature loss: tensor(0.1507)
Local adapation with distilling: 0.0001
training loss: tensor(0.3714) feature loss: tensor(0.1630)
Local adapation with distilling: 0.0001
training loss: tensor(0.3788) feature loss: tensor(0.1581)
Local adapation with distilling: 0.0001
training loss: tensor(0.7989) feature loss: tensor(0.1543)
         GM acc on global data: 0.6107 length of data: 10000
-------------Round number:  74  -------------
selected users: [85, 64, 63, 80, 6, 12, 43, 17, 7, 8]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
all data: 494
Local adapation with distilling: 0.0001
training loss: tensor(0.4581) feature loss: tensor(0.1795)
Local adapation with distilling: 0.0001
training loss: tensor(0.5431) feature loss: tensor(0.1887)
Local adapation with distilling: 0.0001
training loss: tensor(0.4292) feature loss: tensor(0.1914)
Local adapation with distilling: 0.0001
training loss: tensor(0.3781) feature loss: tensor(0.1820)
Local adapation with distilling: 0.0001
training loss: tensor(0.6644) feature loss: tensor(0.2114)
Local adapation with distilling: 0.0001
training loss: tensor(0.5693) feature loss: tensor(0.1737)
Local adapation with distilling: 0.0001
training loss: tensor(0.4221) feature loss: tensor(0.1896)
Local adapation with distilling: 0.0001
training loss: tensor(0.4410) feature loss: tensor(0.1826)
Local adapation with distilling: 0.0001
training loss: tensor(0.6031) feature loss: tensor(0.1753)
Local adapation with distilling: 0.0001
training loss: tensor(0.4512) feature loss: tensor(0.1776)
         GM acc on global data: 0.6123 length of data: 10000
-------------Round number:  75  -------------
selected users: [36, 7, 6, 45, 56, 54, 22, 37, 53, 68]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 515
Local adapation with distilling: 0.0001
training loss: tensor(0.7774) feature loss: tensor(0.3493)
Local adapation with distilling: 0.0001
training loss: tensor(0.6939) feature loss: tensor(0.3065)
Local adapation with distilling: 0.0001
training loss: tensor(0.7749) feature loss: tensor(0.3247)
Local adapation with distilling: 0.0001
training loss: tensor(0.6883) feature loss: tensor(0.3394)
Local adapation with distilling: 0.0001
training loss: tensor(0.7234) feature loss: tensor(0.4663)
Local adapation with distilling: 0.0001
training loss: tensor(0.9569) feature loss: tensor(0.3165)
Local adapation with distilling: 0.0001
training loss: tensor(1.4800) feature loss: tensor(0.2626)
Local adapation with distilling: 0.0001
training loss: tensor(0.5361) feature loss: tensor(0.2638)
Local adapation with distilling: 0.0001
training loss: tensor(0.7665) feature loss: tensor(0.4635)
Local adapation with distilling: 0.0001
training loss: tensor(0.6643) feature loss: tensor(0.4301)
         GM acc on global data: 0.6025 length of data: 10000
-------------Round number:  76  -------------
selected users: [38, 37, 32, 50, 10, 94, 19, 44, 86, 23]
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([503, 16, 32, 32]) torch.Size([503])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.3761) feature loss: tensor(0.1930)
Local adapation with distilling: 0.0001
training loss: tensor(0.3927) feature loss: tensor(0.1958)
Local adapation with distilling: 0.0001
training loss: tensor(0.6090) feature loss: tensor(0.1921)
Local adapation with distilling: 0.0001
training loss: tensor(0.5227) feature loss: tensor(0.1947)
Local adapation with distilling: 0.0001
training loss: tensor(0.5667) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0001
training loss: tensor(0.4399) feature loss: tensor(0.1964)
Local adapation with distilling: 0.0001
training loss: tensor(0.4178) feature loss: tensor(0.1900)
Local adapation with distilling: 0.0001
training loss: tensor(0.5235) feature loss: tensor(0.1912)
Local adapation with distilling: 0.0001
training loss: tensor(0.4286) feature loss: tensor(0.1945)
Local adapation with distilling: 0.0001
training loss: tensor(0.5622) feature loss: tensor(0.1884)
         GM acc on global data: 0.6062 length of data: 10000
-------------Round number:  77  -------------
selected users: [5, 93, 41, 96, 16, 42, 81, 91, 50, 58]
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 503
Local adapation with distilling: 0.0001
training loss: tensor(0.4977) feature loss: tensor(0.1841)
Local adapation with distilling: 0.0001
training loss: tensor(0.4673) feature loss: tensor(0.1847)
Local adapation with distilling: 0.0001
training loss: tensor(0.4695) feature loss: tensor(0.1863)
Local adapation with distilling: 0.0001
training loss: tensor(1.0241) feature loss: tensor(0.1898)
Local adapation with distilling: 0.0001
training loss: tensor(0.5277) feature loss: tensor(0.1894)
Local adapation with distilling: 0.0001
training loss: tensor(0.4766) feature loss: tensor(0.1883)
Local adapation with distilling: 0.0001
training loss: tensor(1.8327) feature loss: tensor(0.2004)
Local adapation with distilling: 0.0001
training loss: tensor(0.4920) feature loss: tensor(0.1857)
Local adapation with distilling: 0.0001
training loss: tensor(0.4542) feature loss: tensor(0.1856)
Local adapation with distilling: 0.0001
training loss: tensor(0.4683) feature loss: tensor(0.1839)
         GM acc on global data: 0.6127 length of data: 10000
-------------Round number:  78  -------------
selected users: [9, 46, 7, 63, 15, 2, 74, 31, 5, 36]
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([506, 16, 32, 32]) torch.Size([506])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.8772) feature loss: tensor(0.1690)
Local adapation with distilling: 0.0001
training loss: tensor(0.3996) feature loss: tensor(0.1672)
Local adapation with distilling: 0.0001
training loss: tensor(0.4479) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.3879) feature loss: tensor(0.1750)
Local adapation with distilling: 0.0001
training loss: tensor(0.5201) feature loss: tensor(0.1623)
Local adapation with distilling: 0.0001
training loss: tensor(0.3720) feature loss: tensor(0.1622)
Local adapation with distilling: 0.0001
training loss: tensor(0.4124) feature loss: tensor(0.1598)
Local adapation with distilling: 0.0001
training loss: tensor(0.6546) feature loss: tensor(0.1649)
Local adapation with distilling: 0.0001
training loss: tensor(0.4070) feature loss: tensor(0.1802)
Local adapation with distilling: 0.0001
training loss: tensor(0.3721) feature loss: tensor(0.1632)
         GM acc on global data: 0.6108 length of data: 10000
-------------Round number:  79  -------------
selected users: [68, 18, 86, 60, 56, 32, 30, 24, 45, 92]
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([532, 16, 32, 32]) torch.Size([532])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.4386) feature loss: tensor(0.1916)
Local adapation with distilling: 0.0001
training loss: tensor(0.6168) feature loss: tensor(0.1891)
Local adapation with distilling: 0.0001
training loss: tensor(0.4356) feature loss: tensor(0.1937)
Local adapation with distilling: 0.0001
training loss: tensor(0.4774) feature loss: tensor(0.1946)
Local adapation with distilling: 0.0001
training loss: tensor(0.4660) feature loss: tensor(0.1888)
Local adapation with distilling: 0.0001
training loss: tensor(0.5932) feature loss: tensor(0.1994)
Local adapation with distilling: 0.0001
training loss: tensor(0.4980) feature loss: tensor(0.2161)
Local adapation with distilling: 0.0001
training loss: tensor(0.4814) feature loss: tensor(0.2052)
Local adapation with distilling: 0.0001
training loss: tensor(0.4676) feature loss: tensor(0.1942)
Local adapation with distilling: 0.0001
training loss: tensor(0.5404) feature loss: tensor(0.2071)
         GM acc on global data: 0.6123 length of data: 10000
-------------Round number:  80  -------------
selected users: [37, 65, 95, 53, 66, 30, 73, 85, 45, 36]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 509
Local adapation with distilling: 0.0001
training loss: tensor(0.3923) feature loss: tensor(0.1527)
Local adapation with distilling: 0.0001
training loss: tensor(0.4762) feature loss: tensor(0.1443)
Local adapation with distilling: 0.0001
training loss: tensor(0.3749) feature loss: tensor(0.1492)
Local adapation with distilling: 0.0001
training loss: tensor(0.3896) feature loss: tensor(0.1490)
Local adapation with distilling: 0.0001
training loss: tensor(0.5292) feature loss: tensor(0.1454)
Local adapation with distilling: 0.0001
training loss: tensor(0.4042) feature loss: tensor(0.1437)
Local adapation with distilling: 0.0001
training loss: tensor(0.3986) feature loss: tensor(0.1429)
Local adapation with distilling: 0.0001
training loss: tensor(0.3799) feature loss: tensor(0.1438)
Local adapation with distilling: 0.0001
training loss: tensor(0.3812) feature loss: tensor(0.1474)
Local adapation with distilling: 0.0001
training loss: tensor(0.3723) feature loss: tensor(0.1542)
         GM acc on global data: 0.6149 length of data: 10000
-------------Round number:  81  -------------
selected users: [73, 89, 41, 78, 51, 21, 30, 69, 8, 5]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([485, 16, 32, 32]) torch.Size([485])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.3361) feature loss: tensor(0.1579)
Local adapation with distilling: 0.0001
training loss: tensor(0.4040) feature loss: tensor(0.1590)
Local adapation with distilling: 0.0001
training loss: tensor(0.3920) feature loss: tensor(0.1632)
Local adapation with distilling: 0.0001
training loss: tensor(0.4132) feature loss: tensor(0.1734)
Local adapation with distilling: 0.0001
training loss: tensor(0.4718) feature loss: tensor(0.1585)
Local adapation with distilling: 0.0001
training loss: tensor(0.5004) feature loss: tensor(0.1610)
Local adapation with distilling: 0.0001
training loss: tensor(0.3849) feature loss: tensor(0.1581)
Local adapation with distilling: 0.0001
training loss: tensor(0.3943) feature loss: tensor(0.1541)
Local adapation with distilling: 0.0001
training loss: tensor(0.4123) feature loss: tensor(0.1613)
Local adapation with distilling: 0.0001
training loss: tensor(0.3859) feature loss: tensor(0.1590)
         GM acc on global data: 0.6074 length of data: 10000
-------------Round number:  82  -------------
selected users: [72, 33, 58, 2, 55, 84, 54, 75, 28, 40]
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 496
Local adapation with distilling: 0.0001
training loss: tensor(0.3814) feature loss: tensor(0.1440)
Local adapation with distilling: 0.0001
training loss: tensor(0.3781) feature loss: tensor(0.1441)
Local adapation with distilling: 0.0001
training loss: tensor(0.4037) feature loss: tensor(0.1482)
Local adapation with distilling: 0.0001
training loss: tensor(0.3676) feature loss: tensor(0.1556)
Local adapation with distilling: 0.0001
training loss: tensor(0.4194) feature loss: tensor(0.1465)
Local adapation with distilling: 0.0001
training loss: tensor(0.4220) feature loss: tensor(0.1450)
Local adapation with distilling: 0.0001
training loss: tensor(0.6164) feature loss: tensor(0.1437)
Local adapation with distilling: 0.0001
training loss: tensor(0.4402) feature loss: tensor(0.1433)
Local adapation with distilling: 0.0001
training loss: tensor(0.5390) feature loss: tensor(0.1453)
Local adapation with distilling: 0.0001
training loss: tensor(0.4228) feature loss: tensor(0.1422)
         GM acc on global data: 0.6016 length of data: 10000
-------------Round number:  83  -------------
selected users: [6, 65, 95, 84, 61, 12, 30, 69, 35, 1]
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 498
Local adapation with distilling: 0.0001
training loss: tensor(0.5539) feature loss: tensor(0.1794)
Local adapation with distilling: 0.0001
training loss: tensor(0.4631) feature loss: tensor(0.1739)
Local adapation with distilling: 0.0001
training loss: tensor(0.4077) feature loss: tensor(0.1753)
Local adapation with distilling: 0.0001
training loss: tensor(0.4654) feature loss: tensor(0.1929)
Local adapation with distilling: 0.0001
training loss: tensor(0.4890) feature loss: tensor(0.1686)
Local adapation with distilling: 0.0001
training loss: tensor(0.5170) feature loss: tensor(0.1702)
Local adapation with distilling: 0.0001
training loss: tensor(0.4025) feature loss: tensor(0.1724)
Local adapation with distilling: 0.0001
training loss: tensor(0.4209) feature loss: tensor(0.1737)
Local adapation with distilling: 0.0001
training loss: tensor(0.6035) feature loss: tensor(0.1656)
Local adapation with distilling: 0.0001
training loss: tensor(0.5767) feature loss: tensor(0.1725)
         GM acc on global data: 0.6006 length of data: 10000
-------------Round number:  84  -------------
selected users: [94, 55, 80, 1, 90, 11, 32, 8, 6, 82]
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 493
Local adapation with distilling: 0.0001
training loss: tensor(0.4874) feature loss: tensor(0.1879)
Local adapation with distilling: 0.0001
training loss: tensor(0.4346) feature loss: tensor(0.1910)
Local adapation with distilling: 0.0001
training loss: tensor(0.4260) feature loss: tensor(0.1866)
Local adapation with distilling: 0.0001
training loss: tensor(0.4611) feature loss: tensor(0.1902)
Local adapation with distilling: 0.0001
training loss: tensor(0.5368) feature loss: tensor(0.1929)
Local adapation with distilling: 0.0001
training loss: tensor(0.5039) feature loss: tensor(0.1922)
Local adapation with distilling: 0.0001
training loss: tensor(0.5559) feature loss: tensor(0.1889)
Local adapation with distilling: 0.0001
training loss: tensor(0.4630) feature loss: tensor(0.1874)
Local adapation with distilling: 0.0001
training loss: tensor(0.5191) feature loss: tensor(0.1914)
Local adapation with distilling: 0.0001
training loss: tensor(0.5042) feature loss: tensor(0.1892)
         GM acc on global data: 0.6059 length of data: 10000
-------------Round number:  85  -------------
selected users: [81, 25, 40, 87, 41, 23, 10, 89, 50, 54]
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([460, 16, 32, 32]) torch.Size([460])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 491
Local adapation with distilling: 0.0001
training loss: tensor(1.5479) feature loss: tensor(0.1681)
Local adapation with distilling: 0.0001
training loss: tensor(0.4537) feature loss: tensor(0.1650)
Local adapation with distilling: 0.0001
training loss: tensor(0.4094) feature loss: tensor(0.1627)
Local adapation with distilling: 0.0001
training loss: tensor(0.4966) feature loss: tensor(0.1682)
Local adapation with distilling: 0.0001
training loss: tensor(0.3830) feature loss: tensor(0.1876)
Local adapation with distilling: 0.0001
training loss: tensor(0.4694) feature loss: tensor(0.1625)
Local adapation with distilling: 0.0001
training loss: tensor(0.4884) feature loss: tensor(0.1663)
Local adapation with distilling: 0.0001
training loss: tensor(0.4013) feature loss: tensor(0.1687)
Local adapation with distilling: 0.0001
training loss: tensor(0.4056) feature loss: tensor(0.1673)
Local adapation with distilling: 0.0001
training loss: tensor(0.5418) feature loss: tensor(0.1628)
         GM acc on global data: 0.6079 length of data: 10000
-------------Round number:  86  -------------
selected users: [69, 74, 34, 68, 42, 0, 32, 88, 8, 3]
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([517, 16, 32, 32]) torch.Size([517])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 489
Local adapation with distilling: 0.0001
training loss: tensor(0.3770) feature loss: tensor(0.1617)
Local adapation with distilling: 0.0001
training loss: tensor(0.3981) feature loss: tensor(0.1572)
Local adapation with distilling: 0.0001
training loss: tensor(0.4235) feature loss: tensor(0.1613)
Local adapation with distilling: 0.0001
training loss: tensor(0.3862) feature loss: tensor(0.1582)
Local adapation with distilling: 0.0001
training loss: tensor(0.4382) feature loss: tensor(0.1677)
Local adapation with distilling: 0.0001
training loss: tensor(0.3912) feature loss: tensor(0.1517)
Local adapation with distilling: 0.0001
training loss: tensor(0.4422) feature loss: tensor(0.1563)
Local adapation with distilling: 0.0001
training loss: tensor(0.4109) feature loss: tensor(0.1611)
Local adapation with distilling: 0.0001
training loss: tensor(0.3663) feature loss: tensor(0.1622)
Local adapation with distilling: 0.0001
training loss: tensor(0.4748) feature loss: tensor(0.1530)
         GM acc on global data: 0.6149 length of data: 10000
-------------Round number:  87  -------------
selected users: [16, 81, 85, 32, 39, 25, 26, 29, 65, 7]
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 506
Local adapation with distilling: 0.0001
training loss: tensor(0.4807) feature loss: tensor(0.1633)
Local adapation with distilling: 0.0001
training loss: tensor(2.0237) feature loss: tensor(0.1709)
Local adapation with distilling: 0.0001
training loss: tensor(0.4084) feature loss: tensor(0.1663)
Local adapation with distilling: 0.0001
training loss: tensor(0.4476) feature loss: tensor(0.1676)
Local adapation with distilling: 0.0001
training loss: tensor(0.6134) feature loss: tensor(0.1774)
Local adapation with distilling: 0.0001
training loss: tensor(0.4556) feature loss: tensor(0.1684)
Local adapation with distilling: 0.0001
training loss: tensor(0.4461) feature loss: tensor(0.1699)
Local adapation with distilling: 0.0001
training loss: tensor(0.4004) feature loss: tensor(0.1723)
Local adapation with distilling: 0.0001
training loss: tensor(0.4495) feature loss: tensor(0.1755)
Local adapation with distilling: 0.0001
training loss: tensor(0.4949) feature loss: tensor(0.1635)
         GM acc on global data: 0.6151 length of data: 10000
-------------Round number:  88  -------------
selected users: [95, 53, 43, 84, 2, 74, 55, 31, 54, 97]
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.3981) feature loss: tensor(0.1946)
Local adapation with distilling: 0.0001
training loss: tensor(0.4134) feature loss: tensor(0.1898)
Local adapation with distilling: 0.0001
training loss: tensor(0.4317) feature loss: tensor(0.2020)
Local adapation with distilling: 0.0001
training loss: tensor(0.4463) feature loss: tensor(0.1985)
Local adapation with distilling: 0.0001
training loss: tensor(0.4326) feature loss: tensor(0.1872)
Local adapation with distilling: 0.0001
training loss: tensor(0.4127) feature loss: tensor(0.2184)
Local adapation with distilling: 0.0001
training loss: tensor(0.4159) feature loss: tensor(0.1878)
Local adapation with distilling: 0.0001
training loss: tensor(0.5964) feature loss: tensor(0.2112)
Local adapation with distilling: 0.0001
training loss: tensor(0.5337) feature loss: tensor(0.1885)
Local adapation with distilling: 0.0001
training loss: tensor(0.4961) feature loss: tensor(0.1823)
         GM acc on global data: 0.614 length of data: 10000
-------------Round number:  89  -------------
selected users: [65, 21, 87, 6, 46, 74, 44, 60, 72, 5]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([519, 16, 32, 32]) torch.Size([519])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([576, 16, 32, 32]) torch.Size([576])
random features: torch.Size([57, 16, 32, 32]) torch.Size([57])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 497
Local adapation with distilling: 0.0001
training loss: tensor(0.3819) feature loss: tensor(0.1630)
Local adapation with distilling: 0.0001
training loss: tensor(0.4322) feature loss: tensor(0.1600)
Local adapation with distilling: 0.0001
training loss: tensor(0.4483) feature loss: tensor(0.1589)
Local adapation with distilling: 0.0001
training loss: tensor(0.4384) feature loss: tensor(0.1613)
Local adapation with distilling: 0.0001
training loss: tensor(0.4452) feature loss: tensor(0.1665)
Local adapation with distilling: 0.0001
training loss: tensor(0.3579) feature loss: tensor(0.1633)
Local adapation with distilling: 0.0001
training loss: tensor(0.4549) feature loss: tensor(0.1572)
Local adapation with distilling: 0.0001
training loss: tensor(0.4098) feature loss: tensor(0.1639)
Local adapation with distilling: 0.0001
training loss: tensor(0.3992) feature loss: tensor(0.1626)
Local adapation with distilling: 0.0001
training loss: tensor(0.4189) feature loss: tensor(0.1691)
         GM acc on global data: 0.6099 length of data: 10000
-------------Round number:  90  -------------
selected users: [25, 85, 96, 89, 65, 94, 5, 35, 36, 92]
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
all data: 504
Local adapation with distilling: 0.0001
training loss: tensor(0.3896) feature loss: tensor(0.1506)
Local adapation with distilling: 0.0001
training loss: tensor(0.3489) feature loss: tensor(0.1475)
Local adapation with distilling: 0.0001
training loss: tensor(0.9565) feature loss: tensor(0.1499)
Local adapation with distilling: 0.0001
training loss: tensor(0.3731) feature loss: tensor(0.1471)
Local adapation with distilling: 0.0001
training loss: tensor(0.3312) feature loss: tensor(0.1487)
Local adapation with distilling: 0.0001
training loss: tensor(0.4031) feature loss: tensor(0.1483)
Local adapation with distilling: 0.0001
training loss: tensor(0.3552) feature loss: tensor(0.1449)
Local adapation with distilling: 0.0001
training loss: tensor(0.5134) feature loss: tensor(0.1408)
Local adapation with distilling: 0.0001
training loss: tensor(0.3614) feature loss: tensor(0.1488)
Local adapation with distilling: 0.0001
training loss: tensor(0.4439) feature loss: tensor(0.1414)
         GM acc on global data: 0.6075 length of data: 10000
-------------Round number:  91  -------------
selected users: [75, 25, 3, 52, 78, 54, 59, 26, 62, 97]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([523, 16, 32, 32]) torch.Size([523])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([518, 16, 32, 32]) torch.Size([518])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([465, 16, 32, 32]) torch.Size([465])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 502
Local adapation with distilling: 0.0001
training loss: tensor(0.4425) feature loss: tensor(0.1618)
Local adapation with distilling: 0.0001
training loss: tensor(0.3862) feature loss: tensor(0.1646)
Local adapation with distilling: 0.0001
training loss: tensor(0.4847) feature loss: tensor(0.1761)
Local adapation with distilling: 0.0001
training loss: tensor(0.7891) feature loss: tensor(0.1663)
Local adapation with distilling: 0.0001
training loss: tensor(0.4533) feature loss: tensor(0.1620)
Local adapation with distilling: 0.0001
training loss: tensor(0.4585) feature loss: tensor(0.1949)
Local adapation with distilling: 0.0001
training loss: tensor(0.8571) feature loss: tensor(0.1718)
Local adapation with distilling: 0.0001
training loss: tensor(0.4007) feature loss: tensor(0.1649)
Local adapation with distilling: 0.0001
training loss: tensor(0.5364) feature loss: tensor(0.1593)
Local adapation with distilling: 0.0001
training loss: tensor(0.4544) feature loss: tensor(0.1605)
         GM acc on global data: 0.6026 length of data: 10000
-------------Round number:  92  -------------
selected users: [25, 99, 73, 61, 66, 36, 23, 83, 77, 6]
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([505, 16, 32, 32]) torch.Size([505])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
all data: 499
Local adapation with distilling: 0.0001
training loss: tensor(0.3470) feature loss: tensor(0.1521)
Local adapation with distilling: 0.0001
training loss: tensor(0.4873) feature loss: tensor(0.1686)
Local adapation with distilling: 0.0001
training loss: tensor(0.4014) feature loss: tensor(0.1613)
Local adapation with distilling: 0.0001
training loss: tensor(0.4371) feature loss: tensor(0.1485)
Local adapation with distilling: 0.0001
training loss: tensor(0.4701) feature loss: tensor(0.1591)
Local adapation with distilling: 0.0001
training loss: tensor(0.3654) feature loss: tensor(0.1747)
Local adapation with distilling: 0.0001
training loss: tensor(0.4617) feature loss: tensor(0.1510)
Local adapation with distilling: 0.0001
training loss: tensor(0.4556) feature loss: tensor(0.1463)
Local adapation with distilling: 0.0001
training loss: tensor(0.6181) feature loss: tensor(0.1489)
Local adapation with distilling: 0.0001
training loss: tensor(0.4345) feature loss: tensor(0.1536)
         GM acc on global data: 0.6041 length of data: 10000
-------------Round number:  93  -------------
selected users: [75, 82, 56, 27, 42, 35, 1, 97, 66, 61]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([464, 16, 32, 32]) torch.Size([464])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([544, 16, 32, 32]) torch.Size([544])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 500
Local adapation with distilling: 0.0001
training loss: tensor(0.4333) feature loss: tensor(0.1903)
Local adapation with distilling: 0.0001
training loss: tensor(0.4444) feature loss: tensor(0.1798)
Local adapation with distilling: 0.0001
training loss: tensor(0.4600) feature loss: tensor(0.1821)
Local adapation with distilling: 0.0001
training loss: tensor(0.5427) feature loss: tensor(0.1814)
Local adapation with distilling: 0.0001
training loss: tensor(0.4718) feature loss: tensor(0.2128)
Local adapation with distilling: 0.0001
training loss: tensor(0.4988) feature loss: tensor(0.1774)
Local adapation with distilling: 0.0001
training loss: tensor(0.4474) feature loss: tensor(0.2015)
Local adapation with distilling: 0.0001
training loss: tensor(0.4287) feature loss: tensor(0.1786)
Local adapation with distilling: 0.0001
training loss: tensor(0.4658) feature loss: tensor(0.1810)
Local adapation with distilling: 0.0001
training loss: tensor(0.4488) feature loss: tensor(0.1945)
         GM acc on global data: 0.6105 length of data: 10000
-------------Round number:  94  -------------
selected users: [13, 73, 5, 18, 99, 48, 23, 4, 35, 17]
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([510, 16, 32, 32]) torch.Size([510])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([496, 16, 32, 32]) torch.Size([496])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([491, 16, 32, 32]) torch.Size([491])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
all data: 499
Local adapation with distilling: 0.0001
training loss: tensor(0.4699) feature loss: tensor(0.1497)
Local adapation with distilling: 0.0001
training loss: tensor(0.3506) feature loss: tensor(0.1588)
Local adapation with distilling: 0.0001
training loss: tensor(0.3665) feature loss: tensor(0.1523)
Local adapation with distilling: 0.0001
training loss: tensor(0.6448) feature loss: tensor(0.1450)
Local adapation with distilling: 0.0001
training loss: tensor(0.4540) feature loss: tensor(0.1651)
Local adapation with distilling: 0.0001
training loss: tensor(0.5178) feature loss: tensor(0.1470)
Local adapation with distilling: 0.0001
training loss: tensor(0.4178) feature loss: tensor(0.1804)
Local adapation with distilling: 0.0001
training loss: tensor(0.4366) feature loss: tensor(0.1522)
Local adapation with distilling: 0.0001
training loss: tensor(0.3958) feature loss: tensor(0.1553)
Local adapation with distilling: 0.0001
training loss: tensor(0.3856) feature loss: tensor(0.1509)
         GM acc on global data: 0.6078 length of data: 10000
-------------Round number:  95  -------------
selected users: [88, 9, 1, 60, 95, 26, 45, 71, 44, 21]
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([520, 16, 32, 32]) torch.Size([520])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([481, 16, 32, 32]) torch.Size([481])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([507, 16, 32, 32]) torch.Size([507])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([470, 16, 32, 32]) torch.Size([470])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
all data: 495
Local adapation with distilling: 0.0001
training loss: tensor(0.4151) feature loss: tensor(0.1991)
Local adapation with distilling: 0.0001
training loss: tensor(1.0720) feature loss: tensor(0.1832)
Local adapation with distilling: 0.0001
training loss: tensor(0.4231) feature loss: tensor(0.1914)
Local adapation with distilling: 0.0001
training loss: tensor(0.4306) feature loss: tensor(0.2194)
Local adapation with distilling: 0.0001
training loss: tensor(0.3609) feature loss: tensor(0.1805)
Local adapation with distilling: 0.0001
training loss: tensor(0.3967) feature loss: tensor(0.1842)
Local adapation with distilling: 0.0001
training loss: tensor(0.4038) feature loss: tensor(0.1997)
Local adapation with distilling: 0.0001
training loss: tensor(0.3903) feature loss: tensor(0.2325)
Local adapation with distilling: 0.0001
training loss: tensor(0.4397) feature loss: tensor(0.1927)
Local adapation with distilling: 0.0001
training loss: tensor(0.4201) feature loss: tensor(0.1803)
         GM acc on global data: 0.6045 length of data: 10000
-------------Round number:  96  -------------
selected users: [41, 28, 52, 15, 87, 17, 75, 42, 45, 49]
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([514, 16, 32, 32]) torch.Size([514])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([476, 16, 32, 32]) torch.Size([476])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([538, 16, 32, 32]) torch.Size([538])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([504, 16, 32, 32]) torch.Size([504])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([495, 16, 32, 32]) torch.Size([495])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 494
Local adapation with distilling: 0.0001
training loss: tensor(0.3691) feature loss: tensor(0.1754)
Local adapation with distilling: 0.0001
training loss: tensor(0.6630) feature loss: tensor(0.1705)
Local adapation with distilling: 0.0001
training loss: tensor(0.9038) feature loss: tensor(0.1862)
Local adapation with distilling: 0.0001
training loss: tensor(0.7210) feature loss: tensor(0.1705)
Local adapation with distilling: 0.0001
training loss: tensor(0.5001) feature loss: tensor(0.1836)
Local adapation with distilling: 0.0001
training loss: tensor(0.3727) feature loss: tensor(0.1776)
Local adapation with distilling: 0.0001
training loss: tensor(0.3747) feature loss: tensor(0.1731)
Local adapation with distilling: 0.0001
training loss: tensor(0.4058) feature loss: tensor(0.1739)
Local adapation with distilling: 0.0001
training loss: tensor(0.3661) feature loss: tensor(0.1999)
Local adapation with distilling: 0.0001
training loss: tensor(0.4147) feature loss: tensor(0.1692)
         GM acc on global data: 0.6089 length of data: 10000
-------------Round number:  97  -------------
selected users: [31, 43, 64, 56, 85, 2, 70, 21, 34, 50]
K 2 torch.Size([486, 16, 32, 32]) torch.Size([486])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([492, 16, 32, 32]) torch.Size([492])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([552, 16, 32, 32]) torch.Size([552])
random features: torch.Size([55, 16, 32, 32]) torch.Size([55])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([482, 16, 32, 32]) torch.Size([482])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([483, 16, 32, 32]) torch.Size([483])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([471, 16, 32, 32]) torch.Size([471])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([493, 16, 32, 32]) torch.Size([493])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
all data: 490
Local adapation with distilling: 0.0001
training loss: tensor(0.5316) feature loss: tensor(0.1606)
Local adapation with distilling: 0.0001
training loss: tensor(0.4162) feature loss: tensor(0.1641)
Local adapation with distilling: 0.0001
training loss: tensor(0.4888) feature loss: tensor(0.1604)
Local adapation with distilling: 0.0001
training loss: tensor(0.4044) feature loss: tensor(0.1626)
Local adapation with distilling: 0.0001
training loss: tensor(0.3735) feature loss: tensor(0.1593)
Local adapation with distilling: 0.0001
training loss: tensor(0.3836) feature loss: tensor(0.1594)
Local adapation with distilling: 0.0001
training loss: tensor(0.3925) feature loss: tensor(0.1742)
Local adapation with distilling: 0.0001
training loss: tensor(0.3985) feature loss: tensor(0.1644)
Local adapation with distilling: 0.0001
training loss: tensor(0.4307) feature loss: tensor(0.1887)
Local adapation with distilling: 0.0001
training loss: tensor(0.4566) feature loss: tensor(0.1829)
         GM acc on global data: 0.6078 length of data: 10000
-------------Round number:  98  -------------
selected users: [11, 48, 97, 14, 22, 36, 99, 47, 33, 81]
K 2 torch.Size([534, 16, 32, 32]) torch.Size([534])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([478, 16, 32, 32]) torch.Size([478])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([508, 16, 32, 32]) torch.Size([508])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
K 2 torch.Size([469, 16, 32, 32]) torch.Size([469])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([468, 16, 32, 32]) torch.Size([468])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([487, 16, 32, 32]) torch.Size([487])
random features: torch.Size([48, 16, 32, 32]) torch.Size([48])
K 2 torch.Size([513, 16, 32, 32]) torch.Size([513])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
all data: 488
Local adapation with distilling: 0.0001
training loss: tensor(0.4468) feature loss: tensor(0.1692)
Local adapation with distilling: 0.0001
training loss: tensor(0.4424) feature loss: tensor(0.1660)
Local adapation with distilling: 0.0001
training loss: tensor(0.4075) feature loss: tensor(0.1665)
Local adapation with distilling: 0.0001
training loss: tensor(0.4326) feature loss: tensor(0.1627)
Local adapation with distilling: 0.0001
training loss: tensor(1.0286) feature loss: tensor(0.1684)
Local adapation with distilling: 0.0001
training loss: tensor(0.3577) feature loss: tensor(0.1674)
Local adapation with distilling: 0.0001
training loss: tensor(0.3931) feature loss: tensor(0.1657)
Local adapation with distilling: 0.0001
training loss: tensor(0.4363) feature loss: tensor(0.1633)
Local adapation with distilling: 0.0001
training loss: tensor(0.3774) feature loss: tensor(0.1644)
Local adapation with distilling: 0.0001
training loss: tensor(1.8599) feature loss: tensor(0.1756)
         GM acc on global data: 0.6214 length of data: 10000
-------------Round number:  99  -------------
selected users: [14, 34, 30, 78, 16, 15, 91, 38, 10, 85]
K 2 torch.Size([498, 16, 32, 32]) torch.Size([498])
random features: torch.Size([49, 16, 32, 32]) torch.Size([49])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([475, 16, 32, 32]) torch.Size([475])
random features: torch.Size([47, 16, 32, 32]) torch.Size([47])
K 2 torch.Size([524, 16, 32, 32]) torch.Size([524])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([531, 16, 32, 32]) torch.Size([531])
random features: torch.Size([53, 16, 32, 32]) torch.Size([53])
K 2 torch.Size([515, 16, 32, 32]) torch.Size([515])
random features: torch.Size([51, 16, 32, 32]) torch.Size([51])
K 2 torch.Size([529, 16, 32, 32]) torch.Size([529])
random features: torch.Size([52, 16, 32, 32]) torch.Size([52])
K 2 torch.Size([546, 16, 32, 32]) torch.Size([546])
random features: torch.Size([54, 16, 32, 32]) torch.Size([54])
K 2 torch.Size([466, 16, 32, 32]) torch.Size([466])
random features: torch.Size([46, 16, 32, 32]) torch.Size([46])
K 2 torch.Size([502, 16, 32, 32]) torch.Size([502])
random features: torch.Size([50, 16, 32, 32]) torch.Size([50])
all data: 501
Local adapation with distilling: 0.0001
training loss: tensor(0.3612) feature loss: tensor(0.1412)
Local adapation with distilling: 0.0001
training loss: tensor(0.3706) feature loss: tensor(0.1430)
Local adapation with distilling: 0.0001
training loss: tensor(0.3951) feature loss: tensor(0.1422)
Local adapation with distilling: 0.0001
training loss: tensor(0.4011) feature loss: tensor(0.1456)
Local adapation with distilling: 0.0001
training loss: tensor(0.4569) feature loss: tensor(0.1416)
Local adapation with distilling: 0.0001
training loss: tensor(0.7382) feature loss: tensor(0.1476)
Local adapation with distilling: 0.0001
training loss: tensor(0.4098) feature loss: tensor(0.1443)
Local adapation with distilling: 0.0001
training loss: tensor(0.3481) feature loss: tensor(0.1471)
Local adapation with distilling: 0.0001
training loss: tensor(0.4296) feature loss: tensor(0.1433)
Local adapation with distilling: 0.0001
training loss: tensor(0.3390) feature loss: tensor(0.1448)
         GM acc on global data: 0.6216 length of data: 10000
