nohup: ignoring input
================================================================================
Summary of training process:
Dataset                : Cifar10
Batch size             : 64
Learing rate           : 0.001
Number of total clients: 100
Split method           : quantity
Split parameter        : 3.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 4
Feature percentage     : 0.2
Local training loss    : CE_CE_KL
Loss of beta           : 1.0
Algorithm              : FedFea
Modelname              : MOBNET
Mode                   : training
Seed                   : 0
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,0.298,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.327,0.00,496
Client   1,0.00,0.321,0.00,0.00,0.00,0.358,0.00,0.00,0.00,0.321,520
Client   2,0.307,0.346,0.346,0.00,0.00,0.00,0.00,0.00,0.00,0.00,482
Client   3,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client   4,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client   5,0.00,0.00,0.327,0.00,0.308,0.365,0.00,0.00,0.00,0.00,510
Client   6,0.00,0.00,0.319,0.00,0.300,0.00,0.382,0.00,0.00,0.00,524
Client   7,0.00,0.00,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.351,476
Client   8,0.00,0.347,0.00,0.00,0.00,0.00,0.00,0.316,0.337,0.00,481
Client   9,0.286,0.00,0.00,0.00,0.00,0.00,0.389,0.00,0.00,0.325,514
Client  10,0.315,0.00,0.00,0.00,0.00,0.00,0.00,0.326,0.00,0.358,466
Client  11,0.00,0.313,0.00,0.00,0.00,0.00,0.375,0.00,0.00,0.313,534
Client  12,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  13,0.00,0.329,0.00,0.352,0.00,0.00,0.00,0.00,0.319,0.00,508
Client  14,0.00,0.00,0.00,0.359,0.315,0.00,0.00,0.00,0.325,0.00,498
Client  15,0.00,0.00,0.00,0.00,0.00,0.361,0.00,0.00,0.315,0.324,515
Client  16,0.00,0.00,0.00,0.337,0.00,0.00,0.377,0.286,0.00,0.00,531
Client  17,0.00,0.00,0.00,0.00,0.00,0.346,0.372,0.283,0.00,0.00,538
Client  18,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.00,0.327,0.337,496
Client  19,0.00,0.00,0.00,0.356,0.312,0.00,0.00,0.00,0.00,0.332,503
Client  20,0.309,0.351,0.00,0.00,0.00,0.00,0.00,0.00,0.340,0.00,476
Client  21,0.312,0.355,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.00,471
Client  22,0.00,0.00,0.326,0.349,0.00,0.00,0.00,0.00,0.00,0.326,513
Client  23,0.298,0.00,0.339,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  24,0.00,0.00,0.340,0.00,0.320,0.00,0.00,0.00,0.00,0.340,491
Client  25,0.00,0.00,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.331,504
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,0.378,0.00,0.306,0.316,529
Client  27,0.00,0.00,0.00,0.368,0.320,0.00,0.00,0.312,0.00,0.00,487
Client  28,0.00,0.00,0.00,0.00,0.00,0.360,0.00,0.00,0.315,0.325,514
Client  29,0.00,0.00,0.00,0.328,0.00,0.00,0.366,0.00,0.00,0.306,546
Client  30,0.309,0.00,0.352,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  31,0.00,0.344,0.00,0.00,0.00,0.00,0.00,0.313,0.00,0.344,486
Client  32,0.00,0.00,0.335,0.359,0.00,0.00,0.00,0.305,0.00,0.00,498
Client  33,0.302,0.00,0.00,0.368,0.00,0.00,0.00,0.00,0.331,0.00,487
Client  34,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  35,0.00,0.315,0.00,0.337,0.00,0.348,0.00,0.00,0.00,0.00,531
Client  36,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  37,0.00,0.00,0.00,0.00,0.307,0.00,0.394,0.299,0.00,0.00,508
Client  38,0.00,0.00,0.00,0.00,0.00,0.339,0.366,0.00,0.295,0.00,546
Client  39,0.00,0.00,0.322,0.00,0.00,0.356,0.00,0.00,0.00,0.322,519
Client  40,0.320,0.00,0.00,0.00,0.00,0.00,0.00,0.330,0.350,0.00,460
Client  41,0.00,0.352,0.00,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  42,0.00,0.00,0.352,0.00,0.328,0.00,0.00,0.320,0.00,0.00,475
Client  43,0.298,0.00,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.339,493
Client  44,0.313,0.00,0.355,0.00,0.332,0.00,0.00,0.00,0.00,0.00,470
Client  45,0.00,0.331,0.00,0.00,0.00,0.367,0.00,0.302,0.00,0.00,504
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,0.385,0.293,0.00,0.322,519
Client  47,0.00,0.00,0.00,0.00,0.333,0.00,0.00,0.323,0.344,0.00,468
Client  48,0.309,0.352,0.00,0.00,0.00,0.00,0.00,0.00,0.339,0.00,475
Client  49,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.325,0.337,495
Client  50,0.298,0.339,0.00,0.363,0.00,0.00,0.00,0.00,0.00,0.00,493
Client  51,0.00,0.344,0.344,0.00,0.00,0.00,0.00,0.311,0.00,0.00,485
Client  52,0.286,0.00,0.325,0.00,0.00,0.00,0.389,0.00,0.00,0.00,514
Client  53,0.00,0.00,0.326,0.350,0.00,0.00,0.00,0.00,0.00,0.324,512
Client  54,0.00,0.00,0.319,0.00,0.298,0.00,0.382,0.00,0.00,0.00,523
Client  55,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  56,0.00,0.303,0.00,0.00,0.00,0.335,0.362,0.00,0.00,0.00,552
Client  57,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  58,0.289,0.00,0.00,0.00,0.00,0.00,0.394,0.00,0.317,0.00,508
Client  59,0.00,0.322,0.00,0.00,0.00,0.357,0.00,0.00,0.00,0.320,518
Client  60,0.306,0.347,0.347,0.00,0.00,0.00,0.00,0.00,0.00,0.00,481
Client  61,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  62,0.316,0.00,0.359,0.00,0.00,0.00,0.00,0.325,0.00,0.00,465
Client  63,0.00,0.00,0.00,0.354,0.00,0.00,0.00,0.00,0.318,0.328,506
Client  64,0.00,0.00,0.00,0.00,0.317,0.376,0.00,0.307,0.00,0.00,492
Client  65,0.295,0.00,0.00,0.00,0.00,0.371,0.00,0.00,0.00,0.333,498
Client  66,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  67,0.00,0.351,0.00,0.00,0.330,0.00,0.00,0.319,0.00,0.00,473
Client  68,0.00,0.00,0.00,0.00,0.302,0.00,0.387,0.00,0.311,0.00,517
Client  69,0.00,0.00,0.337,0.00,0.00,0.00,0.00,0.00,0.327,0.337,493
Client  70,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  71,0.00,0.327,0.00,0.00,0.308,0.365,0.00,0.00,0.00,0.00,507
Client  72,0.00,0.00,0.324,0.00,0.00,0.361,0.00,0.00,0.314,0.00,512
Client  73,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  74,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  75,0.304,0.00,0.00,0.00,0.00,0.383,0.00,0.313,0.00,0.00,483
Client  76,0.00,0.00,0.00,0.333,0.292,0.00,0.375,0.00,0.00,0.00,534
Client  77,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  78,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  79,0.00,0.333,0.333,0.00,0.00,0.00,0.00,0.00,0.00,0.333,498
Client  80,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  81,0.287,0.324,0.00,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  82,0.317,0.00,0.358,0.00,0.00,0.00,0.00,0.325,0.00,0.00,464
Client  83,0.00,0.00,0.329,0.352,0.00,0.00,0.00,0.00,0.319,0.00,505
Client  84,0.306,0.00,0.00,0.370,0.324,0.00,0.00,0.00,0.00,0.00,481
Client  85,0.00,0.00,0.00,0.00,0.311,0.369,0.00,0.00,0.321,0.00,502
Client  86,0.00,0.00,0.312,0.00,0.00,0.00,0.376,0.00,0.00,0.312,532
Client  87,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  88,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  89,0.00,0.00,0.00,0.327,0.00,0.00,0.368,0.00,0.00,0.305,544
Client  90,0.309,0.00,0.00,0.374,0.00,0.00,0.00,0.317,0.00,0.00,476
Client  91,0.00,0.314,0.00,0.336,0.00,0.350,0.00,0.00,0.00,0.00,529
Client  92,0.313,0.00,0.354,0.00,0.333,0.00,0.00,0.00,0.00,0.00,469
Client  93,0.00,0.00,0.00,0.340,0.00,0.353,0.00,0.00,0.307,0.00,524
Client  94,0.00,0.00,0.00,0.00,0.308,0.00,0.394,0.298,0.00,0.00,507
Client  95,0.00,0.331,0.00,0.00,0.00,0.369,0.00,0.301,0.00,0.00,502
Client  96,0.287,0.00,0.324,0.00,0.00,0.00,0.390,0.00,0.00,0.00,513
Client  97,0.00,0.00,0.347,0.00,0.00,0.00,0.00,0.316,0.337,0.00,478
Client  98,0.00,0.344,0.00,0.00,0.323,0.00,0.00,0.00,0.333,0.00,483
Client  99,0.313,0.00,0.00,0.00,0.333,0.00,0.00,0.00,0.00,0.354,469
0 [0 5 8] [0 5 8] [1 2 3 4 6 7 9]
0 training: Counter({5: 186, 8: 162, 0: 148}) testing iid: Counter({8: 1000, 0: 1000, 5: 1000})
1 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
1 training: Counter({5: 186, 1: 167, 9: 167}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
2 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
2 training: Counter({1: 167, 2: 167, 0: 148}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
3 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
3 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
4 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
4 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
5 [2 4 5] [2 4 5] [0 1 3 6 7 8 9]
5 training: Counter({5: 186, 2: 167, 4: 157}) testing iid: Counter({5: 1000, 4: 1000, 2: 1000})
6 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
6 training: Counter({6: 200, 2: 167, 4: 157}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
7 [4 7 9] [4 7 9] [0 1 2 3 5 6 8]
7 training: Counter({9: 167, 4: 157, 7: 152}) testing iid: Counter({9: 1000, 7: 1000, 4: 1000})
8 [1 7 8] [1 7 8] [0 2 3 4 5 6 9]
8 training: Counter({1: 167, 8: 162, 7: 152}) testing iid: Counter({8: 1000, 1: 1000, 7: 1000})
9 [0 6 9] [0 6 9] [1 2 3 4 5 7 8]
9 training: Counter({6: 200, 9: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 9: 1000})
10 [0 7 9] [0 7 9] [1 2 3 4 5 6 8]
10 training: Counter({9: 167, 7: 152, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 7: 1000})
11 [1 6 9] [1 6 9] [0 2 3 4 5 7 8]
11 training: Counter({6: 200, 1: 167, 9: 167}) testing iid: Counter({6: 1000, 1: 1000, 9: 1000})
12 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
12 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
13 [1 3 8] [1 3 8] [0 2 4 5 6 7 9]
13 training: Counter({3: 179, 1: 167, 8: 162}) testing iid: Counter({3: 1000, 8: 1000, 1: 1000})
14 [3 4 8] [3 4 8] [0 1 2 5 6 7 9]
14 training: Counter({3: 179, 8: 162, 4: 157}) testing iid: Counter({3: 1000, 8: 1000, 4: 1000})
15 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
15 training: Counter({5: 186, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
16 [3 6 7] [3 6 7] [0 1 2 4 5 8 9]
16 training: Counter({6: 200, 3: 179, 7: 152}) testing iid: Counter({3: 1000, 6: 1000, 7: 1000})
17 [5 6 7] [5 6 7] [0 1 2 3 4 8 9]
17 training: Counter({6: 200, 5: 186, 7: 152}) testing iid: Counter({6: 1000, 5: 1000, 7: 1000})
18 [1 8 9] [1 8 9] [0 2 3 4 5 6 7]
18 training: Counter({1: 167, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 1: 1000, 9: 1000})
19 [3 4 9] [3 4 9] [0 1 2 5 6 7 8]
19 training: Counter({3: 179, 9: 167, 4: 157}) testing iid: Counter({3: 1000, 9: 1000, 4: 1000})
20 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
20 training: Counter({1: 167, 8: 162, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
21 [0 1 4] [0 1 4] [2 3 5 6 7 8 9]
21 training: Counter({1: 167, 4: 157, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 4: 1000})
22 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
22 training: Counter({3: 179, 2: 167, 9: 167}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
23 [0 2 3] [0 2 3] [1 4 5 6 7 8 9]
23 training: Counter({3: 179, 2: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 2: 1000})
24 [2 4 9] [2 4 9] [0 1 3 5 6 7 8]
24 training: Counter({2: 167, 9: 167, 4: 157}) testing iid: Counter({9: 1000, 4: 1000, 2: 1000})
25 [5 7 9] [5 7 9] [0 1 2 3 4 6 8]
25 training: Counter({5: 185, 9: 167, 7: 152}) testing iid: Counter({9: 1000, 5: 1000, 7: 1000})
26 [6 8 9] [6 8 9] [0 1 2 3 4 5 7]
26 training: Counter({6: 200, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 6: 1000, 9: 1000})
27 [3 4 7] [3 4 7] [0 1 2 5 6 8 9]
27 training: Counter({3: 179, 4: 156, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 4: 1000})
28 [5 8 9] [5 8 9] [0 1 2 3 4 6 7]
28 training: Counter({5: 185, 9: 167, 8: 162}) testing iid: Counter({8: 1000, 9: 1000, 5: 1000})
29 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
29 training: Counter({6: 200, 3: 179, 9: 167}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
30 [0 2 8] [0 2 8] [1 3 4 5 6 7 9]
30 training: Counter({2: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 2: 1000})
31 [1 7 9] [1 7 9] [0 2 3 4 5 6 8]
31 training: Counter({1: 167, 9: 167, 7: 152}) testing iid: Counter({1: 1000, 9: 1000, 7: 1000})
32 [2 3 7] [2 3 7] [0 1 4 5 6 8 9]
32 training: Counter({3: 179, 2: 167, 7: 152}) testing iid: Counter({3: 1000, 7: 1000, 2: 1000})
33 [0 3 8] [0 3 8] [1 2 4 5 6 7 9]
33 training: Counter({3: 179, 8: 161, 0: 147}) testing iid: Counter({3: 1000, 8: 1000, 0: 1000})
34 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
34 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
35 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
35 training: Counter({5: 185, 3: 179, 1: 167}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
36 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
36 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
37 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
37 training: Counter({6: 200, 4: 156, 7: 152}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
38 [5 6 8] [5 6 8] [0 1 2 3 4 7 9]
38 training: Counter({6: 200, 5: 185, 8: 161}) testing iid: Counter({8: 1000, 6: 1000, 5: 1000})
39 [2 5 9] [2 5 9] [0 1 3 4 6 7 8]
39 training: Counter({5: 185, 2: 167, 9: 167}) testing iid: Counter({9: 1000, 5: 1000, 2: 1000})
40 [0 7 8] [0 7 8] [1 2 3 4 5 6 9]
40 training: Counter({8: 161, 7: 152, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 7: 1000})
41 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
41 training: Counter({1: 167, 4: 156, 7: 152}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
42 [2 4 7] [2 4 7] [0 1 3 5 6 8 9]
42 training: Counter({2: 167, 4: 156, 7: 152}) testing iid: Counter({7: 1000, 4: 1000, 2: 1000})
43 [0 3 9] [0 3 9] [1 2 4 5 6 7 8]
43 training: Counter({3: 179, 9: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 9: 1000})
44 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
44 training: Counter({2: 167, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
45 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
45 training: Counter({5: 185, 1: 167, 7: 152}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
46 [6 7 9] [6 7 9] [0 1 2 3 4 5 8]
46 training: Counter({6: 200, 9: 167, 7: 152}) testing iid: Counter({6: 1000, 9: 1000, 7: 1000})
47 [4 7 8] [4 7 8] [0 1 2 3 5 6 9]
47 training: Counter({8: 161, 4: 156, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 4: 1000})
48 [0 1 8] [0 1 8] [2 3 4 5 6 7 9]
48 training: Counter({1: 167, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 1: 1000})
49 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
49 training: Counter({2: 167, 9: 167, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
50 [0 1 3] [0 1 3] [2 4 5 6 7 8 9]
50 training: Counter({3: 179, 1: 167, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 1: 1000})
51 [1 2 7] [1 2 7] [0 3 4 5 6 8 9]
51 training: Counter({1: 167, 2: 167, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 2: 1000})
52 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
52 training: Counter({6: 200, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
53 [2 3 9] [2 3 9] [0 1 4 5 6 7 8]
53 training: Counter({3: 179, 2: 167, 9: 166}) testing iid: Counter({3: 1000, 9: 1000, 2: 1000})
54 [2 4 6] [2 4 6] [0 1 3 5 7 8 9]
54 training: Counter({6: 200, 2: 167, 4: 156}) testing iid: Counter({6: 1000, 4: 1000, 2: 1000})
55 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
55 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
56 [1 5 6] [1 5 6] [0 2 3 4 7 8 9]
56 training: Counter({6: 200, 5: 185, 1: 167}) testing iid: Counter({6: 1000, 1: 1000, 5: 1000})
57 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
57 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
58 [0 6 8] [0 6 8] [1 2 3 4 5 7 9]
58 training: Counter({6: 200, 8: 161, 0: 147}) testing iid: Counter({8: 1000, 0: 1000, 6: 1000})
59 [1 5 9] [1 5 9] [0 2 3 4 6 7 8]
59 training: Counter({5: 185, 1: 167, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 5: 1000})
60 [0 1 2] [0 1 2] [3 4 5 6 7 8 9]
60 training: Counter({1: 167, 2: 167, 0: 147}) testing iid: Counter({0: 1000, 1: 1000, 2: 1000})
61 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
61 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
62 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
62 training: Counter({2: 167, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
63 [3 8 9] [3 8 9] [0 1 2 4 5 6 7]
63 training: Counter({3: 179, 9: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 9: 1000})
64 [4 5 7] [4 5 7] [0 1 2 3 6 8 9]
64 training: Counter({5: 185, 4: 156, 7: 151}) testing iid: Counter({5: 1000, 7: 1000, 4: 1000})
65 [0 5 9] [0 5 9] [1 2 3 4 6 7 8]
65 training: Counter({5: 185, 9: 166, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 5: 1000})
66 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
66 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
67 [1 4 7] [1 4 7] [0 2 3 5 6 8 9]
67 training: Counter({1: 166, 4: 156, 7: 151}) testing iid: Counter({1: 1000, 7: 1000, 4: 1000})
68 [4 6 8] [4 6 8] [0 1 2 3 5 7 9]
68 training: Counter({6: 200, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 6: 1000, 4: 1000})
69 [2 8 9] [2 8 9] [0 1 3 4 5 6 7]
69 training: Counter({2: 166, 9: 166, 8: 161}) testing iid: Counter({8: 1000, 9: 1000, 2: 1000})
70 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
70 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
71 [1 4 5] [1 4 5] [0 2 3 6 7 8 9]
71 training: Counter({5: 185, 1: 166, 4: 156}) testing iid: Counter({1: 1000, 5: 1000, 4: 1000})
72 [2 5 8] [2 5 8] [0 1 3 4 6 7 9]
72 training: Counter({5: 185, 2: 166, 8: 161}) testing iid: Counter({8: 1000, 5: 1000, 2: 1000})
73 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
73 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
74 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
74 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
75 [0 5 7] [0 5 7] [1 2 3 4 6 8 9]
75 training: Counter({5: 185, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 5: 1000, 7: 1000})
76 [3 4 6] [3 4 6] [0 1 2 5 7 8 9]
76 training: Counter({6: 200, 3: 178, 4: 156}) testing iid: Counter({3: 1000, 6: 1000, 4: 1000})
77 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
77 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
78 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
78 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
79 [1 2 9] [1 2 9] [0 3 4 5 6 7 8]
79 training: Counter({1: 166, 2: 166, 9: 166}) testing iid: Counter({1: 1000, 9: 1000, 2: 1000})
80 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
80 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
81 [0 1 6] [0 1 6] [2 3 4 5 7 8 9]
81 training: Counter({6: 200, 1: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 1: 1000})
82 [0 2 7] [0 2 7] [1 3 4 5 6 8 9]
82 training: Counter({2: 166, 7: 151, 0: 147}) testing iid: Counter({0: 1000, 7: 1000, 2: 1000})
83 [2 3 8] [2 3 8] [0 1 4 5 6 7 9]
83 training: Counter({3: 178, 2: 166, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 2: 1000})
84 [0 3 4] [0 3 4] [1 2 5 6 7 8 9]
84 training: Counter({3: 178, 4: 156, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 4: 1000})
85 [4 5 8] [4 5 8] [0 1 2 3 6 7 9]
85 training: Counter({5: 185, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 5: 1000, 4: 1000})
86 [2 6 9] [2 6 9] [0 1 3 4 5 7 8]
86 training: Counter({6: 200, 2: 166, 9: 166}) testing iid: Counter({6: 1000, 9: 1000, 2: 1000})
87 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
87 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
88 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
88 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
89 [3 6 9] [3 6 9] [0 1 2 4 5 7 8]
89 training: Counter({6: 200, 3: 178, 9: 166}) testing iid: Counter({3: 1000, 6: 1000, 9: 1000})
90 [0 3 7] [0 3 7] [1 2 4 5 6 8 9]
90 training: Counter({3: 178, 7: 151, 0: 147}) testing iid: Counter({3: 1000, 0: 1000, 7: 1000})
91 [1 3 5] [1 3 5] [0 2 4 6 7 8 9]
91 training: Counter({5: 185, 3: 178, 1: 166}) testing iid: Counter({3: 1000, 1: 1000, 5: 1000})
92 [0 2 4] [0 2 4] [1 3 5 6 7 8 9]
92 training: Counter({2: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 4: 1000, 2: 1000})
93 [3 5 8] [3 5 8] [0 1 2 4 6 7 9]
93 training: Counter({5: 185, 3: 178, 8: 161}) testing iid: Counter({3: 1000, 8: 1000, 5: 1000})
94 [4 6 7] [4 6 7] [0 1 2 3 5 8 9]
94 training: Counter({6: 200, 4: 156, 7: 151}) testing iid: Counter({6: 1000, 7: 1000, 4: 1000})
95 [1 5 7] [1 5 7] [0 2 3 4 6 8 9]
95 training: Counter({5: 185, 1: 166, 7: 151}) testing iid: Counter({1: 1000, 5: 1000, 7: 1000})
96 [0 2 6] [0 2 6] [1 3 4 5 7 8 9]
96 training: Counter({6: 200, 2: 166, 0: 147}) testing iid: Counter({0: 1000, 6: 1000, 2: 1000})
97 [2 7 8] [2 7 8] [0 1 3 4 5 6 9]
97 training: Counter({2: 166, 8: 161, 7: 151}) testing iid: Counter({8: 1000, 7: 1000, 2: 1000})
98 [1 4 8] [1 4 8] [0 2 3 5 6 7 9]
98 training: Counter({1: 166, 8: 161, 4: 156}) testing iid: Counter({8: 1000, 1: 1000, 4: 1000})
99 [0 4 9] [0 4 9] [1 2 3 5 6 7 8]
99 training: Counter({9: 166, 4: 156, 0: 147}) testing iid: Counter({0: 1000, 9: 1000, 4: 1000})
Num_samples of Training set per client: [496, 520, 482, 531, 491, 510, 524, 476, 481, 514, 466, 534, 481, 508, 498, 515, 531, 538, 496, 503, 476, 471, 513, 493, 491, 504, 529, 487, 514, 546, 475, 486, 498, 487, 475, 531, 508, 508, 546, 519, 460, 475, 475, 493, 470, 504, 519, 468, 475, 495, 493, 485, 514, 512, 523, 483, 552, 507, 508, 518, 481, 507, 465, 506, 492, 498, 544, 473, 517, 493, 483, 507, 512, 524, 483, 483, 534, 464, 524, 498, 481, 513, 464, 505, 481, 502, 532, 476, 483, 544, 476, 529, 469, 524, 507, 502, 513, 478, 483, 469]
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:00<01:09,  1.42it/s]  2%|▏         | 2/100 [00:01<01:08,  1.43it/s]  3%|▎         | 3/100 [00:02<01:07,  1.44it/s]  4%|▍         | 4/100 [00:02<01:07,  1.43it/s]  5%|▌         | 5/100 [00:03<01:05,  1.45it/s]  6%|▌         | 6/100 [00:04<01:04,  1.46it/s]  7%|▋         | 7/100 [00:04<01:03,  1.47it/s]  8%|▊         | 8/100 [00:05<01:02,  1.47it/s]  9%|▉         | 9/100 [00:06<01:02,  1.46it/s] 10%|█         | 10/100 [00:06<01:02,  1.44it/s] 11%|█         | 11/100 [00:07<01:01,  1.45it/s] 12%|█▏        | 12/100 [00:08<01:01,  1.42it/s] 13%|█▎        | 13/100 [00:08<01:00,  1.43it/s] 14%|█▍        | 14/100 [00:09<01:00,  1.43it/s] 15%|█▌        | 15/100 [00:10<00:59,  1.43it/s] 16%|█▌        | 16/100 [00:11<00:58,  1.44it/s] 17%|█▋        | 17/100 [00:11<00:56,  1.46it/s] 18%|█▊        | 18/100 [00:12<00:55,  1.48it/s] 19%|█▉        | 19/100 [00:13<00:54,  1.49it/s] 20%|██        | 20/100 [00:13<00:53,  1.50it/s] 21%|██        | 21/100 [00:14<00:53,  1.49it/s] 22%|██▏       | 22/100 [00:15<00:52,  1.48it/s] 23%|██▎       | 23/100 [00:15<00:52,  1.46it/s] 24%|██▍       | 24/100 [00:16<00:53,  1.42it/s] 25%|██▌       | 25/100 [00:17<00:52,  1.44it/s] 26%|██▌       | 26/100 [00:17<00:50,  1.45it/s] 27%|██▋       | 27/100 [00:18<00:49,  1.46it/s] 28%|██▊       | 28/100 [00:19<00:48,  1.47it/s] 29%|██▉       | 29/100 [00:19<00:48,  1.47it/s] 30%|███       | 30/100 [00:20<00:47,  1.47it/s] 31%|███       | 31/100 [00:21<00:46,  1.49it/s] 32%|███▏      | 32/100 [00:21<00:45,  1.50it/s] 33%|███▎      | 33/100 [00:22<00:44,  1.50it/s] 34%|███▍      | 34/100 [00:23<00:43,  1.51it/s] 35%|███▌      | 35/100 [00:27<01:52,  1.73s/it] 36%|███▌      | 36/100 [00:28<01:30,  1.41s/it] 37%|███▋      | 37/100 [00:28<01:14,  1.19s/it] 38%|███▊      | 38/100 [00:29<01:03,  1.03s/it] 39%|███▉      | 39/100 [00:30<00:56,  1.09it/s] 40%|████      | 40/100 [00:30<00:50,  1.19it/s] 41%|████      | 41/100 [00:31<00:46,  1.27it/s] 42%|████▏     | 42/100 [00:32<00:43,  1.33it/s] 43%|████▎     | 43/100 [00:32<00:41,  1.38it/s] 44%|████▍     | 44/100 [00:33<00:39,  1.41it/s] 45%|████▌     | 45/100 [00:34<00:38,  1.44it/s] 46%|████▌     | 46/100 [00:34<00:37,  1.45it/s] 47%|████▋     | 47/100 [00:35<00:35,  1.47it/s] 48%|████▊     | 48/100 [00:36<00:34,  1.49it/s] 49%|████▉     | 49/100 [00:36<00:34,  1.50it/s] 50%|█████     | 50/100 [00:37<00:33,  1.49it/s] 51%|█████     | 51/100 [00:38<00:32,  1.50it/s] 52%|█████▏    | 52/100 [00:38<00:31,  1.51it/s] 53%|█████▎    | 53/100 [00:39<00:31,  1.51it/s] 54%|█████▍    | 54/100 [00:40<00:30,  1.51it/s] 55%|█████▌    | 55/100 [00:40<00:29,  1.51it/s] 56%|█████▌    | 56/100 [00:41<00:28,  1.52it/s] 57%|█████▋    | 57/100 [00:41<00:28,  1.51it/s] 58%|█████▊    | 58/100 [00:42<00:27,  1.52it/s] 59%|█████▉    | 59/100 [00:43<00:27,  1.51it/s] 60%|██████    | 60/100 [00:44<00:26,  1.49it/s] 61%|██████    | 61/100 [00:44<00:26,  1.50it/s] 62%|██████▏   | 62/100 [00:45<00:25,  1.50it/s] 63%|██████▎   | 63/100 [00:46<00:24,  1.50it/s] 64%|██████▍   | 64/100 [00:46<00:24,  1.49it/s] 65%|██████▌   | 65/100 [00:47<00:23,  1.49it/s] 66%|██████▌   | 66/100 [00:48<00:22,  1.50it/s] 67%|██████▋   | 67/100 [00:48<00:22,  1.49it/s] 68%|██████▊   | 68/100 [00:49<00:21,  1.50it/s] 69%|██████▉   | 69/100 [00:50<00:20,  1.51it/s] 70%|███████   | 70/100 [00:50<00:19,  1.51it/s] 71%|███████   | 71/100 [00:51<00:19,  1.51it/s] 72%|███████▏  | 72/100 [00:55<00:47,  1.71s/it] 73%|███████▎  | 73/100 [00:56<00:37,  1.39s/it] 74%|███████▍  | 74/100 [00:56<00:30,  1.18s/it] 75%|███████▌  | 75/100 [00:57<00:25,  1.02s/it] 76%|███████▌  | 76/100 [00:58<00:21,  1.10it/s] 77%|███████▋  | 77/100 [00:58<00:19,  1.18it/s] 78%|███████▊  | 78/100 [00:59<00:17,  1.26it/s] 79%|███████▉  | 79/100 [01:00<00:15,  1.32it/s] 80%|████████  | 80/100 [01:00<00:14,  1.38it/s] 81%|████████  | 81/100 [01:01<00:13,  1.42it/s] 82%|████████▏ | 82/100 [01:02<00:12,  1.45it/s] 83%|████████▎ | 83/100 [01:02<00:11,  1.46it/s] 84%|████████▍ | 84/100 [01:03<00:10,  1.47it/s] 85%|████████▌ | 85/100 [01:04<00:10,  1.49it/s] 86%|████████▌ | 86/100 [01:04<00:09,  1.50it/s] 87%|████████▋ | 87/100 [01:05<00:08,  1.51it/s] 88%|████████▊ | 88/100 [01:06<00:07,  1.51it/s] 89%|████████▉ | 89/100 [01:06<00:07,  1.51it/s] 90%|█████████ | 90/100 [01:07<00:06,  1.50it/s] 91%|█████████ | 91/100 [01:08<00:06,  1.49it/s] 92%|█████████▏| 92/100 [01:08<00:05,  1.49it/s] 93%|█████████▎| 93/100 [01:09<00:04,  1.49it/s] 94%|█████████▍| 94/100 [01:10<00:04,  1.49it/s] 95%|█████████▌| 95/100 [01:10<00:03,  1.49it/s] 96%|█████████▌| 96/100 [01:11<00:02,  1.49it/s] 97%|█████████▋| 97/100 [01:12<00:01,  1.50it/s] 98%|█████████▊| 98/100 [01:12<00:01,  1.51it/s] 99%|█████████▉| 99/100 [01:13<00:00,  1.51it/s]100%|██████████| 100/100 [01:14<00:00,  1.51it/s]100%|██████████| 100/100 [01:14<00:00,  1.35it/s]
Number of users per round / total users: 10  /  100
Finished creating FL server.
=== Training starts: algorithm FedFea ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
all data: 1017
Local adapation with distilling: 0.001
training loss: tensor(2.4284) feature loss: tensor(0.4157)
Local adapation with distilling: 0.001
training loss: tensor(2.4687) feature loss: tensor(0.4367)
Local adapation with distilling: 0.001
training loss: tensor(2.5221) feature loss: tensor(0.3841)
Local adapation with distilling: 0.001
training loss: tensor(2.5273) feature loss: tensor(0.4259)
Local adapation with distilling: 0.001
training loss: tensor(2.4941) feature loss: tensor(0.4159)
Local adapation with distilling: 0.001
training loss: tensor(2.5197) feature loss: tensor(0.4361)
Local adapation with distilling: 0.001
training loss: tensor(2.6262) feature loss: tensor(0.4769)
Local adapation with distilling: 0.001
training loss: tensor(2.4217) feature loss: tensor(0.3854)
Local adapation with distilling: 0.001
training loss: tensor(2.7198) feature loss: tensor(0.4586)
Local adapation with distilling: 0.001
training loss: tensor(2.5290) feature loss: tensor(0.4225)
Global Model Acc on global data: 0.1001 length of data: 10000
save a model
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
all data: 992
Local adapation with distilling: 0.000982
training loss: tensor(2.0885) feature loss: tensor(0.6107)
Local adapation with distilling: 0.000982
training loss: tensor(2.0931) feature loss: tensor(0.6348)
Local adapation with distilling: 0.000982
training loss: tensor(1.9834) feature loss: tensor(0.6260)
Local adapation with distilling: 0.000982
training loss: tensor(2.2069) feature loss: tensor(0.5965)
Local adapation with distilling: 0.000982
training loss: tensor(2.0198) feature loss: tensor(0.5734)
Local adapation with distilling: 0.000982
training loss: tensor(2.0605) feature loss: tensor(0.5366)
Local adapation with distilling: 0.000982
training loss: tensor(1.9896) feature loss: tensor(0.5976)
Local adapation with distilling: 0.000982
training loss: tensor(2.2077) feature loss: tensor(0.6181)
Local adapation with distilling: 0.000982
training loss: tensor(2.1509) feature loss: tensor(0.6227)
Local adapation with distilling: 0.000982
training loss: tensor(1.9765) feature loss: tensor(0.5826)
Global Model Acc on global data: 0.1978 length of data: 10000
save a model
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([110, 32, 16, 16]) torch.Size([110])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
all data: 1004
Local adapation with distilling: 0.000964
training loss: tensor(1.6980) feature loss: tensor(0.5649)
Local adapation with distilling: 0.000964
training loss: tensor(1.8002) feature loss: tensor(0.6146)
Local adapation with distilling: 0.000964
training loss: tensor(1.6573) feature loss: tensor(0.4822)
Local adapation with distilling: 0.000964
training loss: tensor(1.8386) feature loss: tensor(0.5484)
Local adapation with distilling: 0.000964
training loss: tensor(1.7544) feature loss: tensor(0.4791)
Local adapation with distilling: 0.000964
training loss: tensor(1.8008) feature loss: tensor(0.6308)
Local adapation with distilling: 0.000964
training loss: tensor(1.7732) feature loss: tensor(0.6349)
Local adapation with distilling: 0.000964
training loss: tensor(1.8489) feature loss: tensor(0.5481)
Local adapation with distilling: 0.000964
training loss: tensor(1.8261) feature loss: tensor(0.5860)
Local adapation with distilling: 0.000964
training loss: tensor(1.7306) feature loss: tensor(0.6407)
Global Model Acc on global data: 0.1803 length of data: 10000
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
all data: 997
Local adapation with distilling: 0.000946
training loss: tensor(1.5147) feature loss: tensor(0.4946)
Local adapation with distilling: 0.000946
training loss: tensor(1.5957) feature loss: tensor(0.5109)
Local adapation with distilling: 0.000946
training loss: tensor(1.6278) feature loss: tensor(0.4578)
Local adapation with distilling: 0.000946
training loss: tensor(1.6053) feature loss: tensor(0.5175)
Local adapation with distilling: 0.000946
training loss: tensor(1.7203) feature loss: tensor(0.5074)
Local adapation with distilling: 0.000946
training loss: tensor(1.4521) feature loss: tensor(0.4790)
Local adapation with distilling: 0.000946
training loss: tensor(1.5487) feature loss: tensor(0.5281)
Local adapation with distilling: 0.000946
training loss: tensor(1.6099) feature loss: tensor(0.4812)
Local adapation with distilling: 0.000946
training loss: tensor(1.5531) feature loss: tensor(0.5404)
Local adapation with distilling: 0.000946
training loss: tensor(1.6151) feature loss: tensor(0.5230)
Global Model Acc on global data: 0.1812 length of data: 10000
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
all data: 993
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.7335) feature loss: tensor(0.6265)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.7031) feature loss: tensor(0.6364)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.8435) feature loss: tensor(0.5790)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5665) feature loss: tensor(0.6154)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4729) feature loss: tensor(0.6039)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4434) feature loss: tensor(0.5117)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3575) feature loss: tensor(0.5381)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4315) feature loss: tensor(0.5653)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4595) feature loss: tensor(0.5370)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4432) feature loss: tensor(0.5659)
Global Model Acc on global data: 0.2165 length of data: 10000
save a model
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
all data: 1007
Local adapation with distilling: 0.00091
training loss: tensor(1.3884) feature loss: tensor(0.5587)
Local adapation with distilling: 0.00091
training loss: tensor(1.4251) feature loss: tensor(0.5530)
Local adapation with distilling: 0.00091
training loss: tensor(1.4221) feature loss: tensor(0.5607)
Local adapation with distilling: 0.00091
training loss: tensor(1.6226) feature loss: tensor(0.6755)
Local adapation with distilling: 0.00091
training loss: tensor(1.4789) feature loss: tensor(0.6081)
Local adapation with distilling: 0.00091
training loss: tensor(1.4846) feature loss: tensor(0.6086)
Local adapation with distilling: 0.00091
training loss: tensor(1.4726) feature loss: tensor(0.5874)
Local adapation with distilling: 0.00091
training loss: tensor(1.5497) feature loss: tensor(0.6285)
Local adapation with distilling: 0.00091
training loss: tensor(1.4193) feature loss: tensor(0.5917)
Local adapation with distilling: 0.00091
training loss: tensor(1.4576) feature loss: tensor(0.5982)
Global Model Acc on global data: 0.3355 length of data: 10000
save a model
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
all data: 987
Local adapation with distilling: 0.000892
training loss: tensor(1.1923) feature loss: tensor(0.5027)
Local adapation with distilling: 0.000892
training loss: tensor(1.2767) feature loss: tensor(0.5244)
Local adapation with distilling: 0.000892
training loss: tensor(1.3047) feature loss: tensor(0.5485)
Local adapation with distilling: 0.000892
training loss: tensor(1.2676) feature loss: tensor(0.5794)
Local adapation with distilling: 0.000892
training loss: tensor(1.2969) feature loss: tensor(0.5805)
Local adapation with distilling: 0.000892
training loss: tensor(1.2293) feature loss: tensor(0.5271)
Local adapation with distilling: 0.000892
training loss: tensor(1.3179) feature loss: tensor(0.6035)
Local adapation with distilling: 0.000892
training loss: tensor(1.2258) feature loss: tensor(0.5151)
Local adapation with distilling: 0.000892
training loss: tensor(1.3361) feature loss: tensor(0.5423)
Local adapation with distilling: 0.000892
training loss: tensor(1.5665) feature loss: tensor(0.6075)
Global Model Acc on global data: 0.3714 length of data: 10000
save a model
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
all data: 1030
Local adapation with distilling: 0.000874
training loss: tensor(1.3369) feature loss: tensor(0.5345)
Local adapation with distilling: 0.000874
training loss: tensor(1.1727) feature loss: tensor(0.5543)
Local adapation with distilling: 0.000874
training loss: tensor(1.1903) feature loss: tensor(0.5755)
Local adapation with distilling: 0.000874
training loss: tensor(1.2637) feature loss: tensor(0.5483)
Local adapation with distilling: 0.000874
training loss: tensor(1.2445) feature loss: tensor(0.5699)
Local adapation with distilling: 0.000874
training loss: tensor(1.3054) feature loss: tensor(0.5635)
Local adapation with distilling: 0.000874
training loss: tensor(1.2126) feature loss: tensor(0.5926)
Local adapation with distilling: 0.000874
training loss: tensor(1.1828) feature loss: tensor(0.5020)
Local adapation with distilling: 0.000874
training loss: tensor(1.1600) feature loss: tensor(0.5421)
Local adapation with distilling: 0.000874
training loss: tensor(1.3755) feature loss: tensor(0.5902)
Global Model Acc on global data: 0.3589 length of data: 10000
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
all data: 997
Local adapation with distilling: 0.000856
training loss: tensor(1.1540) feature loss: tensor(0.5021)
Local adapation with distilling: 0.000856
training loss: tensor(1.2541) feature loss: tensor(0.6182)
Local adapation with distilling: 0.000856
training loss: tensor(1.2240) feature loss: tensor(0.5266)
Local adapation with distilling: 0.000856
training loss: tensor(1.3178) feature loss: tensor(0.5957)
Local adapation with distilling: 0.000856
training loss: tensor(1.2734) feature loss: tensor(0.5806)
Local adapation with distilling: 0.000856
training loss: tensor(1.3021) feature loss: tensor(0.5755)
Local adapation with distilling: 0.000856
training loss: tensor(1.0778) feature loss: tensor(0.4938)
Local adapation with distilling: 0.000856
training loss: tensor(1.1443) feature loss: tensor(0.5521)
Local adapation with distilling: 0.000856
training loss: tensor(1.3730) feature loss: tensor(0.5506)
Local adapation with distilling: 0.000856
training loss: tensor(1.3171) feature loss: tensor(0.5742)
Global Model Acc on global data: 0.3725 length of data: 10000
save a model
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
all data: 999
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0630) feature loss: tensor(0.4750)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1363) feature loss: tensor(0.4161)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(0.9848) feature loss: tensor(0.4199)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0910) feature loss: tensor(0.4402)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0571) feature loss: tensor(0.4754)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0542) feature loss: tensor(0.4344)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0151) feature loss: tensor(0.4545)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.1322) feature loss: tensor(0.4926)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0574) feature loss: tensor(0.4604)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.0425) feature loss: tensor(0.4761)
Global Model Acc on global data: 0.4032 length of data: 10000
save a model
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
all data: 1018
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9922) feature loss: tensor(0.4250)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9765) feature loss: tensor(0.4704)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0126) feature loss: tensor(0.4564)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9991) feature loss: tensor(0.4251)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9368) feature loss: tensor(0.4472)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9320) feature loss: tensor(0.4012)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0855) feature loss: tensor(0.4374)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.0701) feature loss: tensor(0.4457)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9073) feature loss: tensor(0.4087)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(0.9986) feature loss: tensor(0.4257)
Global Model Acc on global data: 0.3662 length of data: 10000
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
all data: 990
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9812) feature loss: tensor(0.5088)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9910) feature loss: tensor(0.5411)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.2167) feature loss: tensor(0.5154)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0219) feature loss: tensor(0.4954)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0113) feature loss: tensor(0.4795)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0742) feature loss: tensor(0.4878)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0848) feature loss: tensor(0.5013)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(0.9530) feature loss: tensor(0.4960)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.1944) feature loss: tensor(0.5415)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.0728) feature loss: tensor(0.5209)
Global Model Acc on global data: 0.3804 length of data: 10000
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 995
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9337) feature loss: tensor(0.4329)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8794) feature loss: tensor(0.4266)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0525) feature loss: tensor(0.4411)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9029) feature loss: tensor(0.4347)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8915) feature loss: tensor(0.4391)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.1111) feature loss: tensor(0.4805)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.8987) feature loss: tensor(0.4364)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0469) feature loss: tensor(0.4758)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(0.9783) feature loss: tensor(0.4211)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.0845) feature loss: tensor(0.4370)
Global Model Acc on global data: 0.3981 length of data: 10000
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
all data: 984
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8240) feature loss: tensor(0.3561)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9005) feature loss: tensor(0.3855)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8905) feature loss: tensor(0.4643)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.7672) feature loss: tensor(0.4206)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8450) feature loss: tensor(0.4202)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.1735) feature loss: tensor(0.4034)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9464) feature loss: tensor(0.3620)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9012) feature loss: tensor(0.4157)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8734) feature loss: tensor(0.4290)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8752) feature loss: tensor(0.3644)
Global Model Acc on global data: 0.3938 length of data: 10000
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
all data: 981
Local adapation with distilling: 0.000748
training loss: tensor(1.0229) feature loss: tensor(0.4968)
Local adapation with distilling: 0.000748
training loss: tensor(1.0427) feature loss: tensor(0.4988)
Local adapation with distilling: 0.000748
training loss: tensor(1.0832) feature loss: tensor(0.5601)
Local adapation with distilling: 0.000748
training loss: tensor(1.0365) feature loss: tensor(0.5224)
Local adapation with distilling: 0.000748
training loss: tensor(1.0878) feature loss: tensor(0.5197)
Local adapation with distilling: 0.000748
training loss: tensor(1.0407) feature loss: tensor(0.5655)
Local adapation with distilling: 0.000748
training loss: tensor(1.1088) feature loss: tensor(0.5590)
Local adapation with distilling: 0.000748
training loss: tensor(1.1872) feature loss: tensor(0.5290)
Local adapation with distilling: 0.000748
training loss: tensor(1.0975) feature loss: tensor(0.5756)
Local adapation with distilling: 0.000748
training loss: tensor(1.0228) feature loss: tensor(0.5580)
Global Model Acc on global data: 0.3838 length of data: 10000
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
all data: 1014
Local adapation with distilling: 0.00073
training loss: tensor(0.9931) feature loss: tensor(0.4274)
Local adapation with distilling: 0.00073
training loss: tensor(0.9493) feature loss: tensor(0.4572)
Local adapation with distilling: 0.00073
training loss: tensor(0.9308) feature loss: tensor(0.4362)
Local adapation with distilling: 0.00073
training loss: tensor(0.9684) feature loss: tensor(0.4785)
Local adapation with distilling: 0.00073
training loss: tensor(0.8989) feature loss: tensor(0.4643)
Local adapation with distilling: 0.00073
training loss: tensor(0.9591) feature loss: tensor(0.4776)
Local adapation with distilling: 0.00073
training loss: tensor(0.9783) feature loss: tensor(0.4615)
Local adapation with distilling: 0.00073
training loss: tensor(0.8837) feature loss: tensor(0.4506)
Local adapation with distilling: 0.00073
training loss: tensor(1.0107) feature loss: tensor(0.4684)
Local adapation with distilling: 0.00073
training loss: tensor(1.0398) feature loss: tensor(0.4512)
Global Model Acc on global data: 0.4387 length of data: 10000
save a model
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
all data: 990
Local adapation with distilling: 0.000712
training loss: tensor(0.9478) feature loss: tensor(0.4088)
Local adapation with distilling: 0.000712
training loss: tensor(0.9550) feature loss: tensor(0.4228)
Local adapation with distilling: 0.000712
training loss: tensor(0.8637) feature loss: tensor(0.3656)
Local adapation with distilling: 0.000712
training loss: tensor(0.9595) feature loss: tensor(0.3807)
Local adapation with distilling: 0.000712
training loss: tensor(0.9010) feature loss: tensor(0.4047)
Local adapation with distilling: 0.000712
training loss: tensor(0.8171) feature loss: tensor(0.4092)
Local adapation with distilling: 0.000712
training loss: tensor(0.8742) feature loss: tensor(0.4240)
Local adapation with distilling: 0.000712
training loss: tensor(0.8946) feature loss: tensor(0.3994)
Local adapation with distilling: 0.000712
training loss: tensor(0.9695) feature loss: tensor(0.4337)
Local adapation with distilling: 0.000712
training loss: tensor(1.0806) feature loss: tensor(0.3928)
Global Model Acc on global data: 0.4464 length of data: 10000
save a model
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
all data: 990
Local adapation with distilling: 0.000694
training loss: tensor(0.7173) feature loss: tensor(0.3456)
Local adapation with distilling: 0.000694
training loss: tensor(0.9438) feature loss: tensor(0.3559)
Local adapation with distilling: 0.000694
training loss: tensor(1.2325) feature loss: tensor(0.3368)
Local adapation with distilling: 0.000694
training loss: tensor(0.8067) feature loss: tensor(0.3490)
Local adapation with distilling: 0.000694
training loss: tensor(0.7847) feature loss: tensor(0.3492)
Local adapation with distilling: 0.000694
training loss: tensor(0.7981) feature loss: tensor(0.3453)
Local adapation with distilling: 0.000694
training loss: tensor(0.8206) feature loss: tensor(0.3464)
Local adapation with distilling: 0.000694
training loss: tensor(0.8838) feature loss: tensor(0.3616)
Local adapation with distilling: 0.000694
training loss: tensor(0.7185) feature loss: tensor(0.3445)
Local adapation with distilling: 0.000694
training loss: tensor(0.7607) feature loss: tensor(0.3332)
Global Model Acc on global data: 0.4143 length of data: 10000
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
all data: 996
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8819) feature loss: tensor(0.4555)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8291) feature loss: tensor(0.4263)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9280) feature loss: tensor(0.4564)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9805) feature loss: tensor(0.4313)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9702) feature loss: tensor(0.4652)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0408) feature loss: tensor(0.4417)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9565) feature loss: tensor(0.4509)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(1.0155) feature loss: tensor(0.4549)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9018) feature loss: tensor(0.4212)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8999) feature loss: tensor(0.4654)
Global Model Acc on global data: 0.4388 length of data: 10000
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
all data: 1017
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8690) feature loss: tensor(0.4019)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8495) feature loss: tensor(0.4209)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9746) feature loss: tensor(0.3983)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9562) feature loss: tensor(0.4096)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9767) feature loss: tensor(0.4058)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8291) feature loss: tensor(0.4073)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9937) feature loss: tensor(0.4077)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9491) feature loss: tensor(0.4045)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.8714) feature loss: tensor(0.4002)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(0.9005) feature loss: tensor(0.3907)
Global Model Acc on global data: 0.4679 length of data: 10000
save a model
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([110, 32, 16, 16]) torch.Size([110])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
all data: 982
Local adapation with distilling: 0.00064
training loss: tensor(0.7619) feature loss: tensor(0.3710)
Local adapation with distilling: 0.00064
training loss: tensor(0.7673) feature loss: tensor(0.3703)
Local adapation with distilling: 0.00064
training loss: tensor(0.7645) feature loss: tensor(0.3648)
Local adapation with distilling: 0.00064
training loss: tensor(0.7427) feature loss: tensor(0.3853)
Local adapation with distilling: 0.00064
training loss: tensor(0.7302) feature loss: tensor(0.3647)
Local adapation with distilling: 0.00064
training loss: tensor(0.7810) feature loss: tensor(0.3864)
Local adapation with distilling: 0.00064
training loss: tensor(0.7682) feature loss: tensor(0.3610)
Local adapation with distilling: 0.00064
training loss: tensor(0.7503) feature loss: tensor(0.3545)
Local adapation with distilling: 0.00064
training loss: tensor(0.7302) feature loss: tensor(0.3811)
Local adapation with distilling: 0.00064
training loss: tensor(0.7296) feature loss: tensor(0.3503)
Global Model Acc on global data: 0.4807 length of data: 10000
save a model
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
all data: 993
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9355) feature loss: tensor(0.4310)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.4264) feature loss: tensor(0.3893)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8198) feature loss: tensor(0.3996)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9278) feature loss: tensor(0.4046)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9352) feature loss: tensor(0.4004)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9010) feature loss: tensor(0.3905)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9438) feature loss: tensor(0.3817)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9995) feature loss: tensor(0.4094)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8626) feature loss: tensor(0.4340)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.8740) feature loss: tensor(0.3791)
Global Model Acc on global data: 0.5129 length of data: 10000
save a model
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
all data: 964
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7508) feature loss: tensor(0.4296)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7033) feature loss: tensor(0.4336)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8305) feature loss: tensor(0.4004)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7255) feature loss: tensor(0.3578)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7280) feature loss: tensor(0.3673)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7192) feature loss: tensor(0.3734)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.8699) feature loss: tensor(0.4429)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7638) feature loss: tensor(0.3465)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.7787) feature loss: tensor(0.3795)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(0.6731) feature loss: tensor(0.3749)
Global Model Acc on global data: 0.5047 length of data: 10000
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
all data: 993
Local adapation with distilling: 0.000586
training loss: tensor(0.7039) feature loss: tensor(0.3543)
Local adapation with distilling: 0.000586
training loss: tensor(0.8057) feature loss: tensor(0.3925)
Local adapation with distilling: 0.000586
training loss: tensor(0.7379) feature loss: tensor(0.3357)
Local adapation with distilling: 0.000586
training loss: tensor(0.7449) feature loss: tensor(0.3785)
Local adapation with distilling: 0.000586
training loss: tensor(0.8288) feature loss: tensor(0.3402)
Local adapation with distilling: 0.000586
training loss: tensor(0.6991) feature loss: tensor(0.3447)
Local adapation with distilling: 0.000586
training loss: tensor(0.7802) feature loss: tensor(0.3642)
Local adapation with distilling: 0.000586
training loss: tensor(0.7793) feature loss: tensor(0.3561)
Local adapation with distilling: 0.000586
training loss: tensor(0.7939) feature loss: tensor(0.3530)
Local adapation with distilling: 0.000586
training loss: tensor(0.7295) feature loss: tensor(0.3515)
Global Model Acc on global data: 0.4975 length of data: 10000
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
all data: 1000
Local adapation with distilling: 0.000568
training loss: tensor(0.6130) feature loss: tensor(0.3102)
Local adapation with distilling: 0.000568
training loss: tensor(0.6789) feature loss: tensor(0.3207)
Local adapation with distilling: 0.000568
training loss: tensor(0.6076) feature loss: tensor(0.2954)
Local adapation with distilling: 0.000568
training loss: tensor(0.6786) feature loss: tensor(0.3060)
Local adapation with distilling: 0.000568
training loss: tensor(0.7589) feature loss: tensor(0.3450)
Local adapation with distilling: 0.000568
training loss: tensor(0.6434) feature loss: tensor(0.3270)
Local adapation with distilling: 0.000568
training loss: tensor(0.6642) feature loss: tensor(0.3208)
Local adapation with distilling: 0.000568
training loss: tensor(0.7167) feature loss: tensor(0.3094)
Local adapation with distilling: 0.000568
training loss: tensor(0.7065) feature loss: tensor(0.3485)
Local adapation with distilling: 0.000568
training loss: tensor(0.7038) feature loss: tensor(0.3177)
Global Model Acc on global data: 0.4725 length of data: 10000
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 1000
Local adapation with distilling: 0.00055
training loss: tensor(0.6927) feature loss: tensor(0.3062)
Local adapation with distilling: 0.00055
training loss: tensor(0.6734) feature loss: tensor(0.3432)
Local adapation with distilling: 0.00055
training loss: tensor(0.7542) feature loss: tensor(0.3559)
Local adapation with distilling: 0.00055
training loss: tensor(0.7462) feature loss: tensor(0.3370)
Local adapation with distilling: 0.00055
training loss: tensor(0.7012) feature loss: tensor(0.3095)
Local adapation with distilling: 0.00055
training loss: tensor(0.7625) feature loss: tensor(0.3089)
Local adapation with distilling: 0.00055
training loss: tensor(0.6748) feature loss: tensor(0.2942)
Local adapation with distilling: 0.00055
training loss: tensor(0.7009) feature loss: tensor(0.3385)
Local adapation with distilling: 0.00055
training loss: tensor(0.7400) feature loss: tensor(0.3411)
Local adapation with distilling: 0.00055
training loss: tensor(0.7076) feature loss: tensor(0.3148)
Global Model Acc on global data: 0.4898 length of data: 10000
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 981
Local adapation with distilling: 0.000532
training loss: tensor(0.8269) feature loss: tensor(0.3795)
Local adapation with distilling: 0.000532
training loss: tensor(0.7962) feature loss: tensor(0.3931)
Local adapation with distilling: 0.000532
training loss: tensor(0.8214) feature loss: tensor(0.3716)
Local adapation with distilling: 0.000532
training loss: tensor(0.7719) feature loss: tensor(0.3577)
Local adapation with distilling: 0.000532
training loss: tensor(0.8439) feature loss: tensor(0.3913)
Local adapation with distilling: 0.000532
training loss: tensor(0.9048) feature loss: tensor(0.3982)
Local adapation with distilling: 0.000532
training loss: tensor(0.7901) feature loss: tensor(0.3802)
Local adapation with distilling: 0.000532
training loss: tensor(0.8305) feature loss: tensor(0.3750)
Local adapation with distilling: 0.000532
training loss: tensor(0.7856) feature loss: tensor(0.3934)
Local adapation with distilling: 0.000532
training loss: tensor(0.8344) feature loss: tensor(0.4016)
Global Model Acc on global data: 0.504 length of data: 10000
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
all data: 992
Local adapation with distilling: 0.000514
training loss: tensor(0.6505) feature loss: tensor(0.3166)
Local adapation with distilling: 0.000514
training loss: tensor(0.6816) feature loss: tensor(0.3050)
Local adapation with distilling: 0.000514
training loss: tensor(0.6789) feature loss: tensor(0.3880)
Local adapation with distilling: 0.000514
training loss: tensor(0.7516) feature loss: tensor(0.3283)
Local adapation with distilling: 0.000514
training loss: tensor(0.7500) feature loss: tensor(0.3145)
Local adapation with distilling: 0.000514
training loss: tensor(0.6869) feature loss: tensor(0.2982)
Local adapation with distilling: 0.000514
training loss: tensor(0.7615) feature loss: tensor(0.3006)
Local adapation with distilling: 0.000514
training loss: tensor(0.6398) feature loss: tensor(0.2985)
Local adapation with distilling: 0.000514
training loss: tensor(1.0972) feature loss: tensor(0.3287)
Local adapation with distilling: 0.000514
training loss: tensor(0.7161) feature loss: tensor(0.3147)
Global Model Acc on global data: 0.5045 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
all data: 996
Local adapation with distilling: 0.000496
training loss: tensor(0.7026) feature loss: tensor(0.3162)
Local adapation with distilling: 0.000496
training loss: tensor(0.6493) feature loss: tensor(0.3083)
Local adapation with distilling: 0.000496
training loss: tensor(0.7411) feature loss: tensor(0.3287)
Local adapation with distilling: 0.000496
training loss: tensor(0.6726) feature loss: tensor(0.3212)
Local adapation with distilling: 0.000496
training loss: tensor(0.7159) feature loss: tensor(0.3395)
Local adapation with distilling: 0.000496
training loss: tensor(0.7561) feature loss: tensor(0.3239)
Local adapation with distilling: 0.000496
training loss: tensor(0.7679) feature loss: tensor(0.3314)
Local adapation with distilling: 0.000496
training loss: tensor(0.6790) feature loss: tensor(0.3290)
Local adapation with distilling: 0.000496
training loss: tensor(1.2923) feature loss: tensor(0.3441)
Local adapation with distilling: 0.000496
training loss: tensor(0.6641) feature loss: tensor(0.3203)
Global Model Acc on global data: 0.5097 length of data: 10000
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 987
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7169) feature loss: tensor(0.3158)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6889) feature loss: tensor(0.3150)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7634) feature loss: tensor(0.3419)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7313) feature loss: tensor(0.3275)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6956) feature loss: tensor(0.3211)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6640) feature loss: tensor(0.3217)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7992) feature loss: tensor(0.3527)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7256) feature loss: tensor(0.3340)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.6559) feature loss: tensor(0.3183)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7136) feature loss: tensor(0.3328)
Global Model Acc on global data: 0.535 length of data: 10000
save a model
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
all data: 983
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.6162) feature loss: tensor(0.2827)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.6308) feature loss: tensor(0.2846)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5911) feature loss: tensor(0.2921)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.7094) feature loss: tensor(0.2925)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5636) feature loss: tensor(0.2910)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5739) feature loss: tensor(0.3124)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5830) feature loss: tensor(0.3182)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5855) feature loss: tensor(0.2724)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.6048) feature loss: tensor(0.2982)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.5422) feature loss: tensor(0.2913)
Global Model Acc on global data: 0.5262 length of data: 10000
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([110, 32, 16, 16]) torch.Size([110])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
all data: 1012
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6068) feature loss: tensor(0.2833)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5941) feature loss: tensor(0.2968)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6211) feature loss: tensor(0.2894)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6243) feature loss: tensor(0.2731)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5752) feature loss: tensor(0.2775)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5973) feature loss: tensor(0.2852)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5636) feature loss: tensor(0.2757)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5653) feature loss: tensor(0.2831)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.6923) feature loss: tensor(0.3003)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.5803) feature loss: tensor(0.2692)
Global Model Acc on global data: 0.5359 length of data: 10000
save a model
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
all data: 989
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.4479) feature loss: tensor(0.3223)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9263) feature loss: tensor(0.3256)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6764) feature loss: tensor(0.3015)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8214) feature loss: tensor(0.3256)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7764) feature loss: tensor(0.3073)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.6951) feature loss: tensor(0.3256)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7236) feature loss: tensor(0.3200)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.7334) feature loss: tensor(0.3108)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8018) feature loss: tensor(0.2973)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.3951) feature loss: tensor(0.3196)
Global Model Acc on global data: 0.532 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
random features: torch.Size([110, 32, 16, 16]) torch.Size([110])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 992
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6144) feature loss: tensor(0.3358)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7500) feature loss: tensor(0.3458)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6178) feature loss: tensor(0.3291)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7212) feature loss: tensor(0.3285)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6727) feature loss: tensor(0.3584)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6131) feature loss: tensor(0.3137)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.7396) feature loss: tensor(0.3203)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.6759) feature loss: tensor(0.3233)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6444) feature loss: tensor(0.3646)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.6443) feature loss: tensor(0.3318)
Global Model Acc on global data: 0.5453 length of data: 10000
save a model
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
all data: 1009
Local adapation with distilling: 0.000388
training loss: tensor(0.6733) feature loss: tensor(0.3151)
Local adapation with distilling: 0.000388
training loss: tensor(0.6634) feature loss: tensor(0.3055)
Local adapation with distilling: 0.000388
training loss: tensor(0.8743) feature loss: tensor(0.3123)
Local adapation with distilling: 0.000388
training loss: tensor(0.7751) feature loss: tensor(0.3215)
Local adapation with distilling: 0.000388
training loss: tensor(0.8483) feature loss: tensor(0.3057)
Local adapation with distilling: 0.000388
training loss: tensor(0.7751) feature loss: tensor(0.3144)
Local adapation with distilling: 0.000388
training loss: tensor(0.6668) feature loss: tensor(0.3043)
Local adapation with distilling: 0.000388
training loss: tensor(0.7898) feature loss: tensor(0.3159)
Local adapation with distilling: 0.000388
training loss: tensor(0.6958) feature loss: tensor(0.3127)
Local adapation with distilling: 0.000388
training loss: tensor(0.6939) feature loss: tensor(0.3268)
Global Model Acc on global data: 0.5443 length of data: 10000
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([93, 32, 16, 16]) torch.Size([93])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
all data: 973
Local adapation with distilling: 0.00037
training loss: tensor(0.7063) feature loss: tensor(0.3340)
Local adapation with distilling: 0.00037
training loss: tensor(0.5609) feature loss: tensor(0.2666)
Local adapation with distilling: 0.00037
training loss: tensor(0.6357) feature loss: tensor(0.3105)
Local adapation with distilling: 0.00037
training loss: tensor(0.6374) feature loss: tensor(0.2702)
Local adapation with distilling: 0.00037
training loss: tensor(0.6089) feature loss: tensor(0.2814)
Local adapation with distilling: 0.00037
training loss: tensor(0.6445) feature loss: tensor(0.3403)
Local adapation with distilling: 0.00037
training loss: tensor(0.6670) feature loss: tensor(0.3388)
Local adapation with distilling: 0.00037
training loss: tensor(0.7025) feature loss: tensor(0.2939)
Local adapation with distilling: 0.00037
training loss: tensor(0.6439) feature loss: tensor(0.2872)
Local adapation with distilling: 0.00037
training loss: tensor(0.6772) feature loss: tensor(0.3019)
Global Model Acc on global data: 0.535 length of data: 10000
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([97, 32, 16, 16]) torch.Size([97])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([103, 32, 16, 16]) torch.Size([103])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
all data: 991
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6716) feature loss: tensor(0.2736)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6852) feature loss: tensor(0.2515)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6106) feature loss: tensor(0.2731)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6198) feature loss: tensor(0.2496)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.9935) feature loss: tensor(0.2794)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7079) feature loss: tensor(0.2692)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6605) feature loss: tensor(0.2920)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.6532) feature loss: tensor(0.2774)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8016) feature loss: tensor(0.2948)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.5603) feature loss: tensor(0.2614)
Global Model Acc on global data: 0.5701 length of data: 10000
save a model
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([105, 32, 16, 16]) torch.Size([105])
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
all data: 1018
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6002) feature loss: tensor(0.2327)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6221) feature loss: tensor(0.2712)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6011) feature loss: tensor(0.2554)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6931) feature loss: tensor(0.2426)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6834) feature loss: tensor(0.2359)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5561) feature loss: tensor(0.2417)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.3985) feature loss: tensor(0.2452)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6446) feature loss: tensor(0.2455)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.5994) feature loss: tensor(0.2607)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(0.6520) feature loss: tensor(0.2583)
Global Model Acc on global data: 0.5694 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
random features: torch.Size([92, 32, 16, 16]) torch.Size([92])
random features: torch.Size([104, 32, 16, 16]) torch.Size([104])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([106, 32, 16, 16]) torch.Size([106])
random features: torch.Size([98, 32, 16, 16]) torch.Size([98])
random features: torch.Size([107, 32, 16, 16]) torch.Size([107])
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
random features: torch.Size([108, 32, 16, 16]) torch.Size([108])
all data: 1027
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7207) feature loss: tensor(0.3288)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7285) feature loss: tensor(0.3599)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6625) feature loss: tensor(0.2884)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.7011) feature loss: tensor(0.3108)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8396) feature loss: tensor(0.2918)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8546) feature loss: tensor(0.3929)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6630) feature loss: tensor(0.3048)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6052) feature loss: tensor(0.3053)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6556) feature loss: tensor(0.2916)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.6868) feature loss: tensor(0.3330)
Global Model Acc on global data: 0.5638 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
random features: torch.Size([102, 32, 16, 16]) torch.Size([102])
random features: torch.Size([115, 32, 16, 16]) torch.Size([115])
random features: torch.Size([96, 32, 16, 16]) torch.Size([96])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([95, 32, 16, 16]) torch.Size([95])
random features: torch.Size([101, 32, 16, 16]) torch.Size([101])
random features: torch.Size([109, 32, 16, 16]) torch.Size([109])
random features: torch.Size([94, 32, 16, 16]) torch.Size([94])
random features: torch.Size([100, 32, 16, 16]) torch.Size([100])
random features: torch.Size([99, 32, 16, 16]) torch.Size([99])
all data: 1012
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.0123) feature loss: tensor(0.2669)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5947) feature loss: tensor(0.2801)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6738) feature loss: tensor(0.2701)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6554) feature loss: tensor(0.2476)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.7194) feature loss: tensor(0.2692)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6236) feature loss: tensor(0.2549)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5896) feature loss: tensor(0.2656)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6397) feature loss: tensor(0.2638)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.5790) feature loss: tensor(0.2441)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.6987) feature loss: tensor(0.2676)
Traceback (most recent call last):
  File "main.py", line 160, in <module>
    run()
  File "main.py", line 152, in run
    seed=args.seed
  File "main.py", line 72, in main
    server.train()
  File "/auto/homes/tx229/federated/FL_v4/FLAlgorithms/servers/myserver.py", line 127, in train
    global_acc = self.evaluate(glob_iter)  #global model evaluation
  File "/auto/homes/tx229/federated/FL_v4/FLAlgorithms/servers/myserver.py", line 155, in evaluate
    output = self.model(data) 
  File "/home/tx229/anaconda3/envs/posterior-network/lib/python3.6/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/auto/homes/tx229/federated/FL_v4/FLAlgorithms/trainmodel/models.py", line 352, in forward
    out = self.layers(out)
  File "/home/tx229/anaconda3/envs/posterior-network/lib/python3.6/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/tx229/anaconda3/envs/posterior-network/lib/python3.6/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/home/tx229/anaconda3/envs/posterior-network/lib/python3.6/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/auto/homes/tx229/federated/FL_v4/FLAlgorithms/trainmodel/models.py", line 315, in forward
    out = F.relu(self.bn1(self.conv1(x)))
  File "/home/tx229/anaconda3/envs/posterior-network/lib/python3.6/site-packages/torch/nn/functional.py", line 1298, in relu
    result = torch.relu(input)
RuntimeError: CUDA out of memory. Tried to allocate 72.00 MiB (GPU 0; 47.46 GiB total capacity; 8.00 GiB already allocated; 18.44 MiB free; 9.92 GiB reserved in total by PyTorch)
