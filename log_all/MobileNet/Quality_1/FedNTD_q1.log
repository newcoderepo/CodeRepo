nohup: ignoring input
================================================================================
Summary of training process:
Dataset                : Cifar10
Batch size             : 64
Learing rate           : 0.001
Number of total clients: 100
Split method           : quantity
Split parameter        : 1.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 11
Feature percentage     : 0.1
Local training loss    : NT_CE
Loss of beta           : 1.0
Algorithm              : FedAvg
Modelname              : MOBNET
Mode                   : training
Seed                   : 0
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   1,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   2,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   3,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   4,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client   5,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client   6,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client   7,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client   8,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client   9,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  10,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  11,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  12,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  13,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  14,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  15,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  16,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  17,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  18,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  19,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  20,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  21,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  22,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  23,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  24,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  25,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  27,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  28,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  29,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  30,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  31,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  32,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  33,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  34,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  35,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  36,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  37,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  38,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  39,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  40,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  41,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  42,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  43,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  44,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  45,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  47,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  48,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  49,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  50,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  51,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  52,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  53,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  54,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  55,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  56,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  57,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  58,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  59,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  60,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  61,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  62,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  63,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  64,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  65,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  66,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  67,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  68,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  69,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  70,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  71,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  72,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  73,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  74,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  75,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  76,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  77,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  78,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  79,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  80,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  81,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  82,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  83,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  84,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  85,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  86,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  87,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  88,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  89,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  90,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  91,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  92,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  93,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  94,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  95,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  96,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  97,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  98,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  99,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
0 [0] [0] [1 2 3 4 5 6 7 8 9]
0 training: Counter({0: 500}) testing iid: Counter({0: 1000})
1 [1] [1] [0 2 3 4 5 6 7 8 9]
1 training: Counter({1: 500}) testing iid: Counter({1: 1000})
2 [2] [2] [0 1 3 4 5 6 7 8 9]
2 training: Counter({2: 500}) testing iid: Counter({2: 1000})
3 [3] [3] [0 1 2 4 5 6 7 8 9]
3 training: Counter({3: 500}) testing iid: Counter({3: 1000})
4 [4] [4] [0 1 2 3 5 6 7 8 9]
4 training: Counter({4: 500}) testing iid: Counter({4: 1000})
5 [5] [5] [0 1 2 3 4 6 7 8 9]
5 training: Counter({5: 500}) testing iid: Counter({5: 1000})
6 [6] [6] [0 1 2 3 4 5 7 8 9]
6 training: Counter({6: 500}) testing iid: Counter({6: 1000})
7 [7] [7] [0 1 2 3 4 5 6 8 9]
7 training: Counter({7: 500}) testing iid: Counter({7: 1000})
8 [8] [8] [0 1 2 3 4 5 6 7 9]
8 training: Counter({8: 500}) testing iid: Counter({8: 1000})
9 [9] [9] [0 1 2 3 4 5 6 7 8]
9 training: Counter({9: 500}) testing iid: Counter({9: 1000})
10 [0] [0] [1 2 3 4 5 6 7 8 9]
10 training: Counter({0: 500}) testing iid: Counter({0: 1000})
11 [1] [1] [0 2 3 4 5 6 7 8 9]
11 training: Counter({1: 500}) testing iid: Counter({1: 1000})
12 [2] [2] [0 1 3 4 5 6 7 8 9]
12 training: Counter({2: 500}) testing iid: Counter({2: 1000})
13 [3] [3] [0 1 2 4 5 6 7 8 9]
13 training: Counter({3: 500}) testing iid: Counter({3: 1000})
14 [4] [4] [0 1 2 3 5 6 7 8 9]
14 training: Counter({4: 500}) testing iid: Counter({4: 1000})
15 [5] [5] [0 1 2 3 4 6 7 8 9]
15 training: Counter({5: 500}) testing iid: Counter({5: 1000})
16 [6] [6] [0 1 2 3 4 5 7 8 9]
16 training: Counter({6: 500}) testing iid: Counter({6: 1000})
17 [7] [7] [0 1 2 3 4 5 6 8 9]
17 training: Counter({7: 500}) testing iid: Counter({7: 1000})
18 [8] [8] [0 1 2 3 4 5 6 7 9]
18 training: Counter({8: 500}) testing iid: Counter({8: 1000})
19 [9] [9] [0 1 2 3 4 5 6 7 8]
19 training: Counter({9: 500}) testing iid: Counter({9: 1000})
20 [0] [0] [1 2 3 4 5 6 7 8 9]
20 training: Counter({0: 500}) testing iid: Counter({0: 1000})
21 [1] [1] [0 2 3 4 5 6 7 8 9]
21 training: Counter({1: 500}) testing iid: Counter({1: 1000})
22 [2] [2] [0 1 3 4 5 6 7 8 9]
22 training: Counter({2: 500}) testing iid: Counter({2: 1000})
23 [3] [3] [0 1 2 4 5 6 7 8 9]
23 training: Counter({3: 500}) testing iid: Counter({3: 1000})
24 [4] [4] [0 1 2 3 5 6 7 8 9]
24 training: Counter({4: 500}) testing iid: Counter({4: 1000})
25 [5] [5] [0 1 2 3 4 6 7 8 9]
25 training: Counter({5: 500}) testing iid: Counter({5: 1000})
26 [6] [6] [0 1 2 3 4 5 7 8 9]
26 training: Counter({6: 500}) testing iid: Counter({6: 1000})
27 [7] [7] [0 1 2 3 4 5 6 8 9]
27 training: Counter({7: 500}) testing iid: Counter({7: 1000})
28 [8] [8] [0 1 2 3 4 5 6 7 9]
28 training: Counter({8: 500}) testing iid: Counter({8: 1000})
29 [9] [9] [0 1 2 3 4 5 6 7 8]
29 training: Counter({9: 500}) testing iid: Counter({9: 1000})
30 [0] [0] [1 2 3 4 5 6 7 8 9]
30 training: Counter({0: 500}) testing iid: Counter({0: 1000})
31 [1] [1] [0 2 3 4 5 6 7 8 9]
31 training: Counter({1: 500}) testing iid: Counter({1: 1000})
32 [2] [2] [0 1 3 4 5 6 7 8 9]
32 training: Counter({2: 500}) testing iid: Counter({2: 1000})
33 [3] [3] [0 1 2 4 5 6 7 8 9]
33 training: Counter({3: 500}) testing iid: Counter({3: 1000})
34 [4] [4] [0 1 2 3 5 6 7 8 9]
34 training: Counter({4: 500}) testing iid: Counter({4: 1000})
35 [5] [5] [0 1 2 3 4 6 7 8 9]
35 training: Counter({5: 500}) testing iid: Counter({5: 1000})
36 [6] [6] [0 1 2 3 4 5 7 8 9]
36 training: Counter({6: 500}) testing iid: Counter({6: 1000})
37 [7] [7] [0 1 2 3 4 5 6 8 9]
37 training: Counter({7: 500}) testing iid: Counter({7: 1000})
38 [8] [8] [0 1 2 3 4 5 6 7 9]
38 training: Counter({8: 500}) testing iid: Counter({8: 1000})
39 [9] [9] [0 1 2 3 4 5 6 7 8]
39 training: Counter({9: 500}) testing iid: Counter({9: 1000})
40 [0] [0] [1 2 3 4 5 6 7 8 9]
40 training: Counter({0: 500}) testing iid: Counter({0: 1000})
41 [1] [1] [0 2 3 4 5 6 7 8 9]
41 training: Counter({1: 500}) testing iid: Counter({1: 1000})
42 [2] [2] [0 1 3 4 5 6 7 8 9]
42 training: Counter({2: 500}) testing iid: Counter({2: 1000})
43 [3] [3] [0 1 2 4 5 6 7 8 9]
43 training: Counter({3: 500}) testing iid: Counter({3: 1000})
44 [4] [4] [0 1 2 3 5 6 7 8 9]
44 training: Counter({4: 500}) testing iid: Counter({4: 1000})
45 [5] [5] [0 1 2 3 4 6 7 8 9]
45 training: Counter({5: 500}) testing iid: Counter({5: 1000})
46 [6] [6] [0 1 2 3 4 5 7 8 9]
46 training: Counter({6: 500}) testing iid: Counter({6: 1000})
47 [7] [7] [0 1 2 3 4 5 6 8 9]
47 training: Counter({7: 500}) testing iid: Counter({7: 1000})
48 [8] [8] [0 1 2 3 4 5 6 7 9]
48 training: Counter({8: 500}) testing iid: Counter({8: 1000})
49 [9] [9] [0 1 2 3 4 5 6 7 8]
49 training: Counter({9: 500}) testing iid: Counter({9: 1000})
50 [0] [0] [1 2 3 4 5 6 7 8 9]
50 training: Counter({0: 500}) testing iid: Counter({0: 1000})
51 [1] [1] [0 2 3 4 5 6 7 8 9]
51 training: Counter({1: 500}) testing iid: Counter({1: 1000})
52 [2] [2] [0 1 3 4 5 6 7 8 9]
52 training: Counter({2: 500}) testing iid: Counter({2: 1000})
53 [3] [3] [0 1 2 4 5 6 7 8 9]
53 training: Counter({3: 500}) testing iid: Counter({3: 1000})
54 [4] [4] [0 1 2 3 5 6 7 8 9]
54 training: Counter({4: 500}) testing iid: Counter({4: 1000})
55 [5] [5] [0 1 2 3 4 6 7 8 9]
55 training: Counter({5: 500}) testing iid: Counter({5: 1000})
56 [6] [6] [0 1 2 3 4 5 7 8 9]
56 training: Counter({6: 500}) testing iid: Counter({6: 1000})
57 [7] [7] [0 1 2 3 4 5 6 8 9]
57 training: Counter({7: 500}) testing iid: Counter({7: 1000})
58 [8] [8] [0 1 2 3 4 5 6 7 9]
58 training: Counter({8: 500}) testing iid: Counter({8: 1000})
59 [9] [9] [0 1 2 3 4 5 6 7 8]
59 training: Counter({9: 500}) testing iid: Counter({9: 1000})
60 [0] [0] [1 2 3 4 5 6 7 8 9]
60 training: Counter({0: 500}) testing iid: Counter({0: 1000})
61 [1] [1] [0 2 3 4 5 6 7 8 9]
61 training: Counter({1: 500}) testing iid: Counter({1: 1000})
62 [2] [2] [0 1 3 4 5 6 7 8 9]
62 training: Counter({2: 500}) testing iid: Counter({2: 1000})
63 [3] [3] [0 1 2 4 5 6 7 8 9]
63 training: Counter({3: 500}) testing iid: Counter({3: 1000})
64 [4] [4] [0 1 2 3 5 6 7 8 9]
64 training: Counter({4: 500}) testing iid: Counter({4: 1000})
65 [5] [5] [0 1 2 3 4 6 7 8 9]
65 training: Counter({5: 500}) testing iid: Counter({5: 1000})
66 [6] [6] [0 1 2 3 4 5 7 8 9]
66 training: Counter({6: 500}) testing iid: Counter({6: 1000})
67 [7] [7] [0 1 2 3 4 5 6 8 9]
67 training: Counter({7: 500}) testing iid: Counter({7: 1000})
68 [8] [8] [0 1 2 3 4 5 6 7 9]
68 training: Counter({8: 500}) testing iid: Counter({8: 1000})
69 [9] [9] [0 1 2 3 4 5 6 7 8]
69 training: Counter({9: 500}) testing iid: Counter({9: 1000})
70 [0] [0] [1 2 3 4 5 6 7 8 9]
70 training: Counter({0: 500}) testing iid: Counter({0: 1000})
71 [1] [1] [0 2 3 4 5 6 7 8 9]
71 training: Counter({1: 500}) testing iid: Counter({1: 1000})
72 [2] [2] [0 1 3 4 5 6 7 8 9]
72 training: Counter({2: 500}) testing iid: Counter({2: 1000})
73 [3] [3] [0 1 2 4 5 6 7 8 9]
73 training: Counter({3: 500}) testing iid: Counter({3: 1000})
74 [4] [4] [0 1 2 3 5 6 7 8 9]
74 training: Counter({4: 500}) testing iid: Counter({4: 1000})
75 [5] [5] [0 1 2 3 4 6 7 8 9]
75 training: Counter({5: 500}) testing iid: Counter({5: 1000})
76 [6] [6] [0 1 2 3 4 5 7 8 9]
76 training: Counter({6: 500}) testing iid: Counter({6: 1000})
77 [7] [7] [0 1 2 3 4 5 6 8 9]
77 training: Counter({7: 500}) testing iid: Counter({7: 1000})
78 [8] [8] [0 1 2 3 4 5 6 7 9]
78 training: Counter({8: 500}) testing iid: Counter({8: 1000})
79 [9] [9] [0 1 2 3 4 5 6 7 8]
79 training: Counter({9: 500}) testing iid: Counter({9: 1000})
80 [0] [0] [1 2 3 4 5 6 7 8 9]
80 training: Counter({0: 500}) testing iid: Counter({0: 1000})
81 [1] [1] [0 2 3 4 5 6 7 8 9]
81 training: Counter({1: 500}) testing iid: Counter({1: 1000})
82 [2] [2] [0 1 3 4 5 6 7 8 9]
82 training: Counter({2: 500}) testing iid: Counter({2: 1000})
83 [3] [3] [0 1 2 4 5 6 7 8 9]
83 training: Counter({3: 500}) testing iid: Counter({3: 1000})
84 [4] [4] [0 1 2 3 5 6 7 8 9]
84 training: Counter({4: 500}) testing iid: Counter({4: 1000})
85 [5] [5] [0 1 2 3 4 6 7 8 9]
85 training: Counter({5: 500}) testing iid: Counter({5: 1000})
86 [6] [6] [0 1 2 3 4 5 7 8 9]
86 training: Counter({6: 500}) testing iid: Counter({6: 1000})
87 [7] [7] [0 1 2 3 4 5 6 8 9]
87 training: Counter({7: 500}) testing iid: Counter({7: 1000})
88 [8] [8] [0 1 2 3 4 5 6 7 9]
88 training: Counter({8: 500}) testing iid: Counter({8: 1000})
89 [9] [9] [0 1 2 3 4 5 6 7 8]
89 training: Counter({9: 500}) testing iid: Counter({9: 1000})
90 [0] [0] [1 2 3 4 5 6 7 8 9]
90 training: Counter({0: 500}) testing iid: Counter({0: 1000})
91 [1] [1] [0 2 3 4 5 6 7 8 9]
91 training: Counter({1: 500}) testing iid: Counter({1: 1000})
92 [2] [2] [0 1 3 4 5 6 7 8 9]
92 training: Counter({2: 500}) testing iid: Counter({2: 1000})
93 [3] [3] [0 1 2 4 5 6 7 8 9]
93 training: Counter({3: 500}) testing iid: Counter({3: 1000})
94 [4] [4] [0 1 2 3 5 6 7 8 9]
94 training: Counter({4: 500}) testing iid: Counter({4: 1000})
95 [5] [5] [0 1 2 3 4 6 7 8 9]
95 training: Counter({5: 500}) testing iid: Counter({5: 1000})
96 [6] [6] [0 1 2 3 4 5 7 8 9]
96 training: Counter({6: 500}) testing iid: Counter({6: 1000})
97 [7] [7] [0 1 2 3 4 5 6 8 9]
97 training: Counter({7: 500}) testing iid: Counter({7: 1000})
98 [8] [8] [0 1 2 3 4 5 6 7 9]
98 training: Counter({8: 500}) testing iid: Counter({8: 1000})
99 [9] [9] [0 1 2 3 4 5 6 7 8]
99 training: Counter({9: 500}) testing iid: Counter({9: 1000})
Num_samples of Training set per client
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:04<06:59,  4.24s/it]  2%|▏         | 2/100 [00:04<05:07,  3.14s/it]  3%|▎         | 3/100 [00:05<03:49,  2.37s/it]  4%|▍         | 4/100 [00:05<02:55,  1.83s/it]  5%|▌         | 5/100 [00:06<02:17,  1.44s/it]  6%|▌         | 6/100 [00:07<01:50,  1.17s/it]  7%|▋         | 7/100 [00:07<01:32,  1.00it/s]  8%|▊         | 8/100 [00:08<01:19,  1.16it/s]  9%|▉         | 9/100 [00:08<01:09,  1.30it/s] 10%|█         | 10/100 [00:09<01:03,  1.41it/s] 11%|█         | 11/100 [00:09<00:58,  1.51it/s] 12%|█▏        | 12/100 [00:10<00:55,  1.59it/s] 13%|█▎        | 13/100 [00:10<00:52,  1.64it/s] 14%|█▍        | 14/100 [00:11<00:51,  1.69it/s] 15%|█▌        | 15/100 [00:12<00:49,  1.73it/s] 16%|█▌        | 16/100 [00:12<00:47,  1.76it/s] 17%|█▋        | 17/100 [00:13<00:46,  1.78it/s] 18%|█▊        | 18/100 [00:13<00:45,  1.82it/s] 19%|█▉        | 19/100 [00:14<00:44,  1.84it/s] 20%|██        | 20/100 [00:14<00:43,  1.85it/s] 21%|██        | 21/100 [00:15<00:43,  1.83it/s] 22%|██▏       | 22/100 [00:15<00:43,  1.81it/s] 23%|██▎       | 23/100 [00:16<00:42,  1.81it/s] 24%|██▍       | 24/100 [00:16<00:41,  1.83it/s] 25%|██▌       | 25/100 [00:17<00:40,  1.84it/s] 26%|██▌       | 26/100 [00:18<00:40,  1.84it/s] 27%|██▋       | 27/100 [00:18<00:39,  1.85it/s] 28%|██▊       | 28/100 [00:19<00:39,  1.84it/s] 29%|██▉       | 29/100 [00:19<00:38,  1.84it/s] 30%|███       | 30/100 [00:20<00:37,  1.85it/s] 31%|███       | 31/100 [00:20<00:37,  1.86it/s] 32%|███▏      | 32/100 [00:21<00:36,  1.84it/s] 33%|███▎      | 33/100 [00:21<00:36,  1.83it/s] 34%|███▍      | 34/100 [00:22<00:36,  1.83it/s] 35%|███▌      | 35/100 [00:22<00:35,  1.82it/s] 36%|███▌      | 36/100 [00:23<00:34,  1.83it/s] 37%|███▋      | 37/100 [00:24<00:34,  1.82it/s] 38%|███▊      | 38/100 [00:24<00:33,  1.83it/s] 39%|███▉      | 39/100 [00:25<00:33,  1.84it/s] 40%|████      | 40/100 [00:25<00:32,  1.85it/s] 41%|████      | 41/100 [00:29<01:31,  1.55s/it] 42%|████▏     | 42/100 [00:30<01:12,  1.25s/it] 43%|████▎     | 43/100 [00:30<00:58,  1.03s/it] 44%|████▍     | 44/100 [00:31<00:49,  1.13it/s] 45%|████▌     | 45/100 [00:31<00:43,  1.27it/s] 46%|████▌     | 46/100 [00:32<00:38,  1.40it/s] 47%|████▋     | 47/100 [00:32<00:35,  1.50it/s] 48%|████▊     | 48/100 [00:33<00:32,  1.59it/s] 49%|████▉     | 49/100 [00:33<00:30,  1.68it/s] 50%|█████     | 50/100 [00:34<00:29,  1.72it/s] 51%|█████     | 51/100 [00:34<00:27,  1.75it/s] 52%|█████▏    | 52/100 [00:35<00:27,  1.76it/s] 53%|█████▎    | 53/100 [00:36<00:26,  1.77it/s] 54%|█████▍    | 54/100 [00:36<00:25,  1.79it/s] 55%|█████▌    | 55/100 [00:37<00:24,  1.80it/s] 56%|█████▌    | 56/100 [00:37<00:24,  1.80it/s] 57%|█████▋    | 57/100 [00:38<00:23,  1.81it/s] 58%|█████▊    | 58/100 [00:38<00:23,  1.82it/s] 59%|█████▉    | 59/100 [00:39<00:22,  1.85it/s] 60%|██████    | 60/100 [00:39<00:21,  1.85it/s] 61%|██████    | 61/100 [00:40<00:21,  1.82it/s] 62%|██████▏   | 62/100 [00:40<00:20,  1.83it/s] 63%|██████▎   | 63/100 [00:41<00:20,  1.84it/s] 64%|██████▍   | 64/100 [00:42<00:19,  1.84it/s] 65%|██████▌   | 65/100 [00:42<00:18,  1.84it/s] 66%|██████▌   | 66/100 [00:43<00:18,  1.82it/s] 67%|██████▋   | 67/100 [00:43<00:18,  1.80it/s] 68%|██████▊   | 68/100 [00:44<00:17,  1.80it/s] 69%|██████▉   | 69/100 [00:44<00:17,  1.82it/s] 70%|███████   | 70/100 [00:45<00:16,  1.83it/s] 71%|███████   | 71/100 [00:45<00:15,  1.84it/s] 72%|███████▏  | 72/100 [00:46<00:15,  1.84it/s] 73%|███████▎  | 73/100 [00:46<00:14,  1.83it/s] 74%|███████▍  | 74/100 [00:47<00:14,  1.81it/s] 75%|███████▌  | 75/100 [00:48<00:13,  1.82it/s] 76%|███████▌  | 76/100 [00:48<00:13,  1.83it/s] 77%|███████▋  | 77/100 [00:49<00:12,  1.83it/s] 78%|███████▊  | 78/100 [00:49<00:12,  1.81it/s] 79%|███████▉  | 79/100 [00:50<00:11,  1.78it/s] 80%|████████  | 80/100 [00:50<00:11,  1.79it/s] 81%|████████  | 81/100 [00:51<00:10,  1.80it/s] 82%|████████▏ | 82/100 [00:52<00:10,  1.79it/s] 83%|████████▎ | 83/100 [00:56<00:27,  1.64s/it] 84%|████████▍ | 84/100 [00:56<00:20,  1.31s/it] 85%|████████▌ | 85/100 [00:57<00:16,  1.08s/it] 86%|████████▌ | 86/100 [00:57<00:12,  1.09it/s] 87%|████████▋ | 87/100 [00:58<00:10,  1.24it/s] 88%|████████▊ | 88/100 [00:58<00:08,  1.37it/s] 89%|████████▉ | 89/100 [00:59<00:07,  1.49it/s] 90%|█████████ | 90/100 [00:59<00:06,  1.56it/s] 91%|█████████ | 91/100 [01:00<00:05,  1.64it/s] 92%|█████████▏| 92/100 [01:01<00:04,  1.71it/s] 93%|█████████▎| 93/100 [01:01<00:03,  1.76it/s] 94%|█████████▍| 94/100 [01:02<00:03,  1.78it/s] 95%|█████████▌| 95/100 [01:02<00:02,  1.80it/s] 96%|█████████▌| 96/100 [01:03<00:02,  1.80it/s] 97%|█████████▋| 97/100 [01:03<00:01,  1.80it/s] 98%|█████████▊| 98/100 [01:04<00:01,  1.82it/s] 99%|█████████▉| 99/100 [01:04<00:00,  1.83it/s]100%|██████████| 100/100 [01:05<00:00,  1.84it/s]100%|██████████| 100/100 [01:05<00:00,  1.53it/s]
Number of users per round / total users: 10  /  100
Finished creating FL server.
=== Training starts: algorithm FedAvg ===
-------------Round number:  0  -------------
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1060) KL loss: tensor(0.0414)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1013) KL loss: tensor(0.0360)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1021) KL loss: tensor(0.0321)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1082) KL loss: tensor(0.0376)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.0969) KL loss: tensor(0.0269)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1045) KL loss: tensor(0.0390)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1040) KL loss: tensor(0.0391)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1053) KL loss: tensor(0.0399)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.0999) KL loss: tensor(0.0332)
loss: NT_CE learning rate: 0.001
training loss: tensor(0.1055) KL loss: tensor(0.0349)
Global Model Acc on global data: 0.1 length of data: 10000
save a model
-------------Round number:  1  -------------
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.5970) KL loss: tensor(0.1015)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.4006) KL loss: tensor(0.1227)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.2650) KL loss: tensor(0.1273)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.6772) KL loss: tensor(0.1101)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.2621) KL loss: tensor(0.1227)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.6301) KL loss: tensor(0.1124)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.1128) KL loss: tensor(0.1037)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.4096) KL loss: tensor(0.1198)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.6264) KL loss: tensor(0.1060)
loss: NT_CE learning rate: 0.000982
training loss: tensor(0.1754) KL loss: tensor(0.1296)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  2  -------------
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.0372) KL loss: tensor(0.0262)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1619) KL loss: tensor(0.0495)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1157) KL loss: tensor(0.0359)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1643) KL loss: tensor(0.0439)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1230) KL loss: tensor(0.0447)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.0355) KL loss: tensor(0.0246)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1494) KL loss: tensor(0.0437)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.1801) KL loss: tensor(0.0388)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.2906) KL loss: tensor(0.0453)
loss: NT_CE learning rate: 0.000964
training loss: tensor(0.0358) KL loss: tensor(0.0249)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  3  -------------
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.0311) KL loss: tensor(0.0259)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.2745) KL loss: tensor(0.0547)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.1524) KL loss: tensor(0.0360)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.2556) KL loss: tensor(0.0537)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.1523) KL loss: tensor(0.0371)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.0306) KL loss: tensor(0.0257)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.3068) KL loss: tensor(0.0558)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.2792) KL loss: tensor(0.0628)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.4005) KL loss: tensor(0.0637)
loss: NT_CE learning rate: 0.000946
training loss: tensor(0.3886) KL loss: tensor(0.0651)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  4  -------------
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.3648) KL loss: tensor(0.0445)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.3652) KL loss: tensor(0.0501)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.0617) KL loss: tensor(0.0216)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.0630) KL loss: tensor(0.0249)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.0334) KL loss: tensor(0.0244)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.1942) KL loss: tensor(0.0404)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.0337) KL loss: tensor(0.0266)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.2102) KL loss: tensor(0.0362)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.4835) KL loss: tensor(0.0651)
loss: NT_CE learning rate: 0.0009280000000000001
training loss: tensor(0.2574) KL loss: tensor(0.0444)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  5  -------------
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.0490) KL loss: tensor(0.0214)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.4296) KL loss: tensor(0.0543)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.0470) KL loss: tensor(0.0212)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.4508) KL loss: tensor(0.0519)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.2049) KL loss: tensor(0.0404)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.0297) KL loss: tensor(0.0185)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.1484) KL loss: tensor(0.0310)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.1623) KL loss: tensor(0.0362)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.1040) KL loss: tensor(0.0300)
loss: NT_CE learning rate: 0.00091
training loss: tensor(0.2953) KL loss: tensor(0.0471)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  6  -------------
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.1449) KL loss: tensor(0.0267)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.1885) KL loss: tensor(0.0292)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.0693) KL loss: tensor(0.0235)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.2442) KL loss: tensor(0.0303)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.0685) KL loss: tensor(0.0235)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.0462) KL loss: tensor(0.0341)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.0725) KL loss: tensor(0.0256)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.1568) KL loss: tensor(0.0295)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.1966) KL loss: tensor(0.0270)
loss: NT_CE learning rate: 0.000892
training loss: tensor(0.4916) KL loss: tensor(0.0451)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  7  -------------
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.1291) KL loss: tensor(0.0312)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.1424) KL loss: tensor(0.0262)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.6017) KL loss: tensor(0.0508)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.4427) KL loss: tensor(0.0394)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.9795) KL loss: tensor(0.0725)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.3072) KL loss: tensor(0.0297)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.2653) KL loss: tensor(0.0328)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.4830) KL loss: tensor(0.0354)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.1476) KL loss: tensor(0.0292)
loss: NT_CE learning rate: 0.000874
training loss: tensor(0.5505) KL loss: tensor(0.0491)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  8  -------------
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1013) KL loss: tensor(0.0401)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1483) KL loss: tensor(0.0503)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1049) KL loss: tensor(0.0247)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1969) KL loss: tensor(0.0312)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1839) KL loss: tensor(0.0481)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.4513) KL loss: tensor(0.0430)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.0436) KL loss: tensor(0.0298)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.3938) KL loss: tensor(0.0384)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.2532) KL loss: tensor(0.0369)
loss: NT_CE learning rate: 0.000856
training loss: tensor(0.1377) KL loss: tensor(0.0391)
Global Model Acc on global data: 0.1029 length of data: 10000
save a model
-------------Round number:  9  -------------
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.1445) KL loss: tensor(0.0254)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.1955) KL loss: tensor(0.0245)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.0791) KL loss: tensor(0.0448)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.4376) KL loss: tensor(0.0437)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.0703) KL loss: tensor(0.0516)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.1383) KL loss: tensor(0.0224)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.0587) KL loss: tensor(0.0409)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.1978) KL loss: tensor(0.0329)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.1839) KL loss: tensor(0.0239)
loss: NT_CE learning rate: 0.0008380000000000001
training loss: tensor(0.0560) KL loss: tensor(0.0358)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  10  -------------
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.2479) KL loss: tensor(0.0224)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.4580) KL loss: tensor(0.0316)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.0341) KL loss: tensor(0.0315)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.3771) KL loss: tensor(0.0257)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.1762) KL loss: tensor(0.0223)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.0284) KL loss: tensor(0.0255)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.2745) KL loss: tensor(0.0293)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.3757) KL loss: tensor(0.0264)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.4862) KL loss: tensor(0.0319)
loss: NT_CE learning rate: 0.0008200000000000001
training loss: tensor(0.4405) KL loss: tensor(0.0343)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  11  -------------
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.2016) KL loss: tensor(0.0424)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.1329) KL loss: tensor(0.0288)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.4536) KL loss: tensor(0.0456)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.2185) KL loss: tensor(0.0333)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.2735) KL loss: tensor(0.0267)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.1881) KL loss: tensor(0.0253)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.5677) KL loss: tensor(0.0568)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.0959) KL loss: tensor(0.0217)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.3586) KL loss: tensor(0.0445)
loss: NT_CE learning rate: 0.0008020000000000001
training loss: tensor(0.2974) KL loss: tensor(0.0340)
Global Model Acc on global data: 0.1 length of data: 10000
-------------Round number:  12  -------------
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.4300) KL loss: tensor(0.0324)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.0989) KL loss: tensor(0.0212)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.1517) KL loss: tensor(0.0244)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.4010) KL loss: tensor(0.0168)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.0652) KL loss: tensor(0.0185)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.0998) KL loss: tensor(0.0215)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.0687) KL loss: tensor(0.0409)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.4436) KL loss: tensor(0.0349)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.0899) KL loss: tensor(0.0149)
loss: NT_CE learning rate: 0.0007840000000000001
training loss: tensor(0.2085) KL loss: tensor(0.0155)
