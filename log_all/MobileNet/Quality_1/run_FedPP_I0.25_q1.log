nohup: ignoring input
================================================================================
Summary of training process:
Dataset                : Cifar10
Batch size             : 64
Learing rate           : 0.001
Number of total clients: 100
Split method           : quantity
Split parameter        : 1.0
Clients per round      : 10
Number of global rounds: 100
Number of local rounds : 10
Feature from layer     : 0
Feature percentage     : 0.25
Local training loss    : CE_CE_KL
Loss of beta           : 1.0
Algorithm              : FedFea
Modelname              : MOBNET
Mode                   : training
Seed                   : 0
================================================================================
Files already downloaded and verified
Files already downloaded and verified
Class frequencies:
client,class0,class1,class2,class3,class4,class5,class6,class7,class8,class9,Amount
Client   0,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   1,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   2,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   3,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client   4,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client   5,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client   6,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client   7,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client   8,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client   9,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  10,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  11,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  12,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  13,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  14,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  15,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  16,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  17,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  18,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  19,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  20,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  21,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  22,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  23,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  24,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  25,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  26,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  27,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  28,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  29,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  30,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  31,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  32,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  33,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  34,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  35,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  36,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  37,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  38,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  39,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  40,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  41,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  42,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  43,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  44,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  45,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  46,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  47,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  48,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  49,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  50,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  51,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  52,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  53,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  54,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  55,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  56,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  57,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  58,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  59,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  60,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  61,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  62,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  63,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  64,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  65,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  66,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  67,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  68,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  69,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  70,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  71,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  72,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  73,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  74,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  75,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  76,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  77,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  78,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  79,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  80,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  81,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  82,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  83,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  84,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  85,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  86,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  87,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  88,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  89,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
Client  90,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  91,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  92,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  93,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,0.00,500
Client  94,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,0.00,500
Client  95,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,0.00,500
Client  96,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,0.00,500
Client  97,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,0.00,500
Client  98,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,0.00,500
Client  99,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.000,500
0 [0] [0] [1 2 3 4 5 6 7 8 9]
0 training: Counter({0: 500}) testing iid: Counter({0: 1000})
1 [1] [1] [0 2 3 4 5 6 7 8 9]
1 training: Counter({1: 500}) testing iid: Counter({1: 1000})
2 [2] [2] [0 1 3 4 5 6 7 8 9]
2 training: Counter({2: 500}) testing iid: Counter({2: 1000})
3 [3] [3] [0 1 2 4 5 6 7 8 9]
3 training: Counter({3: 500}) testing iid: Counter({3: 1000})
4 [4] [4] [0 1 2 3 5 6 7 8 9]
4 training: Counter({4: 500}) testing iid: Counter({4: 1000})
5 [5] [5] [0 1 2 3 4 6 7 8 9]
5 training: Counter({5: 500}) testing iid: Counter({5: 1000})
6 [6] [6] [0 1 2 3 4 5 7 8 9]
6 training: Counter({6: 500}) testing iid: Counter({6: 1000})
7 [7] [7] [0 1 2 3 4 5 6 8 9]
7 training: Counter({7: 500}) testing iid: Counter({7: 1000})
8 [8] [8] [0 1 2 3 4 5 6 7 9]
8 training: Counter({8: 500}) testing iid: Counter({8: 1000})
9 [9] [9] [0 1 2 3 4 5 6 7 8]
9 training: Counter({9: 500}) testing iid: Counter({9: 1000})
10 [0] [0] [1 2 3 4 5 6 7 8 9]
10 training: Counter({0: 500}) testing iid: Counter({0: 1000})
11 [1] [1] [0 2 3 4 5 6 7 8 9]
11 training: Counter({1: 500}) testing iid: Counter({1: 1000})
12 [2] [2] [0 1 3 4 5 6 7 8 9]
12 training: Counter({2: 500}) testing iid: Counter({2: 1000})
13 [3] [3] [0 1 2 4 5 6 7 8 9]
13 training: Counter({3: 500}) testing iid: Counter({3: 1000})
14 [4] [4] [0 1 2 3 5 6 7 8 9]
14 training: Counter({4: 500}) testing iid: Counter({4: 1000})
15 [5] [5] [0 1 2 3 4 6 7 8 9]
15 training: Counter({5: 500}) testing iid: Counter({5: 1000})
16 [6] [6] [0 1 2 3 4 5 7 8 9]
16 training: Counter({6: 500}) testing iid: Counter({6: 1000})
17 [7] [7] [0 1 2 3 4 5 6 8 9]
17 training: Counter({7: 500}) testing iid: Counter({7: 1000})
18 [8] [8] [0 1 2 3 4 5 6 7 9]
18 training: Counter({8: 500}) testing iid: Counter({8: 1000})
19 [9] [9] [0 1 2 3 4 5 6 7 8]
19 training: Counter({9: 500}) testing iid: Counter({9: 1000})
20 [0] [0] [1 2 3 4 5 6 7 8 9]
20 training: Counter({0: 500}) testing iid: Counter({0: 1000})
21 [1] [1] [0 2 3 4 5 6 7 8 9]
21 training: Counter({1: 500}) testing iid: Counter({1: 1000})
22 [2] [2] [0 1 3 4 5 6 7 8 9]
22 training: Counter({2: 500}) testing iid: Counter({2: 1000})
23 [3] [3] [0 1 2 4 5 6 7 8 9]
23 training: Counter({3: 500}) testing iid: Counter({3: 1000})
24 [4] [4] [0 1 2 3 5 6 7 8 9]
24 training: Counter({4: 500}) testing iid: Counter({4: 1000})
25 [5] [5] [0 1 2 3 4 6 7 8 9]
25 training: Counter({5: 500}) testing iid: Counter({5: 1000})
26 [6] [6] [0 1 2 3 4 5 7 8 9]
26 training: Counter({6: 500}) testing iid: Counter({6: 1000})
27 [7] [7] [0 1 2 3 4 5 6 8 9]
27 training: Counter({7: 500}) testing iid: Counter({7: 1000})
28 [8] [8] [0 1 2 3 4 5 6 7 9]
28 training: Counter({8: 500}) testing iid: Counter({8: 1000})
29 [9] [9] [0 1 2 3 4 5 6 7 8]
29 training: Counter({9: 500}) testing iid: Counter({9: 1000})
30 [0] [0] [1 2 3 4 5 6 7 8 9]
30 training: Counter({0: 500}) testing iid: Counter({0: 1000})
31 [1] [1] [0 2 3 4 5 6 7 8 9]
31 training: Counter({1: 500}) testing iid: Counter({1: 1000})
32 [2] [2] [0 1 3 4 5 6 7 8 9]
32 training: Counter({2: 500}) testing iid: Counter({2: 1000})
33 [3] [3] [0 1 2 4 5 6 7 8 9]
33 training: Counter({3: 500}) testing iid: Counter({3: 1000})
34 [4] [4] [0 1 2 3 5 6 7 8 9]
34 training: Counter({4: 500}) testing iid: Counter({4: 1000})
35 [5] [5] [0 1 2 3 4 6 7 8 9]
35 training: Counter({5: 500}) testing iid: Counter({5: 1000})
36 [6] [6] [0 1 2 3 4 5 7 8 9]
36 training: Counter({6: 500}) testing iid: Counter({6: 1000})
37 [7] [7] [0 1 2 3 4 5 6 8 9]
37 training: Counter({7: 500}) testing iid: Counter({7: 1000})
38 [8] [8] [0 1 2 3 4 5 6 7 9]
38 training: Counter({8: 500}) testing iid: Counter({8: 1000})
39 [9] [9] [0 1 2 3 4 5 6 7 8]
39 training: Counter({9: 500}) testing iid: Counter({9: 1000})
40 [0] [0] [1 2 3 4 5 6 7 8 9]
40 training: Counter({0: 500}) testing iid: Counter({0: 1000})
41 [1] [1] [0 2 3 4 5 6 7 8 9]
41 training: Counter({1: 500}) testing iid: Counter({1: 1000})
42 [2] [2] [0 1 3 4 5 6 7 8 9]
42 training: Counter({2: 500}) testing iid: Counter({2: 1000})
43 [3] [3] [0 1 2 4 5 6 7 8 9]
43 training: Counter({3: 500}) testing iid: Counter({3: 1000})
44 [4] [4] [0 1 2 3 5 6 7 8 9]
44 training: Counter({4: 500}) testing iid: Counter({4: 1000})
45 [5] [5] [0 1 2 3 4 6 7 8 9]
45 training: Counter({5: 500}) testing iid: Counter({5: 1000})
46 [6] [6] [0 1 2 3 4 5 7 8 9]
46 training: Counter({6: 500}) testing iid: Counter({6: 1000})
47 [7] [7] [0 1 2 3 4 5 6 8 9]
47 training: Counter({7: 500}) testing iid: Counter({7: 1000})
48 [8] [8] [0 1 2 3 4 5 6 7 9]
48 training: Counter({8: 500}) testing iid: Counter({8: 1000})
49 [9] [9] [0 1 2 3 4 5 6 7 8]
49 training: Counter({9: 500}) testing iid: Counter({9: 1000})
50 [0] [0] [1 2 3 4 5 6 7 8 9]
50 training: Counter({0: 500}) testing iid: Counter({0: 1000})
51 [1] [1] [0 2 3 4 5 6 7 8 9]
51 training: Counter({1: 500}) testing iid: Counter({1: 1000})
52 [2] [2] [0 1 3 4 5 6 7 8 9]
52 training: Counter({2: 500}) testing iid: Counter({2: 1000})
53 [3] [3] [0 1 2 4 5 6 7 8 9]
53 training: Counter({3: 500}) testing iid: Counter({3: 1000})
54 [4] [4] [0 1 2 3 5 6 7 8 9]
54 training: Counter({4: 500}) testing iid: Counter({4: 1000})
55 [5] [5] [0 1 2 3 4 6 7 8 9]
55 training: Counter({5: 500}) testing iid: Counter({5: 1000})
56 [6] [6] [0 1 2 3 4 5 7 8 9]
56 training: Counter({6: 500}) testing iid: Counter({6: 1000})
57 [7] [7] [0 1 2 3 4 5 6 8 9]
57 training: Counter({7: 500}) testing iid: Counter({7: 1000})
58 [8] [8] [0 1 2 3 4 5 6 7 9]
58 training: Counter({8: 500}) testing iid: Counter({8: 1000})
59 [9] [9] [0 1 2 3 4 5 6 7 8]
59 training: Counter({9: 500}) testing iid: Counter({9: 1000})
60 [0] [0] [1 2 3 4 5 6 7 8 9]
60 training: Counter({0: 500}) testing iid: Counter({0: 1000})
61 [1] [1] [0 2 3 4 5 6 7 8 9]
61 training: Counter({1: 500}) testing iid: Counter({1: 1000})
62 [2] [2] [0 1 3 4 5 6 7 8 9]
62 training: Counter({2: 500}) testing iid: Counter({2: 1000})
63 [3] [3] [0 1 2 4 5 6 7 8 9]
63 training: Counter({3: 500}) testing iid: Counter({3: 1000})
64 [4] [4] [0 1 2 3 5 6 7 8 9]
64 training: Counter({4: 500}) testing iid: Counter({4: 1000})
65 [5] [5] [0 1 2 3 4 6 7 8 9]
65 training: Counter({5: 500}) testing iid: Counter({5: 1000})
66 [6] [6] [0 1 2 3 4 5 7 8 9]
66 training: Counter({6: 500}) testing iid: Counter({6: 1000})
67 [7] [7] [0 1 2 3 4 5 6 8 9]
67 training: Counter({7: 500}) testing iid: Counter({7: 1000})
68 [8] [8] [0 1 2 3 4 5 6 7 9]
68 training: Counter({8: 500}) testing iid: Counter({8: 1000})
69 [9] [9] [0 1 2 3 4 5 6 7 8]
69 training: Counter({9: 500}) testing iid: Counter({9: 1000})
70 [0] [0] [1 2 3 4 5 6 7 8 9]
70 training: Counter({0: 500}) testing iid: Counter({0: 1000})
71 [1] [1] [0 2 3 4 5 6 7 8 9]
71 training: Counter({1: 500}) testing iid: Counter({1: 1000})
72 [2] [2] [0 1 3 4 5 6 7 8 9]
72 training: Counter({2: 500}) testing iid: Counter({2: 1000})
73 [3] [3] [0 1 2 4 5 6 7 8 9]
73 training: Counter({3: 500}) testing iid: Counter({3: 1000})
74 [4] [4] [0 1 2 3 5 6 7 8 9]
74 training: Counter({4: 500}) testing iid: Counter({4: 1000})
75 [5] [5] [0 1 2 3 4 6 7 8 9]
75 training: Counter({5: 500}) testing iid: Counter({5: 1000})
76 [6] [6] [0 1 2 3 4 5 7 8 9]
76 training: Counter({6: 500}) testing iid: Counter({6: 1000})
77 [7] [7] [0 1 2 3 4 5 6 8 9]
77 training: Counter({7: 500}) testing iid: Counter({7: 1000})
78 [8] [8] [0 1 2 3 4 5 6 7 9]
78 training: Counter({8: 500}) testing iid: Counter({8: 1000})
79 [9] [9] [0 1 2 3 4 5 6 7 8]
79 training: Counter({9: 500}) testing iid: Counter({9: 1000})
80 [0] [0] [1 2 3 4 5 6 7 8 9]
80 training: Counter({0: 500}) testing iid: Counter({0: 1000})
81 [1] [1] [0 2 3 4 5 6 7 8 9]
81 training: Counter({1: 500}) testing iid: Counter({1: 1000})
82 [2] [2] [0 1 3 4 5 6 7 8 9]
82 training: Counter({2: 500}) testing iid: Counter({2: 1000})
83 [3] [3] [0 1 2 4 5 6 7 8 9]
83 training: Counter({3: 500}) testing iid: Counter({3: 1000})
84 [4] [4] [0 1 2 3 5 6 7 8 9]
84 training: Counter({4: 500}) testing iid: Counter({4: 1000})
85 [5] [5] [0 1 2 3 4 6 7 8 9]
85 training: Counter({5: 500}) testing iid: Counter({5: 1000})
86 [6] [6] [0 1 2 3 4 5 7 8 9]
86 training: Counter({6: 500}) testing iid: Counter({6: 1000})
87 [7] [7] [0 1 2 3 4 5 6 8 9]
87 training: Counter({7: 500}) testing iid: Counter({7: 1000})
88 [8] [8] [0 1 2 3 4 5 6 7 9]
88 training: Counter({8: 500}) testing iid: Counter({8: 1000})
89 [9] [9] [0 1 2 3 4 5 6 7 8]
89 training: Counter({9: 500}) testing iid: Counter({9: 1000})
90 [0] [0] [1 2 3 4 5 6 7 8 9]
90 training: Counter({0: 500}) testing iid: Counter({0: 1000})
91 [1] [1] [0 2 3 4 5 6 7 8 9]
91 training: Counter({1: 500}) testing iid: Counter({1: 1000})
92 [2] [2] [0 1 3 4 5 6 7 8 9]
92 training: Counter({2: 500}) testing iid: Counter({2: 1000})
93 [3] [3] [0 1 2 4 5 6 7 8 9]
93 training: Counter({3: 500}) testing iid: Counter({3: 1000})
94 [4] [4] [0 1 2 3 5 6 7 8 9]
94 training: Counter({4: 500}) testing iid: Counter({4: 1000})
95 [5] [5] [0 1 2 3 4 6 7 8 9]
95 training: Counter({5: 500}) testing iid: Counter({5: 1000})
96 [6] [6] [0 1 2 3 4 5 7 8 9]
96 training: Counter({6: 500}) testing iid: Counter({6: 1000})
97 [7] [7] [0 1 2 3 4 5 6 8 9]
97 training: Counter({7: 500}) testing iid: Counter({7: 1000})
98 [8] [8] [0 1 2 3 4 5 6 7 9]
98 training: Counter({8: 500}) testing iid: Counter({8: 1000})
99 [9] [9] [0 1 2 3 4 5 6 7 8]
99 training: Counter({9: 500}) testing iid: Counter({9: 1000})
Num_samples of Training set per client
Total_training_samples: 50000
Global test set: 10000
Finish Generating Samples, distribution saved
MobileNetV2(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): Block(
      (conv1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Block(
      (conv1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
      (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (3): Block(
      (conv1): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
      (bn2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (4): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (5): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (6): Block(
      (conv1): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
      (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (7): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (8): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (9): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (10): Block(
      (conv1): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
      (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (12): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (13): Block(
      (conv1): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
      (bn2): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (14): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (15): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (16): Block(
      (conv1): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
      (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential(
        (0): Conv2d(160, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn2): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=1280, out_features=10, bias=True)
)
number of parameters: 2296922
clients initializting...
output size: 10
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:04<06:36,  4.01s/it]  2%|▏         | 2/100 [00:04<04:51,  2.97s/it]  3%|▎         | 3/100 [00:05<03:36,  2.24s/it]  4%|▍         | 4/100 [00:05<02:45,  1.73s/it]  5%|▌         | 5/100 [00:06<02:10,  1.37s/it]  6%|▌         | 6/100 [00:06<01:45,  1.12s/it]  7%|▋         | 7/100 [00:07<01:29,  1.04it/s]  8%|▊         | 8/100 [00:07<01:17,  1.19it/s]  9%|▉         | 9/100 [00:08<01:08,  1.33it/s] 10%|█         | 10/100 [00:08<01:02,  1.45it/s] 11%|█         | 11/100 [00:09<00:57,  1.54it/s] 12%|█▏        | 12/100 [00:10<00:54,  1.62it/s] 13%|█▎        | 13/100 [00:10<00:51,  1.68it/s] 14%|█▍        | 14/100 [00:11<00:49,  1.74it/s] 15%|█▌        | 15/100 [00:11<00:47,  1.78it/s] 16%|█▌        | 16/100 [00:12<00:46,  1.82it/s] 17%|█▋        | 17/100 [00:12<00:44,  1.85it/s] 18%|█▊        | 18/100 [00:13<00:43,  1.87it/s] 19%|█▉        | 19/100 [00:13<00:44,  1.84it/s] 20%|██        | 20/100 [00:14<00:43,  1.85it/s] 21%|██        | 21/100 [00:14<00:42,  1.85it/s] 22%|██▏       | 22/100 [00:15<00:43,  1.79it/s] 23%|██▎       | 23/100 [00:15<00:42,  1.80it/s] 24%|██▍       | 24/100 [00:16<00:42,  1.80it/s] 25%|██▌       | 25/100 [00:17<00:41,  1.81it/s] 26%|██▌       | 26/100 [00:17<00:40,  1.82it/s] 27%|██▋       | 27/100 [00:18<00:39,  1.83it/s] 28%|██▊       | 28/100 [00:18<00:39,  1.84it/s] 29%|██▉       | 29/100 [00:19<00:38,  1.85it/s] 30%|███       | 30/100 [00:19<00:37,  1.85it/s] 31%|███       | 31/100 [00:20<00:37,  1.86it/s] 32%|███▏      | 32/100 [00:20<00:36,  1.84it/s] 33%|███▎      | 33/100 [00:21<00:36,  1.85it/s] 34%|███▍      | 34/100 [00:21<00:35,  1.84it/s] 35%|███▌      | 35/100 [00:22<00:35,  1.82it/s] 36%|███▌      | 36/100 [00:23<00:35,  1.82it/s] 37%|███▋      | 37/100 [00:23<00:35,  1.79it/s] 38%|███▊      | 38/100 [00:24<00:34,  1.79it/s] 39%|███▉      | 39/100 [00:24<00:33,  1.79it/s] 40%|████      | 40/100 [00:25<00:33,  1.79it/s] 41%|████      | 41/100 [00:29<01:33,  1.59s/it] 42%|████▏     | 42/100 [00:29<01:13,  1.28s/it] 43%|████▎     | 43/100 [00:30<01:00,  1.06s/it] 44%|████▍     | 44/100 [00:30<00:51,  1.10it/s] 45%|████▌     | 45/100 [00:31<00:43,  1.25it/s] 46%|████▌     | 46/100 [00:32<00:38,  1.40it/s] 47%|████▋     | 47/100 [00:32<00:34,  1.52it/s] 48%|████▊     | 48/100 [00:33<00:32,  1.58it/s] 49%|████▉     | 49/100 [00:33<00:31,  1.62it/s] 50%|█████     | 50/100 [00:34<00:30,  1.66it/s] 51%|█████     | 51/100 [00:34<00:28,  1.69it/s] 52%|█████▏    | 52/100 [00:35<00:28,  1.71it/s] 53%|█████▎    | 53/100 [00:35<00:27,  1.73it/s] 54%|█████▍    | 54/100 [00:36<00:26,  1.76it/s] 55%|█████▌    | 55/100 [00:37<00:25,  1.77it/s] 56%|█████▌    | 56/100 [00:37<00:24,  1.79it/s] 57%|█████▋    | 57/100 [00:38<00:23,  1.80it/s] 58%|█████▊    | 58/100 [00:38<00:23,  1.80it/s] 59%|█████▉    | 59/100 [00:39<00:23,  1.78it/s] 60%|██████    | 60/100 [00:39<00:22,  1.77it/s] 61%|██████    | 61/100 [00:40<00:21,  1.77it/s] 62%|██████▏   | 62/100 [00:40<00:20,  1.81it/s] 63%|██████▎   | 63/100 [00:41<00:19,  1.85it/s] 64%|██████▍   | 64/100 [00:41<00:19,  1.87it/s] 65%|██████▌   | 65/100 [00:42<00:18,  1.90it/s] 66%|██████▌   | 66/100 [00:43<00:17,  1.92it/s] 67%|██████▋   | 67/100 [00:43<00:17,  1.93it/s] 68%|██████▊   | 68/100 [00:44<00:16,  1.92it/s] 69%|██████▉   | 69/100 [00:44<00:16,  1.91it/s] 70%|███████   | 70/100 [00:45<00:15,  1.91it/s] 71%|███████   | 71/100 [00:45<00:15,  1.89it/s] 72%|███████▏  | 72/100 [00:46<00:14,  1.91it/s] 73%|███████▎  | 73/100 [00:46<00:14,  1.91it/s] 74%|███████▍  | 74/100 [00:47<00:13,  1.92it/s] 75%|███████▌  | 75/100 [00:47<00:13,  1.92it/s] 76%|███████▌  | 76/100 [00:48<00:12,  1.91it/s] 77%|███████▋  | 77/100 [00:48<00:11,  1.92it/s] 78%|███████▊  | 78/100 [00:49<00:11,  1.88it/s] 79%|███████▉  | 79/100 [00:49<00:11,  1.85it/s] 80%|████████  | 80/100 [00:50<00:10,  1.84it/s] 81%|████████  | 81/100 [00:50<00:10,  1.83it/s] 82%|████████▏ | 82/100 [00:51<00:09,  1.84it/s] 83%|████████▎ | 83/100 [00:55<00:26,  1.55s/it] 84%|████████▍ | 84/100 [00:55<00:19,  1.25s/it] 85%|████████▌ | 85/100 [00:56<00:15,  1.03s/it] 86%|████████▌ | 86/100 [00:57<00:12,  1.13it/s] 87%|████████▋ | 87/100 [00:57<00:10,  1.27it/s] 88%|████████▊ | 88/100 [00:58<00:08,  1.40it/s] 89%|████████▉ | 89/100 [00:58<00:07,  1.50it/s] 90%|█████████ | 90/100 [00:59<00:06,  1.58it/s] 91%|█████████ | 91/100 [00:59<00:05,  1.66it/s] 92%|█████████▏| 92/100 [01:00<00:04,  1.70it/s] 93%|█████████▎| 93/100 [01:00<00:04,  1.73it/s] 94%|█████████▍| 94/100 [01:01<00:03,  1.75it/s] 95%|█████████▌| 95/100 [01:01<00:02,  1.76it/s] 96%|█████████▌| 96/100 [01:02<00:02,  1.78it/s] 97%|█████████▋| 97/100 [01:03<00:01,  1.78it/s] 98%|█████████▊| 98/100 [01:03<00:01,  1.78it/s] 99%|█████████▉| 99/100 [01:04<00:00,  1.77it/s]100%|██████████| 100/100 [01:04<00:00,  1.76it/s]100%|██████████| 100/100 [01:04<00:00,  1.54it/s]
Number of users per round / total users: 10  /  100
Finished creating FL server.
=== Training starts: algorithm FedFea ===
-------------Round number:  0  -------------
selected users: [26, 86, 2, 55, 75, 93, 16, 73, 54, 95]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.001
training loss: tensor(1.8432) feature loss: tensor(0.4234)
Local adapation with distilling: 0.001
training loss: tensor(1.8971) feature loss: tensor(0.4556)
Local adapation with distilling: 0.001
training loss: tensor(2.0470) feature loss: tensor(0.4678)
Local adapation with distilling: 0.001
training loss: tensor(1.8329) feature loss: tensor(0.4442)
Local adapation with distilling: 0.001
training loss: tensor(2.0598) feature loss: tensor(0.5049)
Local adapation with distilling: 0.001
training loss: tensor(1.8627) feature loss: tensor(0.4090)
Local adapation with distilling: 0.001
training loss: tensor(1.9771) feature loss: tensor(0.4875)
Local adapation with distilling: 0.001
training loss: tensor(1.8201) feature loss: tensor(0.4611)
Local adapation with distilling: 0.001
training loss: tensor(1.9798) feature loss: tensor(0.4228)
Local adapation with distilling: 0.001
training loss: tensor(1.9676) feature loss: tensor(0.4912)
Global Model Acc on global data: 0.1002 length of data: 10000
save a model
-------------Round number:  1  -------------
selected users: [80, 84, 33, 81, 93, 17, 36, 82, 69, 65]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000982
training loss: tensor(2.0227) feature loss: tensor(0.4923)
Local adapation with distilling: 0.000982
training loss: tensor(2.0287) feature loss: tensor(0.4572)
Local adapation with distilling: 0.000982
training loss: tensor(1.8933) feature loss: tensor(0.4322)
Local adapation with distilling: 0.000982
training loss: tensor(1.8890) feature loss: tensor(0.3971)
Local adapation with distilling: 0.000982
training loss: tensor(1.9227) feature loss: tensor(0.4926)
Local adapation with distilling: 0.000982
training loss: tensor(1.9803) feature loss: tensor(0.4274)
Local adapation with distilling: 0.000982
training loss: tensor(1.8615) feature loss: tensor(0.4076)
Local adapation with distilling: 0.000982
training loss: tensor(2.0556) feature loss: tensor(0.4736)
Local adapation with distilling: 0.000982
training loss: tensor(1.9048) feature loss: tensor(0.4081)
Local adapation with distilling: 0.000982
training loss: tensor(1.8579) feature loss: tensor(0.3569)
Global Model Acc on global data: 0.1468 length of data: 10000
save a model
-------------Round number:  2  -------------
selected users: [83, 30, 56, 24, 16, 23, 2, 27, 28, 13]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000964
training loss: tensor(1.4004) feature loss: tensor(0.4244)
Local adapation with distilling: 0.000964
training loss: tensor(1.4412) feature loss: tensor(0.4417)
Local adapation with distilling: 0.000964
training loss: tensor(1.4563) feature loss: tensor(0.5046)
Local adapation with distilling: 0.000964
training loss: tensor(1.4524) feature loss: tensor(0.4083)
Local adapation with distilling: 0.000964
training loss: tensor(1.4730) feature loss: tensor(0.5043)
Local adapation with distilling: 0.000964
training loss: tensor(1.4005) feature loss: tensor(0.4370)
Local adapation with distilling: 0.000964
training loss: tensor(1.5179) feature loss: tensor(0.4531)
Local adapation with distilling: 0.000964
training loss: tensor(1.5248) feature loss: tensor(0.4555)
Local adapation with distilling: 0.000964
training loss: tensor(1.6578) feature loss: tensor(0.4873)
Local adapation with distilling: 0.000964
training loss: tensor(1.3645) feature loss: tensor(0.4454)
Global Model Acc on global data: 0.1657 length of data: 10000
save a model
-------------Round number:  3  -------------
selected users: [93, 67, 6, 64, 96, 83, 98, 42, 25, 15]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000946
training loss: tensor(1.2602) feature loss: tensor(0.4308)
Local adapation with distilling: 0.000946
training loss: tensor(1.4818) feature loss: tensor(0.4916)
Local adapation with distilling: 0.000946
training loss: tensor(1.4778) feature loss: tensor(0.5155)
Local adapation with distilling: 0.000946
training loss: tensor(1.3136) feature loss: tensor(0.4107)
Local adapation with distilling: 0.000946
training loss: tensor(1.3502) feature loss: tensor(0.4852)
Local adapation with distilling: 0.000946
training loss: tensor(1.3110) feature loss: tensor(0.4623)
Local adapation with distilling: 0.000946
training loss: tensor(1.6580) feature loss: tensor(0.4874)
Local adapation with distilling: 0.000946
training loss: tensor(1.3943) feature loss: tensor(0.4772)
Local adapation with distilling: 0.000946
training loss: tensor(1.4030) feature loss: tensor(0.5026)
Local adapation with distilling: 0.000946
training loss: tensor(1.3785) feature loss: tensor(0.4576)
Global Model Acc on global data: 0.1938 length of data: 10000
save a model
-------------Round number:  4  -------------
selected users: [20, 10, 96, 16, 63, 24, 53, 97, 41, 47]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.9873) feature loss: tensor(0.7157)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.9946) feature loss: tensor(0.7137)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3010) feature loss: tensor(0.5789)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3666) feature loss: tensor(0.5972)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.4121) feature loss: tensor(0.7439)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3124) feature loss: tensor(0.5543)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.3318) feature loss: tensor(0.6702)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5109) feature loss: tensor(0.6239)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(2.2478) feature loss: tensor(0.6685)
Local adapation with distilling: 0.0009280000000000001
training loss: tensor(1.5274) feature loss: tensor(0.6518)
Global Model Acc on global data: 0.1832 length of data: 10000
-------------Round number:  5  -------------
selected users: [66, 32, 46, 28, 74, 23, 10, 20, 17, 35]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00091
training loss: tensor(1.1606) feature loss: tensor(0.4718)
Local adapation with distilling: 0.00091
training loss: tensor(1.2695) feature loss: tensor(0.4817)
Local adapation with distilling: 0.00091
training loss: tensor(1.2615) feature loss: tensor(0.4978)
Local adapation with distilling: 0.00091
training loss: tensor(2.3494) feature loss: tensor(0.5831)
Local adapation with distilling: 0.00091
training loss: tensor(1.3199) feature loss: tensor(0.4923)
Local adapation with distilling: 0.00091
training loss: tensor(1.2514) feature loss: tensor(0.5015)
Local adapation with distilling: 0.00091
training loss: tensor(1.4893) feature loss: tensor(0.6278)
Local adapation with distilling: 0.00091
training loss: tensor(1.4794) feature loss: tensor(0.5778)
Local adapation with distilling: 0.00091
training loss: tensor(1.3616) feature loss: tensor(0.5242)
Local adapation with distilling: 0.00091
training loss: tensor(1.3698) feature loss: tensor(0.5219)
Global Model Acc on global data: 0.2128 length of data: 10000
save a model
-------------Round number:  6  -------------
selected users: [17, 34, 0, 45, 60, 86, 20, 47, 44, 81]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000892
training loss: tensor(1.3779) feature loss: tensor(0.6059)
Local adapation with distilling: 0.000892
training loss: tensor(1.1373) feature loss: tensor(0.5183)
Local adapation with distilling: 0.000892
training loss: tensor(1.2901) feature loss: tensor(0.6127)
Local adapation with distilling: 0.000892
training loss: tensor(1.3031) feature loss: tensor(0.5326)
Local adapation with distilling: 0.000892
training loss: tensor(1.2828) feature loss: tensor(0.5650)
Local adapation with distilling: 0.000892
training loss: tensor(1.2577) feature loss: tensor(0.5614)
Local adapation with distilling: 0.000892
training loss: tensor(1.2880) feature loss: tensor(0.5921)
Local adapation with distilling: 0.000892
training loss: tensor(1.1781) feature loss: tensor(0.5540)
Local adapation with distilling: 0.000892
training loss: tensor(1.0631) feature loss: tensor(0.4885)
Local adapation with distilling: 0.000892
training loss: tensor(2.3427) feature loss: tensor(0.5684)
Global Model Acc on global data: 0.2108 length of data: 10000
-------------Round number:  7  -------------
selected users: [37, 26, 78, 91, 49, 15, 93, 71, 86, 22]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000874
training loss: tensor(2.0045) feature loss: tensor(0.7021)
Local adapation with distilling: 0.000874
training loss: tensor(1.9068) feature loss: tensor(0.6689)
Local adapation with distilling: 0.000874
training loss: tensor(3.0204) feature loss: tensor(0.7777)
Local adapation with distilling: 0.000874
training loss: tensor(2.3722) feature loss: tensor(0.7134)
Local adapation with distilling: 0.000874
training loss: tensor(6.4398) feature loss: tensor(0.7173)
Local adapation with distilling: 0.000874
training loss: tensor(1.8943) feature loss: tensor(0.6719)
Local adapation with distilling: 0.000874
training loss: tensor(2.1304) feature loss: tensor(0.8518)
Local adapation with distilling: 0.000874
training loss: tensor(2.6356) feature loss: tensor(0.6951)
Local adapation with distilling: 0.000874
training loss: tensor(2.0169) feature loss: tensor(0.7160)
Local adapation with distilling: 0.000874
training loss: tensor(1.8836) feature loss: tensor(0.6925)
Global Model Acc on global data: 0.2048 length of data: 10000
-------------Round number:  8  -------------
selected users: [17, 23, 1, 44, 55, 99, 86, 29, 62, 33]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000856
training loss: tensor(2.0016) feature loss: tensor(0.7224)
Local adapation with distilling: 0.000856
training loss: tensor(1.5512) feature loss: tensor(0.5359)
Local adapation with distilling: 0.000856
training loss: tensor(1.9434) feature loss: tensor(0.5563)
Local adapation with distilling: 0.000856
training loss: tensor(1.6531) feature loss: tensor(0.5152)
Local adapation with distilling: 0.000856
training loss: tensor(1.8356) feature loss: tensor(0.5712)
Local adapation with distilling: 0.000856
training loss: tensor(3.7471) feature loss: tensor(0.5134)
Local adapation with distilling: 0.000856
training loss: tensor(1.6243) feature loss: tensor(0.5318)
Local adapation with distilling: 0.000856
training loss: tensor(3.8302) feature loss: tensor(0.4943)
Local adapation with distilling: 0.000856
training loss: tensor(1.6819) feature loss: tensor(0.5113)
Local adapation with distilling: 0.000856
training loss: tensor(1.6076) feature loss: tensor(0.5117)
Global Model Acc on global data: 0.2024 length of data: 10000
-------------Round number:  9  -------------
selected users: [75, 42, 46, 68, 3, 39, 23, 20, 70, 73]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.3731) feature loss: tensor(0.5324)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.2651) feature loss: tensor(0.5156)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.4076) feature loss: tensor(0.6815)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(2.2112) feature loss: tensor(0.5659)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.3439) feature loss: tensor(0.6247)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(2.3954) feature loss: tensor(0.5774)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.2124) feature loss: tensor(0.5421)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.7864) feature loss: tensor(0.5928)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.7727) feature loss: tensor(0.5974)
Local adapation with distilling: 0.0008380000000000001
training loss: tensor(1.3034) feature loss: tensor(0.5456)
Global Model Acc on global data: 0.2052 length of data: 10000
-------------Round number:  10  -------------
selected users: [19, 14, 43, 37, 66, 3, 79, 41, 38, 68]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.7156) feature loss: tensor(0.6017)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.3808) feature loss: tensor(0.6098)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.3946) feature loss: tensor(0.5998)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.8076) feature loss: tensor(0.6718)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.4619) feature loss: tensor(0.6227)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.4999) feature loss: tensor(0.5709)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(2.0439) feature loss: tensor(0.6261)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.8696) feature loss: tensor(0.5927)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(2.0985) feature loss: tensor(0.6182)
Local adapation with distilling: 0.0008200000000000001
training loss: tensor(1.7399) feature loss: tensor(0.6157)
Global Model Acc on global data: 0.189 length of data: 10000
-------------Round number:  11  -------------
selected users: [46, 49, 22, 58, 41, 98, 62, 29, 30, 51]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.6223) feature loss: tensor(0.7072)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.4376) feature loss: tensor(0.6371)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.4069) feature loss: tensor(0.6147)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.3294) feature loss: tensor(0.6161)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.3741) feature loss: tensor(0.6077)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.4583) feature loss: tensor(0.6010)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.1884) feature loss: tensor(0.5743)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.3288) feature loss: tensor(0.6076)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.7098) feature loss: tensor(0.6246)
Local adapation with distilling: 0.0008020000000000001
training loss: tensor(1.4278) feature loss: tensor(0.6354)
Global Model Acc on global data: 0.2518 length of data: 10000
save a model
-------------Round number:  12  -------------
selected users: [17, 41, 92, 14, 68, 31, 89, 15, 21, 60]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.6377) feature loss: tensor(0.5365)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.1933) feature loss: tensor(0.5206)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.2492) feature loss: tensor(0.5400)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.1900) feature loss: tensor(0.5275)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.4560) feature loss: tensor(0.6156)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.2309) feature loss: tensor(0.5670)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.3126) feature loss: tensor(0.5226)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.7740) feature loss: tensor(0.5551)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.2833) feature loss: tensor(0.5336)
Local adapation with distilling: 0.0007840000000000001
training loss: tensor(1.3711) feature loss: tensor(0.5522)
Global Model Acc on global data: 0.2322 length of data: 10000
-------------Round number:  13  -------------
selected users: [37, 62, 83, 14, 43, 9, 44, 31, 69, 57]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.2777) feature loss: tensor(0.4785)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.0055) feature loss: tensor(0.4659)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9955) feature loss: tensor(0.4683)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.1059) feature loss: tensor(0.4907)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.9655) feature loss: tensor(0.4635)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.0420) feature loss: tensor(0.4670)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.1138) feature loss: tensor(0.4966)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(0.8518) feature loss: tensor(0.4566)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.2731) feature loss: tensor(0.5337)
Local adapation with distilling: 0.0007660000000000001
training loss: tensor(1.2315) feature loss: tensor(0.4877)
Global Model Acc on global data: 0.2171 length of data: 10000
-------------Round number:  14  -------------
selected users: [24, 39, 35, 44, 55, 70, 82, 40, 91, 65]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000748
training loss: tensor(1.0450) feature loss: tensor(0.5294)
Local adapation with distilling: 0.000748
training loss: tensor(1.0731) feature loss: tensor(0.5423)
Local adapation with distilling: 0.000748
training loss: tensor(1.6654) feature loss: tensor(0.6081)
Local adapation with distilling: 0.000748
training loss: tensor(1.0893) feature loss: tensor(0.5514)
Local adapation with distilling: 0.000748
training loss: tensor(1.7784) feature loss: tensor(0.6481)
Local adapation with distilling: 0.000748
training loss: tensor(1.2792) feature loss: tensor(0.5565)
Local adapation with distilling: 0.000748
training loss: tensor(1.1038) feature loss: tensor(0.5678)
Local adapation with distilling: 0.000748
training loss: tensor(1.1953) feature loss: tensor(0.5594)
Local adapation with distilling: 0.000748
training loss: tensor(1.0871) feature loss: tensor(0.5384)
Local adapation with distilling: 0.000748
training loss: tensor(1.4049) feature loss: tensor(0.5507)
Global Model Acc on global data: 0.2282 length of data: 10000
-------------Round number:  15  -------------
selected users: [84, 36, 57, 51, 46, 78, 93, 14, 11, 59]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00073
training loss: tensor(1.0940) feature loss: tensor(0.5493)
Local adapation with distilling: 0.00073
training loss: tensor(1.6474) feature loss: tensor(0.5714)
Local adapation with distilling: 0.00073
training loss: tensor(1.4189) feature loss: tensor(0.5705)
Local adapation with distilling: 0.00073
training loss: tensor(1.2058) feature loss: tensor(0.6119)
Local adapation with distilling: 0.00073
training loss: tensor(1.5025) feature loss: tensor(0.5622)
Local adapation with distilling: 0.00073
training loss: tensor(1.6732) feature loss: tensor(0.5765)
Local adapation with distilling: 0.00073
training loss: tensor(1.0705) feature loss: tensor(0.5463)
Local adapation with distilling: 0.00073
training loss: tensor(1.4403) feature loss: tensor(0.5717)
Local adapation with distilling: 0.00073
training loss: tensor(1.2423) feature loss: tensor(0.5630)
Local adapation with distilling: 0.00073
training loss: tensor(1.2343) feature loss: tensor(0.5457)
Global Model Acc on global data: 0.1784 length of data: 10000
-------------Round number:  16  -------------
selected users: [7, 25, 71, 42, 47, 29, 63, 88, 50, 9]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000712
training loss: tensor(1.2942) feature loss: tensor(0.6585)
Local adapation with distilling: 0.000712
training loss: tensor(1.5443) feature loss: tensor(0.7211)
Local adapation with distilling: 0.000712
training loss: tensor(1.1951) feature loss: tensor(0.6087)
Local adapation with distilling: 0.000712
training loss: tensor(1.3670) feature loss: tensor(0.6617)
Local adapation with distilling: 0.000712
training loss: tensor(1.2849) feature loss: tensor(0.6057)
Local adapation with distilling: 0.000712
training loss: tensor(1.1616) feature loss: tensor(0.5748)
Local adapation with distilling: 0.000712
training loss: tensor(1.1024) feature loss: tensor(0.5739)
Local adapation with distilling: 0.000712
training loss: tensor(1.5483) feature loss: tensor(0.5785)
Local adapation with distilling: 0.000712
training loss: tensor(1.1289) feature loss: tensor(0.5807)
Local adapation with distilling: 0.000712
training loss: tensor(1.1660) feature loss: tensor(0.5771)
Global Model Acc on global data: 0.2341 length of data: 10000
-------------Round number:  17  -------------
selected users: [71, 28, 9, 4, 73, 34, 94, 92, 47, 37]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000694
training loss: tensor(0.7768) feature loss: tensor(0.3440)
Local adapation with distilling: 0.000694
training loss: tensor(0.7900) feature loss: tensor(0.3527)
Local adapation with distilling: 0.000694
training loss: tensor(0.7444) feature loss: tensor(0.3459)
Local adapation with distilling: 0.000694
training loss: tensor(0.8211) feature loss: tensor(0.3650)
Local adapation with distilling: 0.000694
training loss: tensor(0.7551) feature loss: tensor(0.3582)
Local adapation with distilling: 0.000694
training loss: tensor(0.7748) feature loss: tensor(0.3533)
Local adapation with distilling: 0.000694
training loss: tensor(0.7857) feature loss: tensor(0.3619)
Local adapation with distilling: 0.000694
training loss: tensor(0.7441) feature loss: tensor(0.3467)
Local adapation with distilling: 0.000694
training loss: tensor(0.7231) feature loss: tensor(0.3447)
Local adapation with distilling: 0.000694
training loss: tensor(1.0372) feature loss: tensor(0.4086)
Global Model Acc on global data: 0.1952 length of data: 10000
-------------Round number:  18  -------------
selected users: [53, 47, 43, 54, 33, 48, 0, 12, 44, 91]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7930) feature loss: tensor(0.4034)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.9654) feature loss: tensor(0.4208)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7691) feature loss: tensor(0.4047)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8617) feature loss: tensor(0.3932)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8568) feature loss: tensor(0.4202)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8635) feature loss: tensor(0.4024)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8225) feature loss: tensor(0.4016)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.7987) feature loss: tensor(0.4073)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8235) feature loss: tensor(0.3977)
Local adapation with distilling: 0.0006760000000000001
training loss: tensor(0.8460) feature loss: tensor(0.4023)
Global Model Acc on global data: 0.1849 length of data: 10000
-------------Round number:  19  -------------
selected users: [85, 72, 16, 18, 2, 38, 90, 30, 83, 61]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.7204) feature loss: tensor(0.6945)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.1575) feature loss: tensor(0.5689)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(2.6367) feature loss: tensor(0.5816)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.4150) feature loss: tensor(0.6404)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.3377) feature loss: tensor(0.6134)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.2688) feature loss: tensor(0.5641)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.2206) feature loss: tensor(0.5750)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.4771) feature loss: tensor(0.6308)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(1.3926) feature loss: tensor(0.6828)
Local adapation with distilling: 0.0006580000000000001
training loss: tensor(2.0034) feature loss: tensor(0.6371)
Global Model Acc on global data: 0.1994 length of data: 10000
-------------Round number:  20  -------------
selected users: [70, 74, 2, 44, 56, 48, 12, 36, 0, 49]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00064
training loss: tensor(1.0668) feature loss: tensor(0.5105)
Local adapation with distilling: 0.00064
training loss: tensor(1.0289) feature loss: tensor(0.4232)
Local adapation with distilling: 0.00064
training loss: tensor(1.2353) feature loss: tensor(0.5373)
Local adapation with distilling: 0.00064
training loss: tensor(1.1120) feature loss: tensor(0.4576)
Local adapation with distilling: 0.00064
training loss: tensor(1.7859) feature loss: tensor(0.4582)
Local adapation with distilling: 0.00064
training loss: tensor(1.1665) feature loss: tensor(0.4911)
Local adapation with distilling: 0.00064
training loss: tensor(1.2092) feature loss: tensor(0.5526)
Local adapation with distilling: 0.00064
training loss: tensor(1.5130) feature loss: tensor(0.4715)
Local adapation with distilling: 0.00064
training loss: tensor(0.9453) feature loss: tensor(0.4655)
Local adapation with distilling: 0.00064
training loss: tensor(2.2371) feature loss: tensor(0.4434)
Global Model Acc on global data: 0.1908 length of data: 10000
-------------Round number:  21  -------------
selected users: [23, 81, 85, 34, 62, 46, 42, 31, 93, 11]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.1987) feature loss: tensor(0.5819)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2740) feature loss: tensor(0.5321)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.7384) feature loss: tensor(0.7118)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.1263) feature loss: tensor(0.5172)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(0.9966) feature loss: tensor(0.5312)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.2291) feature loss: tensor(0.5088)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.4234) feature loss: tensor(0.6949)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.3900) feature loss: tensor(0.5444)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.0450) feature loss: tensor(0.5094)
Local adapation with distilling: 0.0006220000000000002
training loss: tensor(1.3044) feature loss: tensor(0.5163)
Global Model Acc on global data: 0.2184 length of data: 10000
-------------Round number:  22  -------------
selected users: [2, 49, 82, 31, 37, 12, 87, 42, 99, 85]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.4522) feature loss: tensor(0.6415)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(2.0050) feature loss: tensor(0.4882)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.1627) feature loss: tensor(0.5716)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.4037) feature loss: tensor(0.5925)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(2.2724) feature loss: tensor(0.4902)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.4298) feature loss: tensor(0.6055)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(2.1640) feature loss: tensor(0.5077)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.3002) feature loss: tensor(0.5675)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(2.0950) feature loss: tensor(0.4897)
Local adapation with distilling: 0.0006040000000000002
training loss: tensor(1.4691) feature loss: tensor(0.5725)
Global Model Acc on global data: 0.2349 length of data: 10000
-------------Round number:  23  -------------
selected users: [26, 80, 82, 68, 77, 37, 3, 55, 20, 17]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000586
training loss: tensor(1.4462) feature loss: tensor(0.6154)
Local adapation with distilling: 0.000586
training loss: tensor(1.2118) feature loss: tensor(0.5940)
Local adapation with distilling: 0.000586
training loss: tensor(1.0214) feature loss: tensor(0.5422)
Local adapation with distilling: 0.000586
training loss: tensor(1.3811) feature loss: tensor(0.5385)
Local adapation with distilling: 0.000586
training loss: tensor(1.1998) feature loss: tensor(0.5594)
Local adapation with distilling: 0.000586
training loss: tensor(1.5173) feature loss: tensor(0.5475)
Local adapation with distilling: 0.000586
training loss: tensor(1.2348) feature loss: tensor(0.6382)
Local adapation with distilling: 0.000586
training loss: tensor(1.3430) feature loss: tensor(0.6671)
Local adapation with distilling: 0.000586
training loss: tensor(1.2972) feature loss: tensor(0.6713)
Local adapation with distilling: 0.000586
training loss: tensor(1.2533) feature loss: tensor(0.5710)
Global Model Acc on global data: 0.2768 length of data: 10000
save a model
-------------Round number:  24  -------------
selected users: [26, 31, 37, 86, 76, 14, 88, 48, 71, 67]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000568
training loss: tensor(1.2167) feature loss: tensor(0.5893)
Local adapation with distilling: 0.000568
training loss: tensor(1.1104) feature loss: tensor(0.5861)
Local adapation with distilling: 0.000568
training loss: tensor(1.0904) feature loss: tensor(0.6261)
Local adapation with distilling: 0.000568
training loss: tensor(1.2511) feature loss: tensor(0.6316)
Local adapation with distilling: 0.000568
training loss: tensor(1.4595) feature loss: tensor(0.7289)
Local adapation with distilling: 0.000568
training loss: tensor(1.1689) feature loss: tensor(0.6123)
Local adapation with distilling: 0.000568
training loss: tensor(1.5308) feature loss: tensor(0.6768)
Local adapation with distilling: 0.000568
training loss: tensor(1.3361) feature loss: tensor(0.5874)
Local adapation with distilling: 0.000568
training loss: tensor(1.5729) feature loss: tensor(0.6808)
Local adapation with distilling: 0.000568
training loss: tensor(1.1858) feature loss: tensor(0.6753)
Global Model Acc on global data: 0.3336 length of data: 10000
save a model
-------------Round number:  25  -------------
selected users: [41, 29, 33, 65, 74, 6, 57, 89, 87, 98]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00055
training loss: tensor(1.2331) feature loss: tensor(0.5969)
Local adapation with distilling: 0.00055
training loss: tensor(2.0206) feature loss: tensor(0.5074)
Local adapation with distilling: 0.00055
training loss: tensor(0.9734) feature loss: tensor(0.4972)
Local adapation with distilling: 0.00055
training loss: tensor(1.4468) feature loss: tensor(0.6349)
Local adapation with distilling: 0.00055
training loss: tensor(1.5006) feature loss: tensor(0.6621)
Local adapation with distilling: 0.00055
training loss: tensor(1.4470) feature loss: tensor(0.5705)
Local adapation with distilling: 0.00055
training loss: tensor(1.0795) feature loss: tensor(0.5047)
Local adapation with distilling: 0.00055
training loss: tensor(1.8199) feature loss: tensor(0.5066)
Local adapation with distilling: 0.00055
training loss: tensor(1.0970) feature loss: tensor(0.5480)
Local adapation with distilling: 0.00055
training loss: tensor(1.1131) feature loss: tensor(0.5146)
Global Model Acc on global data: 0.3554 length of data: 10000
save a model
-------------Round number:  26  -------------
selected users: [8, 69, 84, 41, 25, 5, 63, 95, 33, 70]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000532
training loss: tensor(1.2456) feature loss: tensor(0.5816)
Local adapation with distilling: 0.000532
training loss: tensor(1.5228) feature loss: tensor(0.4388)
Local adapation with distilling: 0.000532
training loss: tensor(1.0489) feature loss: tensor(0.4998)
Local adapation with distilling: 0.000532
training loss: tensor(0.9147) feature loss: tensor(0.4410)
Local adapation with distilling: 0.000532
training loss: tensor(0.9607) feature loss: tensor(0.4665)
Local adapation with distilling: 0.000532
training loss: tensor(0.8674) feature loss: tensor(0.4370)
Local adapation with distilling: 0.000532
training loss: tensor(0.9923) feature loss: tensor(0.5458)
Local adapation with distilling: 0.000532
training loss: tensor(1.1125) feature loss: tensor(0.5524)
Local adapation with distilling: 0.000532
training loss: tensor(0.8063) feature loss: tensor(0.4362)
Local adapation with distilling: 0.000532
training loss: tensor(0.9295) feature loss: tensor(0.4788)
Global Model Acc on global data: 0.3189 length of data: 10000
-------------Round number:  27  -------------
selected users: [89, 68, 43, 50, 40, 95, 27, 85, 22, 44]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000514
training loss: tensor(1.3158) feature loss: tensor(0.3549)
Local adapation with distilling: 0.000514
training loss: tensor(1.1068) feature loss: tensor(0.4954)
Local adapation with distilling: 0.000514
training loss: tensor(1.0373) feature loss: tensor(0.4923)
Local adapation with distilling: 0.000514
training loss: tensor(0.8178) feature loss: tensor(0.3562)
Local adapation with distilling: 0.000514
training loss: tensor(0.9277) feature loss: tensor(0.4182)
Local adapation with distilling: 0.000514
training loss: tensor(0.9019) feature loss: tensor(0.4011)
Local adapation with distilling: 0.000514
training loss: tensor(0.8634) feature loss: tensor(0.3549)
Local adapation with distilling: 0.000514
training loss: tensor(0.8736) feature loss: tensor(0.4010)
Local adapation with distilling: 0.000514
training loss: tensor(0.9098) feature loss: tensor(0.4084)
Local adapation with distilling: 0.000514
training loss: tensor(0.9158) feature loss: tensor(0.3894)
Global Model Acc on global data: 0.3088 length of data: 10000
-------------Round number:  28  -------------
selected users: [67, 14, 0, 86, 13, 18, 30, 36, 52, 95]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000496
training loss: tensor(1.0152) feature loss: tensor(0.4616)
Local adapation with distilling: 0.000496
training loss: tensor(0.8390) feature loss: tensor(0.3996)
Local adapation with distilling: 0.000496
training loss: tensor(0.8436) feature loss: tensor(0.3857)
Local adapation with distilling: 0.000496
training loss: tensor(1.2116) feature loss: tensor(0.3846)
Local adapation with distilling: 0.000496
training loss: tensor(0.7516) feature loss: tensor(0.3882)
Local adapation with distilling: 0.000496
training loss: tensor(0.9542) feature loss: tensor(0.3836)
Local adapation with distilling: 0.000496
training loss: tensor(0.8653) feature loss: tensor(0.4499)
Local adapation with distilling: 0.000496
training loss: tensor(1.2503) feature loss: tensor(0.4598)
Local adapation with distilling: 0.000496
training loss: tensor(0.9820) feature loss: tensor(0.4402)
Local adapation with distilling: 0.000496
training loss: tensor(0.7905) feature loss: tensor(0.3824)
Global Model Acc on global data: 0.3028 length of data: 10000
-------------Round number:  29  -------------
selected users: [73, 8, 10, 7, 19, 71, 92, 25, 38, 12]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.7836) feature loss: tensor(0.4297)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.0564) feature loss: tensor(0.4320)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9635) feature loss: tensor(0.5019)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.1978) feature loss: tensor(0.5349)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.9753) feature loss: tensor(0.4813)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.2936) feature loss: tensor(0.4332)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(0.9496) feature loss: tensor(0.4401)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.4563) feature loss: tensor(0.6523)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.2960) feature loss: tensor(0.5754)
Local adapation with distilling: 0.0004780000000000001
training loss: tensor(1.4254) feature loss: tensor(0.6329)
Global Model Acc on global data: 0.2902 length of data: 10000
-------------Round number:  30  -------------
selected users: [20, 91, 34, 52, 8, 74, 21, 88, 80, 89]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9699) feature loss: tensor(0.5285)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(1.2793) feature loss: tensor(0.5014)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(1.1436) feature loss: tensor(0.5480)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9057) feature loss: tensor(0.4618)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9482) feature loss: tensor(0.5125)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(1.0757) feature loss: tensor(0.5236)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(1.0843) feature loss: tensor(0.5180)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.9204) feature loss: tensor(0.5068)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(0.7596) feature loss: tensor(0.4262)
Local adapation with distilling: 0.00046000000000000007
training loss: tensor(1.7592) feature loss: tensor(0.4217)
Global Model Acc on global data: 0.2874 length of data: 10000
-------------Round number:  31  -------------
selected users: [17, 33, 76, 3, 56, 0, 37, 8, 60, 67]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(1.2407) feature loss: tensor(0.5695)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8565) feature loss: tensor(0.5022)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(1.2784) feature loss: tensor(0.5202)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8519) feature loss: tensor(0.4919)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(1.1014) feature loss: tensor(0.4807)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.9197) feature loss: tensor(0.5627)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(1.2228) feature loss: tensor(0.4859)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.8315) feature loss: tensor(0.4956)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(0.9076) feature loss: tensor(0.5458)
Local adapation with distilling: 0.00044200000000000006
training loss: tensor(1.1994) feature loss: tensor(0.6140)
Global Model Acc on global data: 0.3031 length of data: 10000
-------------Round number:  32  -------------
selected users: [22, 39, 85, 97, 55, 33, 80, 13, 27, 96]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8352) feature loss: tensor(0.4242)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.6853) feature loss: tensor(0.4211)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.1996) feature loss: tensor(0.5283)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.9468) feature loss: tensor(0.4809)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.2844) feature loss: tensor(0.6909)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0480) feature loss: tensor(0.4758)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.0469) feature loss: tensor(0.5578)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(0.8433) feature loss: tensor(0.4294)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.1429) feature loss: tensor(0.5858)
Local adapation with distilling: 0.00042400000000000006
training loss: tensor(1.5951) feature loss: tensor(0.5691)
Global Model Acc on global data: 0.2777 length of data: 10000
-------------Round number:  33  -------------
selected users: [56, 90, 95, 82, 60, 71, 6, 81, 2, 70]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9583) feature loss: tensor(0.4119)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9374) feature loss: tensor(0.4277)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9012) feature loss: tensor(0.4723)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9197) feature loss: tensor(0.4994)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8605) feature loss: tensor(0.4436)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.7174) feature loss: tensor(0.4262)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.1211) feature loss: tensor(0.4943)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(1.5708) feature loss: tensor(0.4306)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.9042) feature loss: tensor(0.4401)
Local adapation with distilling: 0.00040600000000000006
training loss: tensor(0.8009) feature loss: tensor(0.4061)
Global Model Acc on global data: 0.2913 length of data: 10000
-------------Round number:  34  -------------
selected users: [14, 74, 15, 4, 32, 59, 91, 10, 50, 53]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000388
training loss: tensor(1.0772) feature loss: tensor(0.4757)
Local adapation with distilling: 0.000388
training loss: tensor(1.0167) feature loss: tensor(0.4418)
Local adapation with distilling: 0.000388
training loss: tensor(0.9634) feature loss: tensor(0.4611)
Local adapation with distilling: 0.000388
training loss: tensor(0.9505) feature loss: tensor(0.4344)
Local adapation with distilling: 0.000388
training loss: tensor(0.8060) feature loss: tensor(0.4323)
Local adapation with distilling: 0.000388
training loss: tensor(1.6525) feature loss: tensor(0.4739)
Local adapation with distilling: 0.000388
training loss: tensor(1.1003) feature loss: tensor(0.4294)
Local adapation with distilling: 0.000388
training loss: tensor(0.9700) feature loss: tensor(0.4790)
Local adapation with distilling: 0.000388
training loss: tensor(1.0081) feature loss: tensor(0.5327)
Local adapation with distilling: 0.000388
training loss: tensor(0.8001) feature loss: tensor(0.4210)
Global Model Acc on global data: 0.247 length of data: 10000
-------------Round number:  35  -------------
selected users: [40, 71, 98, 27, 70, 31, 10, 24, 51, 35]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00037
training loss: tensor(0.9616) feature loss: tensor(0.4804)
Local adapation with distilling: 0.00037
training loss: tensor(1.1398) feature loss: tensor(0.4687)
Local adapation with distilling: 0.00037
training loss: tensor(1.6026) feature loss: tensor(0.5029)
Local adapation with distilling: 0.00037
training loss: tensor(1.4764) feature loss: tensor(0.5019)
Local adapation with distilling: 0.00037
training loss: tensor(1.0068) feature loss: tensor(0.5158)
Local adapation with distilling: 0.00037
training loss: tensor(1.5534) feature loss: tensor(0.4905)
Local adapation with distilling: 0.00037
training loss: tensor(1.0193) feature loss: tensor(0.5229)
Local adapation with distilling: 0.00037
training loss: tensor(1.2326) feature loss: tensor(0.5864)
Local adapation with distilling: 0.00037
training loss: tensor(1.2031) feature loss: tensor(0.5070)
Local adapation with distilling: 0.00037
training loss: tensor(1.2337) feature loss: tensor(0.5843)
Global Model Acc on global data: 0.2941 length of data: 10000
-------------Round number:  36  -------------
selected users: [59, 42, 2, 27, 28, 75, 58, 68, 52, 74]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.6027) feature loss: tensor(0.4506)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.7606) feature loss: tensor(0.4534)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8892) feature loss: tensor(0.4981)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.0036) feature loss: tensor(0.4484)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.0343) feature loss: tensor(0.4614)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8875) feature loss: tensor(0.4617)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.1389) feature loss: tensor(0.4699)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(1.0715) feature loss: tensor(0.4679)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.8215) feature loss: tensor(0.4551)
Local adapation with distilling: 0.0003520000000000001
training loss: tensor(0.9647) feature loss: tensor(0.4791)
Global Model Acc on global data: 0.2632 length of data: 10000
-------------Round number:  37  -------------
selected users: [61, 49, 86, 78, 5, 91, 81, 82, 89, 18]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.2038) feature loss: tensor(0.5303)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.7315) feature loss: tensor(0.6317)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.5267) feature loss: tensor(0.5994)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.1910) feature loss: tensor(0.5563)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.2242) feature loss: tensor(0.5829)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.2750) feature loss: tensor(0.5469)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.2548) feature loss: tensor(0.5897)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.3394) feature loss: tensor(0.6321)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.5842) feature loss: tensor(0.5261)
Local adapation with distilling: 0.0003340000000000001
training loss: tensor(1.2226) feature loss: tensor(0.5448)
Global Model Acc on global data: 0.3145 length of data: 10000
-------------Round number:  38  -------------
selected users: [40, 73, 49, 45, 64, 16, 69, 17, 72, 66]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9317) feature loss: tensor(0.4526)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.3017) feature loss: tensor(0.5078)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.1517) feature loss: tensor(0.4988)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.8959) feature loss: tensor(0.4475)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9576) feature loss: tensor(0.4408)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(0.9706) feature loss: tensor(0.4582)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.0640) feature loss: tensor(0.4658)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.0598) feature loss: tensor(0.4414)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.0114) feature loss: tensor(0.4786)
Local adapation with distilling: 0.0003160000000000001
training loss: tensor(1.2435) feature loss: tensor(0.5096)
Global Model Acc on global data: 0.2615 length of data: 10000
-------------Round number:  39  -------------
selected users: [22, 53, 84, 57, 87, 58, 29, 21, 85, 79]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.0173) feature loss: tensor(0.5020)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.9705) feature loss: tensor(0.4936)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.0081) feature loss: tensor(0.4873)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.1684) feature loss: tensor(0.5026)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.5679) feature loss: tensor(0.5334)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.2168) feature loss: tensor(0.5253)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.2967) feature loss: tensor(0.5240)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.4396) feature loss: tensor(0.5278)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(0.8738) feature loss: tensor(0.4884)
Local adapation with distilling: 0.00029800000000000003
training loss: tensor(1.2987) feature loss: tensor(0.5010)
Global Model Acc on global data: 0.3004 length of data: 10000
-------------Round number:  40  -------------
selected users: [79, 75, 63, 15, 38, 11, 40, 45, 39, 62]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.9896) feature loss: tensor(0.3887)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.9764) feature loss: tensor(0.4781)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.8290) feature loss: tensor(0.4199)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.7666) feature loss: tensor(0.3897)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(1.0103) feature loss: tensor(0.4042)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(0.9379) feature loss: tensor(0.3900)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(1.0052) feature loss: tensor(0.4177)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(1.1111) feature loss: tensor(0.5474)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(1.0550) feature loss: tensor(0.4328)
Local adapation with distilling: 0.00028000000000000003
training loss: tensor(1.1007) feature loss: tensor(0.4958)
Global Model Acc on global data: 0.2746 length of data: 10000
-------------Round number:  41  -------------
selected users: [42, 94, 37, 6, 79, 32, 24, 0, 33, 93]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.000262
training loss: tensor(0.9685) feature loss: tensor(0.3994)
Local adapation with distilling: 0.000262
training loss: tensor(1.0581) feature loss: tensor(0.4084)
Local adapation with distilling: 0.000262
training loss: tensor(1.1820) feature loss: tensor(0.3859)
Local adapation with distilling: 0.000262
training loss: tensor(1.1570) feature loss: tensor(0.4220)
Local adapation with distilling: 0.000262
training loss: tensor(1.1706) feature loss: tensor(0.4171)
Local adapation with distilling: 0.000262
training loss: tensor(0.9902) feature loss: tensor(0.4266)
Local adapation with distilling: 0.000262
training loss: tensor(1.1197) feature loss: tensor(0.3981)
Local adapation with distilling: 0.000262
training loss: tensor(1.0601) feature loss: tensor(0.4035)
Local adapation with distilling: 0.000262
training loss: tensor(0.9809) feature loss: tensor(0.4164)
Local adapation with distilling: 0.000262
training loss: tensor(1.0471) feature loss: tensor(0.4602)
Global Model Acc on global data: 0.247 length of data: 10000
-------------Round number:  42  -------------
selected users: [83, 53, 70, 45, 44, 39, 22, 80, 10, 0]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6206) feature loss: tensor(0.3032)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.5722) feature loss: tensor(0.2716)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.7295) feature loss: tensor(0.3242)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.7163) feature loss: tensor(0.3396)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6446) feature loss: tensor(0.2809)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(1.1037) feature loss: tensor(0.2875)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6051) feature loss: tensor(0.2795)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.7118) feature loss: tensor(0.3395)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6845) feature loss: tensor(0.3214)
Local adapation with distilling: 0.0002440000000000001
training loss: tensor(0.6995) feature loss: tensor(0.3260)
Global Model Acc on global data: 0.2334 length of data: 10000
-------------Round number:  43  -------------
selected users: [20, 2, 15, 22, 57, 91, 69, 55, 11, 79]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.9790) feature loss: tensor(0.5087)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.9709) feature loss: tensor(0.5057)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.9144) feature loss: tensor(0.4933)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.1000) feature loss: tensor(0.5295)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.2806) feature loss: tensor(0.4991)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.3094) feature loss: tensor(0.4917)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.1788) feature loss: tensor(0.5134)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(0.9618) feature loss: tensor(0.5011)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.5774) feature loss: tensor(0.5404)
Local adapation with distilling: 0.0002260000000000001
training loss: tensor(1.1379) feature loss: tensor(0.4881)
Global Model Acc on global data: 0.2466 length of data: 10000
-------------Round number:  44  -------------
selected users: [42, 54, 27, 93, 39, 65, 7, 26, 24, 60]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9220) feature loss: tensor(0.4458)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.3281) feature loss: tensor(0.5705)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.1099) feature loss: tensor(0.4896)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(0.9347) feature loss: tensor(0.4522)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.5855) feature loss: tensor(0.4571)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.1474) feature loss: tensor(0.5598)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.3356) feature loss: tensor(0.5211)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.2225) feature loss: tensor(0.4513)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.0533) feature loss: tensor(0.4727)
Local adapation with distilling: 0.00020800000000000007
training loss: tensor(1.0375) feature loss: tensor(0.4850)
Global Model Acc on global data: 0.2833 length of data: 10000
-------------Round number:  45  -------------
selected users: [0, 1, 62, 76, 37, 99, 78, 38, 2, 84]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.0868) feature loss: tensor(0.4880)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.5393) feature loss: tensor(0.5299)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.6696) feature loss: tensor(0.5647)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.5886) feature loss: tensor(0.5838)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.1691) feature loss: tensor(0.4945)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.7178) feature loss: tensor(0.5044)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(2.2486) feature loss: tensor(0.5636)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(2.0842) feature loss: tensor(0.5241)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.4903) feature loss: tensor(0.5401)
Local adapation with distilling: 0.00019000000000000006
training loss: tensor(1.6643) feature loss: tensor(0.5587)
Global Model Acc on global data: 0.3418 length of data: 10000
-------------Round number:  46  -------------
selected users: [71, 33, 37, 10, 44, 34, 24, 98, 73, 95]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8101) feature loss: tensor(0.3639)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7580) feature loss: tensor(0.3617)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.9043) feature loss: tensor(0.3729)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.7972) feature loss: tensor(0.3831)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.9832) feature loss: tensor(0.4466)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.9390) feature loss: tensor(0.4185)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.9006) feature loss: tensor(0.4159)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(1.0727) feature loss: tensor(0.3817)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8578) feature loss: tensor(0.4002)
Local adapation with distilling: 0.00017200000000000003
training loss: tensor(0.8684) feature loss: tensor(0.3641)
Global Model Acc on global data: 0.2911 length of data: 10000
-------------Round number:  47  -------------
selected users: [17, 90, 94, 86, 63, 5, 38, 14, 40, 47]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(1.4654) feature loss: tensor(0.4127)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8745) feature loss: tensor(0.4156)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9569) feature loss: tensor(0.4685)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(1.1893) feature loss: tensor(0.3980)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.8667) feature loss: tensor(0.3978)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(1.0478) feature loss: tensor(0.4755)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(1.2808) feature loss: tensor(0.4130)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9637) feature loss: tensor(0.4555)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(0.9008) feature loss: tensor(0.4194)
Local adapation with distilling: 0.00015400000000000003
training loss: tensor(1.2408) feature loss: tensor(0.4505)
Global Model Acc on global data: 0.2766 length of data: 10000
-------------Round number:  48  -------------
selected users: [93, 5, 71, 9, 11, 79, 69, 8, 59, 63]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.3085) feature loss: tensor(0.5694)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.2337) feature loss: tensor(0.5346)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.4927) feature loss: tensor(0.5316)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.9596) feature loss: tensor(0.5595)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.6698) feature loss: tensor(0.5145)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.6964) feature loss: tensor(0.5942)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.6421) feature loss: tensor(0.5112)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.6028) feature loss: tensor(0.5736)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.5115) feature loss: tensor(0.5271)
Local adapation with distilling: 0.00013600000000000013
training loss: tensor(1.0895) feature loss: tensor(0.5305)
Global Model Acc on global data: 0.295 length of data: 10000
-------------Round number:  49  -------------
selected users: [76, 25, 28, 75, 81, 47, 41, 22, 29, 1]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.4812) feature loss: tensor(0.4750)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.2880) feature loss: tensor(0.5093)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.4076) feature loss: tensor(0.4603)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.0634) feature loss: tensor(0.4121)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9693) feature loss: tensor(0.4886)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.2926) feature loss: tensor(0.4993)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9976) feature loss: tensor(0.4847)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(1.3136) feature loss: tensor(0.4918)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9840) feature loss: tensor(0.4510)
Local adapation with distilling: 0.0001180000000000001
training loss: tensor(0.9479) feature loss: tensor(0.4462)
Global Model Acc on global data: 0.3483 length of data: 10000
-------------Round number:  50  -------------
selected users: [80, 79, 25, 15, 39, 40, 53, 17, 57, 50]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8601) feature loss: tensor(0.3606)
Local adapation with distilling: 0.0001
training loss: tensor(0.8690) feature loss: tensor(0.3496)
Local adapation with distilling: 0.0001
training loss: tensor(0.7416) feature loss: tensor(0.3440)
Local adapation with distilling: 0.0001
training loss: tensor(0.7224) feature loss: tensor(0.3385)
Local adapation with distilling: 0.0001
training loss: tensor(0.8996) feature loss: tensor(0.3582)
Local adapation with distilling: 0.0001
training loss: tensor(0.8459) feature loss: tensor(0.3513)
Local adapation with distilling: 0.0001
training loss: tensor(0.8724) feature loss: tensor(0.3346)
Local adapation with distilling: 0.0001
training loss: tensor(0.9103) feature loss: tensor(0.3456)
Local adapation with distilling: 0.0001
training loss: tensor(0.9102) feature loss: tensor(0.3704)
Local adapation with distilling: 0.0001
training loss: tensor(0.8505) feature loss: tensor(0.3575)
Global Model Acc on global data: 0.2812 length of data: 10000
-------------Round number:  51  -------------
selected users: [71, 43, 11, 83, 78, 19, 80, 4, 79, 75]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9386) feature loss: tensor(0.3792)
Local adapation with distilling: 0.0001
training loss: tensor(0.8045) feature loss: tensor(0.3783)
Local adapation with distilling: 0.0001
training loss: tensor(0.9698) feature loss: tensor(0.3797)
Local adapation with distilling: 0.0001
training loss: tensor(0.8159) feature loss: tensor(0.3751)
Local adapation with distilling: 0.0001
training loss: tensor(1.4020) feature loss: tensor(0.3839)
Local adapation with distilling: 0.0001
training loss: tensor(0.9093) feature loss: tensor(0.3787)
Local adapation with distilling: 0.0001
training loss: tensor(0.8523) feature loss: tensor(0.3849)
Local adapation with distilling: 0.0001
training loss: tensor(1.0212) feature loss: tensor(0.3746)
Local adapation with distilling: 0.0001
training loss: tensor(0.9008) feature loss: tensor(0.3775)
Local adapation with distilling: 0.0001
training loss: tensor(0.7632) feature loss: tensor(0.3777)
Global Model Acc on global data: 0.2618 length of data: 10000
-------------Round number:  52  -------------
selected users: [82, 8, 44, 19, 2, 73, 37, 89, 67, 18]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1758) feature loss: tensor(0.4904)
Local adapation with distilling: 0.0001
training loss: tensor(1.3671) feature loss: tensor(0.5252)
Local adapation with distilling: 0.0001
training loss: tensor(1.0992) feature loss: tensor(0.4910)
Local adapation with distilling: 0.0001
training loss: tensor(0.9397) feature loss: tensor(0.4947)
Local adapation with distilling: 0.0001
training loss: tensor(1.1454) feature loss: tensor(0.4882)
Local adapation with distilling: 0.0001
training loss: tensor(0.8877) feature loss: tensor(0.4866)
Local adapation with distilling: 0.0001
training loss: tensor(1.1498) feature loss: tensor(0.5014)
Local adapation with distilling: 0.0001
training loss: tensor(1.2305) feature loss: tensor(0.4856)
Local adapation with distilling: 0.0001
training loss: tensor(1.1321) feature loss: tensor(0.4803)
Local adapation with distilling: 0.0001
training loss: tensor(1.3682) feature loss: tensor(0.4941)
Global Model Acc on global data: 0.3045 length of data: 10000
-------------Round number:  53  -------------
selected users: [19, 78, 64, 3, 71, 32, 68, 42, 55, 97]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9961) feature loss: tensor(0.3547)
Local adapation with distilling: 0.0001
training loss: tensor(1.0525) feature loss: tensor(0.3525)
Local adapation with distilling: 0.0001
training loss: tensor(0.8249) feature loss: tensor(0.3581)
Local adapation with distilling: 0.0001
training loss: tensor(0.7665) feature loss: tensor(0.3577)
Local adapation with distilling: 0.0001
training loss: tensor(1.0199) feature loss: tensor(0.3563)
Local adapation with distilling: 0.0001
training loss: tensor(0.8458) feature loss: tensor(0.3602)
Local adapation with distilling: 0.0001
training loss: tensor(0.9856) feature loss: tensor(0.3509)
Local adapation with distilling: 0.0001
training loss: tensor(0.9221) feature loss: tensor(0.3776)
Local adapation with distilling: 0.0001
training loss: tensor(0.8056) feature loss: tensor(0.3560)
Local adapation with distilling: 0.0001
training loss: tensor(1.1776) feature loss: tensor(0.3568)
Global Model Acc on global data: 0.2971 length of data: 10000
-------------Round number:  54  -------------
selected users: [36, 70, 48, 94, 81, 46, 38, 29, 34, 22]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.3800) feature loss: tensor(0.4872)
Local adapation with distilling: 0.0001
training loss: tensor(0.9964) feature loss: tensor(0.4552)
Local adapation with distilling: 0.0001
training loss: tensor(1.2812) feature loss: tensor(0.4777)
Local adapation with distilling: 0.0001
training loss: tensor(1.1790) feature loss: tensor(0.4933)
Local adapation with distilling: 0.0001
training loss: tensor(1.2957) feature loss: tensor(0.4678)
Local adapation with distilling: 0.0001
training loss: tensor(1.3678) feature loss: tensor(0.5050)
Local adapation with distilling: 0.0001
training loss: tensor(1.1384) feature loss: tensor(0.4977)
Local adapation with distilling: 0.0001
training loss: tensor(1.1846) feature loss: tensor(0.4382)
Local adapation with distilling: 0.0001
training loss: tensor(1.1101) feature loss: tensor(0.4696)
Local adapation with distilling: 0.0001
training loss: tensor(1.1634) feature loss: tensor(0.4630)
Global Model Acc on global data: 0.3689 length of data: 10000
save a model
-------------Round number:  55  -------------
selected users: [28, 92, 98, 95, 84, 34, 38, 76, 17, 78]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8364) feature loss: tensor(0.4203)
Local adapation with distilling: 0.0001
training loss: tensor(0.7133) feature loss: tensor(0.3696)
Local adapation with distilling: 0.0001
training loss: tensor(0.8008) feature loss: tensor(0.3836)
Local adapation with distilling: 0.0001
training loss: tensor(0.7930) feature loss: tensor(0.3605)
Local adapation with distilling: 0.0001
training loss: tensor(0.8021) feature loss: tensor(0.3663)
Local adapation with distilling: 0.0001
training loss: tensor(0.7676) feature loss: tensor(0.3741)
Local adapation with distilling: 0.0001
training loss: tensor(0.8051) feature loss: tensor(0.3756)
Local adapation with distilling: 0.0001
training loss: tensor(0.8377) feature loss: tensor(0.3942)
Local adapation with distilling: 0.0001
training loss: tensor(1.9019) feature loss: tensor(0.3517)
Local adapation with distilling: 0.0001
training loss: tensor(0.9162) feature loss: tensor(0.4591)
Global Model Acc on global data: 0.3461 length of data: 10000
-------------Round number:  56  -------------
selected users: [92, 79, 23, 68, 52, 38, 73, 9, 59, 27]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1805) feature loss: tensor(0.4718)
Local adapation with distilling: 0.0001
training loss: tensor(1.4861) feature loss: tensor(0.4679)
Local adapation with distilling: 0.0001
training loss: tensor(1.1965) feature loss: tensor(0.5013)
Local adapation with distilling: 0.0001
training loss: tensor(1.1309) feature loss: tensor(0.5202)
Local adapation with distilling: 0.0001
training loss: tensor(1.0328) feature loss: tensor(0.4445)
Local adapation with distilling: 0.0001
training loss: tensor(1.0342) feature loss: tensor(0.5052)
Local adapation with distilling: 0.0001
training loss: tensor(0.9789) feature loss: tensor(0.4572)
Local adapation with distilling: 0.0001
training loss: tensor(1.6684) feature loss: tensor(0.4864)
Local adapation with distilling: 0.0001
training loss: tensor(1.5168) feature loss: tensor(0.4997)
Local adapation with distilling: 0.0001
training loss: tensor(1.3817) feature loss: tensor(0.4327)
Global Model Acc on global data: 0.3063 length of data: 10000
-------------Round number:  57  -------------
selected users: [52, 17, 41, 3, 8, 98, 59, 20, 67, 7]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9375) feature loss: tensor(0.4650)
Local adapation with distilling: 0.0001
training loss: tensor(1.1471) feature loss: tensor(0.4749)
Local adapation with distilling: 0.0001
training loss: tensor(1.1638) feature loss: tensor(0.4726)
Local adapation with distilling: 0.0001
training loss: tensor(0.8843) feature loss: tensor(0.4679)
Local adapation with distilling: 0.0001
training loss: tensor(1.0147) feature loss: tensor(0.4807)
Local adapation with distilling: 0.0001
training loss: tensor(0.9692) feature loss: tensor(0.4782)
Local adapation with distilling: 0.0001
training loss: tensor(1.0377) feature loss: tensor(0.4573)
Local adapation with distilling: 0.0001
training loss: tensor(1.1526) feature loss: tensor(0.4981)
Local adapation with distilling: 0.0001
training loss: tensor(1.0210) feature loss: tensor(0.4585)
Local adapation with distilling: 0.0001
training loss: tensor(1.0952) feature loss: tensor(0.4451)
Global Model Acc on global data: 0.3323 length of data: 10000
-------------Round number:  58  -------------
selected users: [43, 58, 8, 31, 70, 45, 69, 95, 50, 4]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8094) feature loss: tensor(0.3410)
Local adapation with distilling: 0.0001
training loss: tensor(0.8119) feature loss: tensor(0.3488)
Local adapation with distilling: 0.0001
training loss: tensor(0.9244) feature loss: tensor(0.3605)
Local adapation with distilling: 0.0001
training loss: tensor(0.9768) feature loss: tensor(0.3562)
Local adapation with distilling: 0.0001
training loss: tensor(0.8204) feature loss: tensor(0.3627)
Local adapation with distilling: 0.0001
training loss: tensor(0.9143) feature loss: tensor(0.3403)
Local adapation with distilling: 0.0001
training loss: tensor(1.0446) feature loss: tensor(0.3475)
Local adapation with distilling: 0.0001
training loss: tensor(0.8597) feature loss: tensor(0.3446)
Local adapation with distilling: 0.0001
training loss: tensor(0.8096) feature loss: tensor(0.3471)
Local adapation with distilling: 0.0001
training loss: tensor(1.1043) feature loss: tensor(0.3433)
Global Model Acc on global data: 0.2576 length of data: 10000
-------------Round number:  59  -------------
selected users: [38, 46, 24, 87, 30, 85, 16, 96, 18, 99]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.0133) feature loss: tensor(0.4983)
Local adapation with distilling: 0.0001
training loss: tensor(1.4001) feature loss: tensor(0.5431)
Local adapation with distilling: 0.0001
training loss: tensor(1.1813) feature loss: tensor(0.5246)
Local adapation with distilling: 0.0001
training loss: tensor(1.1642) feature loss: tensor(0.4694)
Local adapation with distilling: 0.0001
training loss: tensor(1.0499) feature loss: tensor(0.5341)
Local adapation with distilling: 0.0001
training loss: tensor(1.1054) feature loss: tensor(0.4858)
Local adapation with distilling: 0.0001
training loss: tensor(1.3402) feature loss: tensor(0.5128)
Local adapation with distilling: 0.0001
training loss: tensor(1.3976) feature loss: tensor(0.5049)
Local adapation with distilling: 0.0001
training loss: tensor(1.1615) feature loss: tensor(0.6409)
Local adapation with distilling: 0.0001
training loss: tensor(1.3317) feature loss: tensor(0.4754)
Global Model Acc on global data: 0.3013 length of data: 10000
-------------Round number:  60  -------------
selected users: [88, 4, 79, 14, 55, 3, 19, 28, 94, 25]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8465) feature loss: tensor(0.4657)
Local adapation with distilling: 0.0001
training loss: tensor(0.8537) feature loss: tensor(0.3668)
Local adapation with distilling: 0.0001
training loss: tensor(1.0085) feature loss: tensor(0.3461)
Local adapation with distilling: 0.0001
training loss: tensor(0.9478) feature loss: tensor(0.4351)
Local adapation with distilling: 0.0001
training loss: tensor(0.7883) feature loss: tensor(0.3477)
Local adapation with distilling: 0.0001
training loss: tensor(0.7393) feature loss: tensor(0.3506)
Local adapation with distilling: 0.0001
training loss: tensor(1.3105) feature loss: tensor(0.3788)
Local adapation with distilling: 0.0001
training loss: tensor(0.8787) feature loss: tensor(0.4065)
Local adapation with distilling: 0.0001
training loss: tensor(0.9568) feature loss: tensor(0.4347)
Local adapation with distilling: 0.0001
training loss: tensor(0.6767) feature loss: tensor(0.3322)
Global Model Acc on global data: 0.2636 length of data: 10000
-------------Round number:  61  -------------
selected users: [83, 1, 55, 9, 31, 28, 96, 29, 86, 63]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9819) feature loss: tensor(0.4821)
Local adapation with distilling: 0.0001
training loss: tensor(1.3046) feature loss: tensor(0.4538)
Local adapation with distilling: 0.0001
training loss: tensor(0.8718) feature loss: tensor(0.4509)
Local adapation with distilling: 0.0001
training loss: tensor(1.3926) feature loss: tensor(0.4778)
Local adapation with distilling: 0.0001
training loss: tensor(1.4276) feature loss: tensor(0.4845)
Local adapation with distilling: 0.0001
training loss: tensor(1.0214) feature loss: tensor(0.5180)
Local adapation with distilling: 0.0001
training loss: tensor(1.0254) feature loss: tensor(0.4538)
Local adapation with distilling: 0.0001
training loss: tensor(1.3488) feature loss: tensor(0.4601)
Local adapation with distilling: 0.0001
training loss: tensor(1.1196) feature loss: tensor(0.4773)
Local adapation with distilling: 0.0001
training loss: tensor(0.9450) feature loss: tensor(0.4713)
Global Model Acc on global data: 0.321 length of data: 10000
-------------Round number:  62  -------------
selected users: [76, 48, 62, 80, 29, 99, 60, 89, 39, 69]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9428) feature loss: tensor(0.4761)
Local adapation with distilling: 0.0001
training loss: tensor(0.9224) feature loss: tensor(0.4618)
Local adapation with distilling: 0.0001
training loss: tensor(1.1331) feature loss: tensor(0.5243)
Local adapation with distilling: 0.0001
training loss: tensor(1.1595) feature loss: tensor(0.6211)
Local adapation with distilling: 0.0001
training loss: tensor(1.0559) feature loss: tensor(0.4767)
Local adapation with distilling: 0.0001
training loss: tensor(1.0295) feature loss: tensor(0.4592)
Local adapation with distilling: 0.0001
training loss: tensor(1.0123) feature loss: tensor(0.5284)
Local adapation with distilling: 0.0001
training loss: tensor(0.9779) feature loss: tensor(0.4996)
Local adapation with distilling: 0.0001
training loss: tensor(1.0285) feature loss: tensor(0.4668)
Local adapation with distilling: 0.0001
training loss: tensor(1.0222) feature loss: tensor(0.4928)
Global Model Acc on global data: 0.3339 length of data: 10000
-------------Round number:  63  -------------
selected users: [64, 59, 63, 2, 80, 20, 18, 48, 72, 51]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.0347) feature loss: tensor(0.3496)
Local adapation with distilling: 0.0001
training loss: tensor(0.7918) feature loss: tensor(0.3414)
Local adapation with distilling: 0.0001
training loss: tensor(0.8608) feature loss: tensor(0.3445)
Local adapation with distilling: 0.0001
training loss: tensor(0.9781) feature loss: tensor(0.3808)
Local adapation with distilling: 0.0001
training loss: tensor(0.8730) feature loss: tensor(0.4033)
Local adapation with distilling: 0.0001
training loss: tensor(0.8744) feature loss: tensor(0.3441)
Local adapation with distilling: 0.0001
training loss: tensor(1.0316) feature loss: tensor(0.3991)
Local adapation with distilling: 0.0001
training loss: tensor(1.0563) feature loss: tensor(0.3750)
Local adapation with distilling: 0.0001
training loss: tensor(0.9176) feature loss: tensor(0.3424)
Local adapation with distilling: 0.0001
training loss: tensor(1.0734) feature loss: tensor(0.3684)
Global Model Acc on global data: 0.3081 length of data: 10000
-------------Round number:  64  -------------
selected users: [17, 22, 60, 92, 23, 19, 71, 94, 40, 49]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.3603) feature loss: tensor(0.3715)
Local adapation with distilling: 0.0001
training loss: tensor(0.7492) feature loss: tensor(0.3744)
Local adapation with distilling: 0.0001
training loss: tensor(0.7074) feature loss: tensor(0.3771)
Local adapation with distilling: 0.0001
training loss: tensor(0.8465) feature loss: tensor(0.3913)
Local adapation with distilling: 0.0001
training loss: tensor(0.7569) feature loss: tensor(0.3757)
Local adapation with distilling: 0.0001
training loss: tensor(1.0156) feature loss: tensor(0.3745)
Local adapation with distilling: 0.0001
training loss: tensor(1.0490) feature loss: tensor(0.3879)
Local adapation with distilling: 0.0001
training loss: tensor(0.7994) feature loss: tensor(0.3803)
Local adapation with distilling: 0.0001
training loss: tensor(0.6922) feature loss: tensor(0.3739)
Local adapation with distilling: 0.0001
training loss: tensor(1.1540) feature loss: tensor(0.3714)
Global Model Acc on global data: 0.262 length of data: 10000
-------------Round number:  65  -------------
selected users: [37, 81, 39, 61, 76, 90, 27, 86, 28, 69]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.2245) feature loss: tensor(0.5465)
Local adapation with distilling: 0.0001
training loss: tensor(1.3193) feature loss: tensor(0.5525)
Local adapation with distilling: 0.0001
training loss: tensor(1.2922) feature loss: tensor(0.5840)
Local adapation with distilling: 0.0001
training loss: tensor(1.1160) feature loss: tensor(0.5685)
Local adapation with distilling: 0.0001
training loss: tensor(1.0935) feature loss: tensor(0.5399)
Local adapation with distilling: 0.0001
training loss: tensor(0.9226) feature loss: tensor(0.5747)
Local adapation with distilling: 0.0001
training loss: tensor(1.2590) feature loss: tensor(0.5492)
Local adapation with distilling: 0.0001
training loss: tensor(1.0308) feature loss: tensor(0.5356)
Local adapation with distilling: 0.0001
training loss: tensor(1.0771) feature loss: tensor(0.5621)
Local adapation with distilling: 0.0001
training loss: tensor(1.2862) feature loss: tensor(0.5567)
Global Model Acc on global data: 0.3775 length of data: 10000
save a model
-------------Round number:  66  -------------
selected users: [8, 93, 4, 5, 52, 41, 0, 73, 88, 68]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9553) feature loss: tensor(0.4226)
Local adapation with distilling: 0.0001
training loss: tensor(0.8544) feature loss: tensor(0.3930)
Local adapation with distilling: 0.0001
training loss: tensor(0.9210) feature loss: tensor(0.3785)
Local adapation with distilling: 0.0001
training loss: tensor(0.8310) feature loss: tensor(0.3799)
Local adapation with distilling: 0.0001
training loss: tensor(0.9574) feature loss: tensor(0.3861)
Local adapation with distilling: 0.0001
training loss: tensor(0.8774) feature loss: tensor(0.3773)
Local adapation with distilling: 0.0001
training loss: tensor(0.8360) feature loss: tensor(0.3996)
Local adapation with distilling: 0.0001
training loss: tensor(0.8870) feature loss: tensor(0.4146)
Local adapation with distilling: 0.0001
training loss: tensor(0.9273) feature loss: tensor(0.3797)
Local adapation with distilling: 0.0001
training loss: tensor(0.9205) feature loss: tensor(0.3768)
Global Model Acc on global data: 0.2885 length of data: 10000
-------------Round number:  67  -------------
selected users: [17, 24, 64, 93, 97, 29, 3, 70, 82, 11]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1470) feature loss: tensor(0.3879)
Local adapation with distilling: 0.0001
training loss: tensor(0.8278) feature loss: tensor(0.4029)
Local adapation with distilling: 0.0001
training loss: tensor(0.8026) feature loss: tensor(0.3860)
Local adapation with distilling: 0.0001
training loss: tensor(0.7498) feature loss: tensor(0.3889)
Local adapation with distilling: 0.0001
training loss: tensor(1.1556) feature loss: tensor(0.3900)
Local adapation with distilling: 0.0001
training loss: tensor(1.3776) feature loss: tensor(0.3985)
Local adapation with distilling: 0.0001
training loss: tensor(0.7508) feature loss: tensor(0.3917)
Local adapation with distilling: 0.0001
training loss: tensor(0.8046) feature loss: tensor(0.3886)
Local adapation with distilling: 0.0001
training loss: tensor(0.7926) feature loss: tensor(0.3921)
Local adapation with distilling: 0.0001
training loss: tensor(1.0503) feature loss: tensor(0.4341)
Global Model Acc on global data: 0.2889 length of data: 10000
-------------Round number:  68  -------------
selected users: [29, 30, 16, 5, 38, 71, 76, 94, 99, 95]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.3857) feature loss: tensor(0.4584)
Local adapation with distilling: 0.0001
training loss: tensor(0.7421) feature loss: tensor(0.4688)
Local adapation with distilling: 0.0001
training loss: tensor(0.9767) feature loss: tensor(0.4637)
Local adapation with distilling: 0.0001
training loss: tensor(0.8275) feature loss: tensor(0.4592)
Local adapation with distilling: 0.0001
training loss: tensor(1.1513) feature loss: tensor(0.4620)
Local adapation with distilling: 0.0001
training loss: tensor(1.1790) feature loss: tensor(0.4627)
Local adapation with distilling: 0.0001
training loss: tensor(0.9085) feature loss: tensor(0.4596)
Local adapation with distilling: 0.0001
training loss: tensor(0.7648) feature loss: tensor(0.4631)
Local adapation with distilling: 0.0001
training loss: tensor(1.4001) feature loss: tensor(0.4660)
Local adapation with distilling: 0.0001
training loss: tensor(0.8590) feature loss: tensor(0.4689)
Global Model Acc on global data: 0.2907 length of data: 10000
-------------Round number:  69  -------------
selected users: [72, 31, 13, 83, 33, 8, 26, 89, 64, 97]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8821) feature loss: tensor(0.4178)
Local adapation with distilling: 0.0001
training loss: tensor(0.9570) feature loss: tensor(0.4172)
Local adapation with distilling: 0.0001
training loss: tensor(1.1171) feature loss: tensor(0.4984)
Local adapation with distilling: 0.0001
training loss: tensor(0.8217) feature loss: tensor(0.4213)
Local adapation with distilling: 0.0001
training loss: tensor(0.8324) feature loss: tensor(0.4201)
Local adapation with distilling: 0.0001
training loss: tensor(0.9760) feature loss: tensor(0.4168)
Local adapation with distilling: 0.0001
training loss: tensor(0.8198) feature loss: tensor(0.4233)
Local adapation with distilling: 0.0001
training loss: tensor(0.9655) feature loss: tensor(0.4178)
Local adapation with distilling: 0.0001
training loss: tensor(0.8104) feature loss: tensor(0.4223)
Local adapation with distilling: 0.0001
training loss: tensor(1.1032) feature loss: tensor(0.4152)
Global Model Acc on global data: 0.3118 length of data: 10000
-------------Round number:  70  -------------
selected users: [81, 43, 88, 32, 50, 71, 73, 55, 42, 2]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1330) feature loss: tensor(0.3287)
Local adapation with distilling: 0.0001
training loss: tensor(0.6740) feature loss: tensor(0.3315)
Local adapation with distilling: 0.0001
training loss: tensor(0.9786) feature loss: tensor(0.3263)
Local adapation with distilling: 0.0001
training loss: tensor(0.8066) feature loss: tensor(0.3512)
Local adapation with distilling: 0.0001
training loss: tensor(0.7439) feature loss: tensor(0.3296)
Local adapation with distilling: 0.0001
training loss: tensor(1.0228) feature loss: tensor(0.3256)
Local adapation with distilling: 0.0001
training loss: tensor(0.7052) feature loss: tensor(0.3320)
Local adapation with distilling: 0.0001
training loss: tensor(0.8148) feature loss: tensor(0.3225)
Local adapation with distilling: 0.0001
training loss: tensor(0.7640) feature loss: tensor(0.3308)
Local adapation with distilling: 0.0001
training loss: tensor(0.9381) feature loss: tensor(0.3954)
Global Model Acc on global data: 0.2724 length of data: 10000
-------------Round number:  71  -------------
selected users: [41, 84, 98, 42, 75, 25, 60, 19, 52, 29]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1635) feature loss: tensor(0.3589)
Local adapation with distilling: 0.0001
training loss: tensor(0.7973) feature loss: tensor(0.3614)
Local adapation with distilling: 0.0001
training loss: tensor(0.9953) feature loss: tensor(0.3900)
Local adapation with distilling: 0.0001
training loss: tensor(0.7056) feature loss: tensor(0.3622)
Local adapation with distilling: 0.0001
training loss: tensor(0.7616) feature loss: tensor(0.3562)
Local adapation with distilling: 0.0001
training loss: tensor(0.7517) feature loss: tensor(0.3561)
Local adapation with distilling: 0.0001
training loss: tensor(0.7759) feature loss: tensor(0.3794)
Local adapation with distilling: 0.0001
training loss: tensor(1.4215) feature loss: tensor(0.3521)
Local adapation with distilling: 0.0001
training loss: tensor(0.7460) feature loss: tensor(0.3827)
Local adapation with distilling: 0.0001
training loss: tensor(1.6679) feature loss: tensor(0.3517)
Global Model Acc on global data: 0.2769 length of data: 10000
-------------Round number:  72  -------------
selected users: [76, 82, 43, 16, 84, 95, 78, 91, 30, 22]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9000) feature loss: tensor(0.3486)
Local adapation with distilling: 0.0001
training loss: tensor(0.6605) feature loss: tensor(0.3563)
Local adapation with distilling: 0.0001
training loss: tensor(0.7493) feature loss: tensor(0.3482)
Local adapation with distilling: 0.0001
training loss: tensor(0.9767) feature loss: tensor(0.3840)
Local adapation with distilling: 0.0001
training loss: tensor(0.7039) feature loss: tensor(0.3512)
Local adapation with distilling: 0.0001
training loss: tensor(0.6703) feature loss: tensor(0.3508)
Local adapation with distilling: 0.0001
training loss: tensor(0.8257) feature loss: tensor(0.3513)
Local adapation with distilling: 0.0001
training loss: tensor(0.9829) feature loss: tensor(0.3523)
Local adapation with distilling: 0.0001
training loss: tensor(0.6729) feature loss: tensor(0.3522)
Local adapation with distilling: 0.0001
training loss: tensor(0.6493) feature loss: tensor(0.3543)
Global Model Acc on global data: 0.2805 length of data: 10000
-------------Round number:  73  -------------
selected users: [49, 14, 34, 70, 90, 35, 68, 76, 80, 9]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.3258) feature loss: tensor(0.4076)
Local adapation with distilling: 0.0001
training loss: tensor(0.7308) feature loss: tensor(0.4167)
Local adapation with distilling: 0.0001
training loss: tensor(0.7276) feature loss: tensor(0.4141)
Local adapation with distilling: 0.0001
training loss: tensor(0.7636) feature loss: tensor(0.4239)
Local adapation with distilling: 0.0001
training loss: tensor(0.7132) feature loss: tensor(0.4141)
Local adapation with distilling: 0.0001
training loss: tensor(0.7160) feature loss: tensor(0.4115)
Local adapation with distilling: 0.0001
training loss: tensor(1.0605) feature loss: tensor(0.4079)
Local adapation with distilling: 0.0001
training loss: tensor(0.7933) feature loss: tensor(0.4186)
Local adapation with distilling: 0.0001
training loss: tensor(0.7654) feature loss: tensor(0.4423)
Local adapation with distilling: 0.0001
training loss: tensor(1.6796) feature loss: tensor(0.4030)
Global Model Acc on global data: 0.2923 length of data: 10000
-------------Round number:  74  -------------
selected users: [85, 64, 63, 80, 6, 12, 43, 17, 7, 8]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8364) feature loss: tensor(0.3551)
Local adapation with distilling: 0.0001
training loss: tensor(0.8545) feature loss: tensor(0.3545)
Local adapation with distilling: 0.0001
training loss: tensor(1.0093) feature loss: tensor(0.3551)
Local adapation with distilling: 0.0001
training loss: tensor(0.8870) feature loss: tensor(0.4263)
Local adapation with distilling: 0.0001
training loss: tensor(0.9857) feature loss: tensor(0.3549)
Local adapation with distilling: 0.0001
training loss: tensor(0.9221) feature loss: tensor(0.3555)
Local adapation with distilling: 0.0001
training loss: tensor(0.9716) feature loss: tensor(0.3518)
Local adapation with distilling: 0.0001
training loss: tensor(1.7523) feature loss: tensor(0.3409)
Local adapation with distilling: 0.0001
training loss: tensor(1.7773) feature loss: tensor(0.3459)
Local adapation with distilling: 0.0001
training loss: tensor(1.0685) feature loss: tensor(0.3541)
Global Model Acc on global data: 0.2493 length of data: 10000
-------------Round number:  75  -------------
selected users: [36, 7, 6, 45, 56, 54, 22, 37, 53, 68]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9001) feature loss: tensor(0.4238)
Local adapation with distilling: 0.0001
training loss: tensor(1.6323) feature loss: tensor(0.4170)
Local adapation with distilling: 0.0001
training loss: tensor(0.9259) feature loss: tensor(0.4444)
Local adapation with distilling: 0.0001
training loss: tensor(0.7826) feature loss: tensor(0.4210)
Local adapation with distilling: 0.0001
training loss: tensor(0.9742) feature loss: tensor(0.4776)
Local adapation with distilling: 0.0001
training loss: tensor(0.7917) feature loss: tensor(0.4287)
Local adapation with distilling: 0.0001
training loss: tensor(0.7920) feature loss: tensor(0.4199)
Local adapation with distilling: 0.0001
training loss: tensor(1.1990) feature loss: tensor(0.4163)
Local adapation with distilling: 0.0001
training loss: tensor(0.7713) feature loss: tensor(0.4238)
Local adapation with distilling: 0.0001
training loss: tensor(1.1942) feature loss: tensor(0.4175)
Global Model Acc on global data: 0.2778 length of data: 10000
-------------Round number:  76  -------------
selected users: [38, 37, 32, 50, 10, 94, 19, 44, 86, 23]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1825) feature loss: tensor(0.3957)
Local adapation with distilling: 0.0001
training loss: tensor(1.0581) feature loss: tensor(0.3943)
Local adapation with distilling: 0.0001
training loss: tensor(0.7982) feature loss: tensor(0.3972)
Local adapation with distilling: 0.0001
training loss: tensor(0.8374) feature loss: tensor(0.3969)
Local adapation with distilling: 0.0001
training loss: tensor(0.8097) feature loss: tensor(0.4040)
Local adapation with distilling: 0.0001
training loss: tensor(0.7650) feature loss: tensor(0.4002)
Local adapation with distilling: 0.0001
training loss: tensor(1.7238) feature loss: tensor(0.3925)
Local adapation with distilling: 0.0001
training loss: tensor(0.7826) feature loss: tensor(0.3972)
Local adapation with distilling: 0.0001
training loss: tensor(0.7424) feature loss: tensor(0.3977)
Local adapation with distilling: 0.0001
training loss: tensor(0.7509) feature loss: tensor(0.3994)
Global Model Acc on global data: 0.3131 length of data: 10000
-------------Round number:  77  -------------
selected users: [5, 93, 41, 96, 16, 42, 81, 91, 50, 58]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8821) feature loss: tensor(0.4177)
Local adapation with distilling: 0.0001
training loss: tensor(0.9051) feature loss: tensor(0.4156)
Local adapation with distilling: 0.0001
training loss: tensor(2.0583) feature loss: tensor(0.4177)
Local adapation with distilling: 0.0001
training loss: tensor(0.8814) feature loss: tensor(0.4282)
Local adapation with distilling: 0.0001
training loss: tensor(1.0141) feature loss: tensor(0.4749)
Local adapation with distilling: 0.0001
training loss: tensor(0.9976) feature loss: tensor(0.4254)
Local adapation with distilling: 0.0001
training loss: tensor(1.4209) feature loss: tensor(0.4193)
Local adapation with distilling: 0.0001
training loss: tensor(1.8241) feature loss: tensor(0.4577)
Local adapation with distilling: 0.0001
training loss: tensor(0.9002) feature loss: tensor(0.4423)
Local adapation with distilling: 0.0001
training loss: tensor(1.1006) feature loss: tensor(0.4359)
Global Model Acc on global data: 0.3286 length of data: 10000
-------------Round number:  78  -------------
selected users: [9, 46, 7, 63, 15, 2, 74, 31, 5, 36]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.4135) feature loss: tensor(0.3632)
Local adapation with distilling: 0.0001
training loss: tensor(0.7826) feature loss: tensor(0.3663)
Local adapation with distilling: 0.0001
training loss: tensor(1.2307) feature loss: tensor(0.3620)
Local adapation with distilling: 0.0001
training loss: tensor(0.9688) feature loss: tensor(0.4218)
Local adapation with distilling: 0.0001
training loss: tensor(0.8189) feature loss: tensor(0.3659)
Local adapation with distilling: 0.0001
training loss: tensor(0.8866) feature loss: tensor(0.3597)
Local adapation with distilling: 0.0001
training loss: tensor(0.8393) feature loss: tensor(0.3600)
Local adapation with distilling: 0.0001
training loss: tensor(0.9411) feature loss: tensor(0.3610)
Local adapation with distilling: 0.0001
training loss: tensor(0.7747) feature loss: tensor(0.3613)
Local adapation with distilling: 0.0001
training loss: tensor(0.7810) feature loss: tensor(0.3609)
Global Model Acc on global data: 0.2815 length of data: 10000
-------------Round number:  79  -------------
selected users: [68, 18, 86, 60, 56, 32, 30, 24, 45, 92]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1245) feature loss: tensor(0.4107)
Local adapation with distilling: 0.0001
training loss: tensor(1.1086) feature loss: tensor(0.3643)
Local adapation with distilling: 0.0001
training loss: tensor(0.7168) feature loss: tensor(0.3657)
Local adapation with distilling: 0.0001
training loss: tensor(0.7459) feature loss: tensor(0.3843)
Local adapation with distilling: 0.0001
training loss: tensor(0.7680) feature loss: tensor(0.3990)
Local adapation with distilling: 0.0001
training loss: tensor(0.7361) feature loss: tensor(0.3710)
Local adapation with distilling: 0.0001
training loss: tensor(0.7814) feature loss: tensor(0.3834)
Local adapation with distilling: 0.0001
training loss: tensor(0.7128) feature loss: tensor(0.3657)
Local adapation with distilling: 0.0001
training loss: tensor(0.6832) feature loss: tensor(0.3642)
Local adapation with distilling: 0.0001
training loss: tensor(0.7543) feature loss: tensor(0.3656)
Global Model Acc on global data: 0.2706 length of data: 10000
-------------Round number:  80  -------------
selected users: [37, 65, 95, 53, 66, 30, 73, 85, 45, 36]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.3432) feature loss: tensor(0.2955)
Local adapation with distilling: 0.0001
training loss: tensor(0.6319) feature loss: tensor(0.3022)
Local adapation with distilling: 0.0001
training loss: tensor(0.6976) feature loss: tensor(0.3192)
Local adapation with distilling: 0.0001
training loss: tensor(0.6749) feature loss: tensor(0.3042)
Local adapation with distilling: 0.0001
training loss: tensor(0.6178) feature loss: tensor(0.3015)
Local adapation with distilling: 0.0001
training loss: tensor(0.5787) feature loss: tensor(0.3047)
Local adapation with distilling: 0.0001
training loss: tensor(0.6591) feature loss: tensor(0.3015)
Local adapation with distilling: 0.0001
training loss: tensor(0.6472) feature loss: tensor(0.3061)
Local adapation with distilling: 0.0001
training loss: tensor(0.6239) feature loss: tensor(0.3050)
Local adapation with distilling: 0.0001
training loss: tensor(0.6283) feature loss: tensor(0.3041)
Global Model Acc on global data: 0.194 length of data: 10000
-------------Round number:  81  -------------
selected users: [73, 89, 41, 78, 51, 21, 30, 69, 8, 5]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.9235) feature loss: tensor(0.5273)
Local adapation with distilling: 0.0001
training loss: tensor(2.6124) feature loss: tensor(0.5336)
Local adapation with distilling: 0.0001
training loss: tensor(2.2053) feature loss: tensor(0.5325)
Local adapation with distilling: 0.0001
training loss: tensor(1.4524) feature loss: tensor(0.5573)
Local adapation with distilling: 0.0001
training loss: tensor(2.1321) feature loss: tensor(0.5431)
Local adapation with distilling: 0.0001
training loss: tensor(1.8952) feature loss: tensor(0.5862)
Local adapation with distilling: 0.0001
training loss: tensor(1.0628) feature loss: tensor(0.5775)
Local adapation with distilling: 0.0001
training loss: tensor(2.6038) feature loss: tensor(0.5258)
Local adapation with distilling: 0.0001
training loss: tensor(1.3654) feature loss: tensor(0.5398)
Local adapation with distilling: 0.0001
training loss: tensor(0.8757) feature loss: tensor(0.5198)
Global Model Acc on global data: 0.2967 length of data: 10000
-------------Round number:  82  -------------
selected users: [72, 33, 58, 2, 55, 84, 54, 75, 28, 40]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8244) feature loss: tensor(0.2912)
Local adapation with distilling: 0.0001
training loss: tensor(0.7102) feature loss: tensor(0.2904)
Local adapation with distilling: 0.0001
training loss: tensor(0.7295) feature loss: tensor(0.2916)
Local adapation with distilling: 0.0001
training loss: tensor(0.8472) feature loss: tensor(0.2962)
Local adapation with distilling: 0.0001
training loss: tensor(0.7120) feature loss: tensor(0.2941)
Local adapation with distilling: 0.0001
training loss: tensor(0.8478) feature loss: tensor(0.2942)
Local adapation with distilling: 0.0001
training loss: tensor(0.8689) feature loss: tensor(0.3172)
Local adapation with distilling: 0.0001
training loss: tensor(0.7394) feature loss: tensor(0.2930)
Local adapation with distilling: 0.0001
training loss: tensor(0.7069) feature loss: tensor(0.2923)
Local adapation with distilling: 0.0001
training loss: tensor(0.6920) feature loss: tensor(0.2951)
Global Model Acc on global data: 0.2369 length of data: 10000
-------------Round number:  83  -------------
selected users: [6, 65, 95, 84, 61, 12, 30, 69, 35, 1]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.0473) feature loss: tensor(0.4055)
Local adapation with distilling: 0.0001
training loss: tensor(0.7221) feature loss: tensor(0.3744)
Local adapation with distilling: 0.0001
training loss: tensor(0.7367) feature loss: tensor(0.3728)
Local adapation with distilling: 0.0001
training loss: tensor(0.8369) feature loss: tensor(0.3821)
Local adapation with distilling: 0.0001
training loss: tensor(1.5356) feature loss: tensor(0.3792)
Local adapation with distilling: 0.0001
training loss: tensor(0.7394) feature loss: tensor(0.3728)
Local adapation with distilling: 0.0001
training loss: tensor(0.7620) feature loss: tensor(0.3866)
Local adapation with distilling: 0.0001
training loss: tensor(1.6777) feature loss: tensor(0.3692)
Local adapation with distilling: 0.0001
training loss: tensor(0.7744) feature loss: tensor(0.3699)
Local adapation with distilling: 0.0001
training loss: tensor(1.4744) feature loss: tensor(0.3748)
Global Model Acc on global data: 0.2495 length of data: 10000
-------------Round number:  84  -------------
selected users: [94, 55, 80, 1, 90, 11, 32, 8, 6, 82]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.6691) feature loss: tensor(0.3507)
Local adapation with distilling: 0.0001
training loss: tensor(0.6026) feature loss: tensor(0.3462)
Local adapation with distilling: 0.0001
training loss: tensor(0.6566) feature loss: tensor(0.3471)
Local adapation with distilling: 0.0001
training loss: tensor(1.1696) feature loss: tensor(0.3465)
Local adapation with distilling: 0.0001
training loss: tensor(0.6492) feature loss: tensor(0.3566)
Local adapation with distilling: 0.0001
training loss: tensor(1.0492) feature loss: tensor(0.3480)
Local adapation with distilling: 0.0001
training loss: tensor(0.6634) feature loss: tensor(0.3485)
Local adapation with distilling: 0.0001
training loss: tensor(0.9651) feature loss: tensor(0.4247)
Local adapation with distilling: 0.0001
training loss: tensor(0.7898) feature loss: tensor(0.3446)
Local adapation with distilling: 0.0001
training loss: tensor(0.6796) feature loss: tensor(0.3471)
Global Model Acc on global data: 0.2622 length of data: 10000
-------------Round number:  85  -------------
selected users: [81, 25, 40, 87, 41, 23, 10, 89, 50, 54]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.0886) feature loss: tensor(0.3852)
Local adapation with distilling: 0.0001
training loss: tensor(0.7562) feature loss: tensor(0.3667)
Local adapation with distilling: 0.0001
training loss: tensor(0.7201) feature loss: tensor(0.3706)
Local adapation with distilling: 0.0001
training loss: tensor(1.4496) feature loss: tensor(0.3658)
Local adapation with distilling: 0.0001
training loss: tensor(1.1741) feature loss: tensor(0.3724)
Local adapation with distilling: 0.0001
training loss: tensor(0.8131) feature loss: tensor(0.3683)
Local adapation with distilling: 0.0001
training loss: tensor(0.7374) feature loss: tensor(0.3800)
Local adapation with distilling: 0.0001
training loss: tensor(1.3013) feature loss: tensor(0.3719)
Local adapation with distilling: 0.0001
training loss: tensor(0.6872) feature loss: tensor(0.3756)
Local adapation with distilling: 0.0001
training loss: tensor(0.7891) feature loss: tensor(0.3684)
Global Model Acc on global data: 0.2649 length of data: 10000
-------------Round number:  86  -------------
selected users: [69, 74, 34, 68, 42, 0, 32, 88, 8, 3]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1989) feature loss: tensor(0.3953)
Local adapation with distilling: 0.0001
training loss: tensor(0.8349) feature loss: tensor(0.4061)
Local adapation with distilling: 0.0001
training loss: tensor(0.8119) feature loss: tensor(0.4005)
Local adapation with distilling: 0.0001
training loss: tensor(0.9707) feature loss: tensor(0.3968)
Local adapation with distilling: 0.0001
training loss: tensor(0.8519) feature loss: tensor(0.4014)
Local adapation with distilling: 0.0001
training loss: tensor(0.7080) feature loss: tensor(0.4034)
Local adapation with distilling: 0.0001
training loss: tensor(0.8474) feature loss: tensor(0.3994)
Local adapation with distilling: 0.0001
training loss: tensor(1.0401) feature loss: tensor(0.4004)
Local adapation with distilling: 0.0001
training loss: tensor(0.9348) feature loss: tensor(0.4219)
Local adapation with distilling: 0.0001
training loss: tensor(0.7700) feature loss: tensor(0.4005)
Global Model Acc on global data: 0.3125 length of data: 10000
-------------Round number:  87  -------------
selected users: [16, 81, 85, 32, 39, 25, 26, 29, 65, 7]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.1039) feature loss: tensor(0.4433)
Local adapation with distilling: 0.0001
training loss: tensor(1.4272) feature loss: tensor(0.4630)
Local adapation with distilling: 0.0001
training loss: tensor(0.9638) feature loss: tensor(0.4416)
Local adapation with distilling: 0.0001
training loss: tensor(1.3783) feature loss: tensor(0.5481)
Local adapation with distilling: 0.0001
training loss: tensor(1.5890) feature loss: tensor(0.4500)
Local adapation with distilling: 0.0001
training loss: tensor(0.9702) feature loss: tensor(0.4588)
Local adapation with distilling: 0.0001
training loss: tensor(1.1472) feature loss: tensor(0.4569)
Local adapation with distilling: 0.0001
training loss: tensor(1.7106) feature loss: tensor(0.4759)
Local adapation with distilling: 0.0001
training loss: tensor(1.2477) feature loss: tensor(0.5282)
Local adapation with distilling: 0.0001
training loss: tensor(1.6928) feature loss: tensor(0.4376)
Global Model Acc on global data: 0.2946 length of data: 10000
-------------Round number:  88  -------------
selected users: [95, 53, 43, 84, 2, 74, 55, 31, 54, 97]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.6446) feature loss: tensor(0.3094)
Local adapation with distilling: 0.0001
training loss: tensor(0.7956) feature loss: tensor(0.3164)
Local adapation with distilling: 0.0001
training loss: tensor(0.7970) feature loss: tensor(0.3071)
Local adapation with distilling: 0.0001
training loss: tensor(0.7976) feature loss: tensor(0.3093)
Local adapation with distilling: 0.0001
training loss: tensor(0.7715) feature loss: tensor(0.3052)
Local adapation with distilling: 0.0001
training loss: tensor(0.7586) feature loss: tensor(0.3115)
Local adapation with distilling: 0.0001
training loss: tensor(0.6534) feature loss: tensor(0.3076)
Local adapation with distilling: 0.0001
training loss: tensor(0.8907) feature loss: tensor(0.3144)
Local adapation with distilling: 0.0001
training loss: tensor(0.8151) feature loss: tensor(0.3085)
Local adapation with distilling: 0.0001
training loss: tensor(0.9177) feature loss: tensor(0.3030)
Global Model Acc on global data: 0.1974 length of data: 10000
-------------Round number:  89  -------------
selected users: [65, 21, 87, 6, 46, 74, 44, 60, 72, 5]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.7474) feature loss: tensor(0.3931)
Local adapation with distilling: 0.0001
training loss: tensor(1.3572) feature loss: tensor(0.3900)
Local adapation with distilling: 0.0001
training loss: tensor(1.3312) feature loss: tensor(0.3777)
Local adapation with distilling: 0.0001
training loss: tensor(0.9450) feature loss: tensor(0.3827)
Local adapation with distilling: 0.0001
training loss: tensor(0.9077) feature loss: tensor(0.3841)
Local adapation with distilling: 0.0001
training loss: tensor(0.6943) feature loss: tensor(0.3866)
Local adapation with distilling: 0.0001
training loss: tensor(0.7162) feature loss: tensor(0.3852)
Local adapation with distilling: 0.0001
training loss: tensor(0.9068) feature loss: tensor(0.3940)
Local adapation with distilling: 0.0001
training loss: tensor(0.7822) feature loss: tensor(0.3854)
Local adapation with distilling: 0.0001
training loss: tensor(0.7057) feature loss: tensor(0.3839)
Global Model Acc on global data: 0.2352 length of data: 10000
-------------Round number:  90  -------------
selected users: [25, 85, 96, 89, 65, 94, 5, 35, 36, 92]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.6288) feature loss: tensor(0.2977)
Local adapation with distilling: 0.0001
training loss: tensor(0.5191) feature loss: tensor(0.2908)
Local adapation with distilling: 0.0001
training loss: tensor(0.5655) feature loss: tensor(0.2949)
Local adapation with distilling: 0.0001
training loss: tensor(1.6212) feature loss: tensor(0.2882)
Local adapation with distilling: 0.0001
training loss: tensor(0.5535) feature loss: tensor(0.2915)
Local adapation with distilling: 0.0001
training loss: tensor(0.5347) feature loss: tensor(0.2914)
Local adapation with distilling: 0.0001
training loss: tensor(0.5194) feature loss: tensor(0.2887)
Local adapation with distilling: 0.0001
training loss: tensor(0.6197) feature loss: tensor(0.3113)
Local adapation with distilling: 0.0001
training loss: tensor(0.6042) feature loss: tensor(0.2931)
Local adapation with distilling: 0.0001
training loss: tensor(0.5797) feature loss: tensor(0.2878)
Global Model Acc on global data: 0.1668 length of data: 10000
-------------Round number:  91  -------------
selected users: [75, 25, 3, 52, 78, 54, 59, 26, 62, 97]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.7649) feature loss: tensor(0.3622)
Local adapation with distilling: 0.0001
training loss: tensor(0.6855) feature loss: tensor(0.3642)
Local adapation with distilling: 0.0001
training loss: tensor(0.9712) feature loss: tensor(0.3660)
Local adapation with distilling: 0.0001
training loss: tensor(0.9321) feature loss: tensor(0.3644)
Local adapation with distilling: 0.0001
training loss: tensor(1.5351) feature loss: tensor(0.3662)
Local adapation with distilling: 0.0001
training loss: tensor(0.8310) feature loss: tensor(0.3592)
Local adapation with distilling: 0.0001
training loss: tensor(1.3491) feature loss: tensor(0.3581)
Local adapation with distilling: 0.0001
training loss: tensor(0.8607) feature loss: tensor(0.3602)
Local adapation with distilling: 0.0001
training loss: tensor(0.8651) feature loss: tensor(0.3665)
Local adapation with distilling: 0.0001
training loss: tensor(1.5976) feature loss: tensor(0.3541)
Global Model Acc on global data: 0.217 length of data: 10000
-------------Round number:  92  -------------
selected users: [25, 99, 73, 61, 66, 36, 23, 83, 77, 6]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.6821) feature loss: tensor(0.3829)
Local adapation with distilling: 0.0001
training loss: tensor(1.5692) feature loss: tensor(0.3861)
Local adapation with distilling: 0.0001
training loss: tensor(0.8974) feature loss: tensor(0.4276)
Local adapation with distilling: 0.0001
training loss: tensor(1.1183) feature loss: tensor(0.3866)
Local adapation with distilling: 0.0001
training loss: tensor(0.8467) feature loss: tensor(0.4088)
Local adapation with distilling: 0.0001
training loss: tensor(0.8074) feature loss: tensor(0.3828)
Local adapation with distilling: 0.0001
training loss: tensor(0.7290) feature loss: tensor(0.3851)
Local adapation with distilling: 0.0001
training loss: tensor(0.8238) feature loss: tensor(0.4046)
Local adapation with distilling: 0.0001
training loss: tensor(1.3799) feature loss: tensor(0.3766)
Local adapation with distilling: 0.0001
training loss: tensor(0.7816) feature loss: tensor(0.3851)
Global Model Acc on global data: 0.2703 length of data: 10000
-------------Round number:  93  -------------
selected users: [75, 82, 56, 27, 42, 35, 1, 97, 66, 61]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.7990) feature loss: tensor(0.4044)
Local adapation with distilling: 0.0001
training loss: tensor(0.9667) feature loss: tensor(0.3940)
Local adapation with distilling: 0.0001
training loss: tensor(0.6657) feature loss: tensor(0.3781)
Local adapation with distilling: 0.0001
training loss: tensor(1.1029) feature loss: tensor(0.3796)
Local adapation with distilling: 0.0001
training loss: tensor(1.0242) feature loss: tensor(0.4479)
Local adapation with distilling: 0.0001
training loss: tensor(0.7869) feature loss: tensor(0.4023)
Local adapation with distilling: 0.0001
training loss: tensor(1.1055) feature loss: tensor(0.3733)
Local adapation with distilling: 0.0001
training loss: tensor(1.0805) feature loss: tensor(0.3756)
Local adapation with distilling: 0.0001
training loss: tensor(0.7485) feature loss: tensor(0.4114)
Local adapation with distilling: 0.0001
training loss: tensor(1.1148) feature loss: tensor(0.3920)
Global Model Acc on global data: 0.2844 length of data: 10000
-------------Round number:  94  -------------
selected users: [13, 73, 5, 18, 99, 48, 23, 4, 35, 17]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.7576) feature loss: tensor(0.3540)
Local adapation with distilling: 0.0001
training loss: tensor(0.8471) feature loss: tensor(0.3628)
Local adapation with distilling: 0.0001
training loss: tensor(0.6846) feature loss: tensor(0.3565)
Local adapation with distilling: 0.0001
training loss: tensor(1.2113) feature loss: tensor(0.3563)
Local adapation with distilling: 0.0001
training loss: tensor(1.3510) feature loss: tensor(0.3518)
Local adapation with distilling: 0.0001
training loss: tensor(1.1504) feature loss: tensor(0.3546)
Local adapation with distilling: 0.0001
training loss: tensor(0.8044) feature loss: tensor(0.3556)
Local adapation with distilling: 0.0001
training loss: tensor(0.9279) feature loss: tensor(0.3543)
Local adapation with distilling: 0.0001
training loss: tensor(0.6873) feature loss: tensor(0.3539)
Local adapation with distilling: 0.0001
training loss: tensor(0.9045) feature loss: tensor(0.3527)
Global Model Acc on global data: 0.2689 length of data: 10000
-------------Round number:  95  -------------
selected users: [88, 9, 1, 60, 95, 26, 45, 71, 44, 21]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.0492) feature loss: tensor(0.4054)
Local adapation with distilling: 0.0001
training loss: tensor(1.2348) feature loss: tensor(0.4034)
Local adapation with distilling: 0.0001
training loss: tensor(1.1635) feature loss: tensor(0.4073)
Local adapation with distilling: 0.0001
training loss: tensor(1.0320) feature loss: tensor(0.4644)
Local adapation with distilling: 0.0001
training loss: tensor(0.7476) feature loss: tensor(0.4117)
Local adapation with distilling: 0.0001
training loss: tensor(0.8773) feature loss: tensor(0.4291)
Local adapation with distilling: 0.0001
training loss: tensor(0.7497) feature loss: tensor(0.4098)
Local adapation with distilling: 0.0001
training loss: tensor(1.1401) feature loss: tensor(0.4088)
Local adapation with distilling: 0.0001
training loss: tensor(0.9666) feature loss: tensor(0.4102)
Local adapation with distilling: 0.0001
training loss: tensor(0.9318) feature loss: tensor(0.4110)
Global Model Acc on global data: 0.2848 length of data: 10000
-------------Round number:  96  -------------
selected users: [41, 28, 52, 15, 87, 17, 75, 42, 45, 49]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.7627) feature loss: tensor(0.3658)
Local adapation with distilling: 0.0001
training loss: tensor(0.8785) feature loss: tensor(0.4016)
Local adapation with distilling: 0.0001
training loss: tensor(0.7854) feature loss: tensor(0.3817)
Local adapation with distilling: 0.0001
training loss: tensor(0.7159) feature loss: tensor(0.3742)
Local adapation with distilling: 0.0001
training loss: tensor(0.9846) feature loss: tensor(0.3775)
Local adapation with distilling: 0.0001
training loss: tensor(0.9844) feature loss: tensor(0.3605)
Local adapation with distilling: 0.0001
training loss: tensor(1.0149) feature loss: tensor(0.4525)
Local adapation with distilling: 0.0001
training loss: tensor(0.9772) feature loss: tensor(0.4528)
Local adapation with distilling: 0.0001
training loss: tensor(0.6541) feature loss: tensor(0.3526)
Local adapation with distilling: 0.0001
training loss: tensor(0.9952) feature loss: tensor(0.3698)
Global Model Acc on global data: 0.2868 length of data: 10000
-------------Round number:  97  -------------
selected users: [31, 43, 64, 56, 85, 2, 70, 21, 34, 50]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.8525) feature loss: tensor(0.3243)
Local adapation with distilling: 0.0001
training loss: tensor(0.7705) feature loss: tensor(0.3208)
Local adapation with distilling: 0.0001
training loss: tensor(0.8718) feature loss: tensor(0.3206)
Local adapation with distilling: 0.0001
training loss: tensor(0.7701) feature loss: tensor(0.3227)
Local adapation with distilling: 0.0001
training loss: tensor(0.6563) feature loss: tensor(0.3256)
Local adapation with distilling: 0.0001
training loss: tensor(0.6994) feature loss: tensor(0.3232)
Local adapation with distilling: 0.0001
training loss: tensor(0.8347) feature loss: tensor(0.3257)
Local adapation with distilling: 0.0001
training loss: tensor(0.7853) feature loss: tensor(0.3223)
Local adapation with distilling: 0.0001
training loss: tensor(0.7628) feature loss: tensor(0.3250)
Local adapation with distilling: 0.0001
training loss: tensor(0.8344) feature loss: tensor(0.3216)
Global Model Acc on global data: 0.2661 length of data: 10000
-------------Round number:  98  -------------
selected users: [11, 48, 97, 14, 22, 36, 99, 47, 33, 81]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(1.2385) feature loss: tensor(0.5246)
Local adapation with distilling: 0.0001
training loss: tensor(1.3429) feature loss: tensor(0.4880)
Local adapation with distilling: 0.0001
training loss: tensor(1.3394) feature loss: tensor(0.4857)
Local adapation with distilling: 0.0001
training loss: tensor(0.8715) feature loss: tensor(0.4955)
Local adapation with distilling: 0.0001
training loss: tensor(0.8301) feature loss: tensor(0.4875)
Local adapation with distilling: 0.0001
training loss: tensor(0.9051) feature loss: tensor(0.4872)
Local adapation with distilling: 0.0001
training loss: tensor(1.7826) feature loss: tensor(0.4858)
Local adapation with distilling: 0.0001
training loss: tensor(1.2702) feature loss: tensor(0.4824)
Local adapation with distilling: 0.0001
training loss: tensor(0.8270) feature loss: tensor(0.4856)
Local adapation with distilling: 0.0001
training loss: tensor(0.9596) feature loss: tensor(0.4851)
Global Model Acc on global data: 0.3546 length of data: 10000
-------------Round number:  99  -------------
selected users: [14, 34, 30, 78, 16, 15, 91, 38, 10, 85]
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([500, 16, 32, 32]) torch.Size([500])
random features: torch.Size([250, 16, 32, 32]) torch.Size([250])
K 2 torch.Size([2500, 16, 32, 32]) torch.Size([2500])
random features: torch.Size([1250, 16, 32, 32]) torch.Size([1250])
Local adapation with distilling: 0.0001
training loss: tensor(0.6293) feature loss: tensor(0.3272)
Local adapation with distilling: 0.0001
training loss: tensor(0.6242) feature loss: tensor(0.3259)
Local adapation with distilling: 0.0001
training loss: tensor(0.6862) feature loss: tensor(0.3242)
Local adapation with distilling: 0.0001
training loss: tensor(0.8157) feature loss: tensor(0.3247)
Local adapation with distilling: 0.0001
training loss: tensor(0.6629) feature loss: tensor(0.3276)
Local adapation with distilling: 0.0001
training loss: tensor(0.6879) feature loss: tensor(0.3289)
Local adapation with distilling: 0.0001
training loss: tensor(0.7094) feature loss: tensor(0.3272)
Local adapation with distilling: 0.0001
training loss: tensor(0.8146) feature loss: tensor(0.3240)
Local adapation with distilling: 0.0001
training loss: tensor(0.7006) feature loss: tensor(0.3302)
Local adapation with distilling: 0.0001
training loss: tensor(0.6545) feature loss: tensor(0.3272)
Global Model Acc on global data: 0.2948 length of data: 10000
